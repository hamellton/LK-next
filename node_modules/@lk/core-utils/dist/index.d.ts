import { APIService, RequestBody } from "@lk/utils";
declare namespace sessionFunctions {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    const createNewSession: (api: APIService) => Promise<{
        data: {
            sessionId?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            sessionId: any;
        };
        error: ErrorType;
    }>;
    const validateSession: (api: APIService) => Promise<{
        data: {
            customerInfo: {
                id: any;
                isLoggedIn: boolean;
                customerMobile: any;
                customerEmail: any;
                cartIds: any;
                itemsCount: any;
                wishlist: any;
            };
        };
        error: ErrorType;
    }>;
}
declare namespace fireBaseFunctions {
    const getConfig: (key: string, api: APIService) => Promise<{
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getLocale: (key: string, api: APIService, isDevelopment: boolean, locale: string, client: string) => Promise<{
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace redisFunctions {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    const getRedisMapping: (redisIds: string[], api: APIService) => Promise<ResponseData>;
}
declare namespace userFunctions {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    const validateAccountInfo: (captcha: string | null, type: SignInType, value: string, countryCode: string, localeData: any, api: APIService) => Promise<{
        data: {
            type: SignInType.PHONE;
            showPassword: boolean;
            showOTP: boolean;
            optSent: boolean;
            isCaptchaRequired: any;
            isRedirectToSignup?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            type?: undefined;
            showPassword?: undefined;
            showOTP?: undefined;
            optSent?: undefined;
            isCaptchaRequired?: undefined;
            isRedirectToSignup?: undefined;
        };
        error: {
            isError: boolean;
            message: string;
        };
    } | {
        data: {
            isRedirectToSignup: boolean;
            type?: undefined;
            showPassword?: undefined;
            showOTP?: undefined;
            optSent?: undefined;
            isCaptchaRequired?: undefined;
        };
        error: {
            isError: boolean;
            message: any;
        };
    } | {
        data: {
            type: SignInType.EMAIL;
            showPassword: boolean;
            showOTP: boolean;
            optSent: boolean;
            isCaptchaRequired: boolean;
            isRedirectToSignup?: undefined;
        };
        error: ErrorType;
    }>;
    const getUserInfo: (api: APIService) => Promise<{
        data: any;
        error: ErrorType;
    }>;
    const updateUserInfo: (api: APIService, body: RequestBody<any>) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const updateRecentSearch: (api: APIService, body: RequestBody<any>) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const sendOPT: (captcha: string | null, value: string, countryCode: string, api: APIService) => Promise<{
        data: {
            status: string;
            result: any;
        };
        error: ErrorType;
    } | {
        data: {
            status?: undefined;
            result?: undefined;
        };
        error: ErrorType;
    }>;
    const validateOTP: (api: APIService, body: RequestBody<any>) => Promise<{
        data: any;
        error: ErrorType;
    }>;
    const validatePassword: (api: APIService, body: RequestBody<any>) => Promise<{
        data: any;
        error: ErrorType;
    }>;
    const resetPassword: (api: APIService, body: RequestBody<any>) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const resetPasswordV2: (api: APIService, body: RequestBody<any>, token: string) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const signup: (api: APIService, body: RequestBody<any>) => Promise<{
        data: any;
        error: ErrorType;
    }>;
    const cygnusImage: (api: APIService, body?: RequestBody<any>) => Promise<{
        data: any;
        error: ErrorType;
    }>;
    const cygnusOverlayImage: (api: APIService, pid: number, guestId: string) => Promise<{
        data: any;
        error: ErrorType;
    }>;
    const updateCustomerCygnus: (api: APIService, body?: RequestBody<any>, deleteApi?: boolean) => Promise<{
        data: any;
        error: ErrorType;
    }>;
    const dittoAuth: (id: string, api: APIService) => Promise<{
        data: any;
        error: ErrorType;
    }>;
    const dittoProfileGet: (api: APIService) => Promise<{
        data: any;
        error: ErrorType;
    }>;
    const dittoProfilePost: (api: APIService, id: string) => Promise<{
        data: any;
        error: ErrorType;
    }>;
    const dittoProfileDelete: (id: string, api: APIService) => Promise<{
        data: any;
        error: ErrorType;
    }>;
    const setDitto: (id: string, api: APIService) => Promise<{
        data: any;
        error: ErrorType;
    }>;
    const saveDittoName: (api: APIService, body: RequestBody<any>) => Promise<{
        data: any;
        error: ErrorType;
    }>;
    const whatsAppUpdate: (api: APIService, optingValue: boolean) => Promise<{
        data: any;
        error: ErrorType;
    }>;
    const getWhatsappOptingStatus: (api: APIService) => Promise<{
        data: any;
        error: ErrorType;
    }>;
    const forgotPassword: (api: APIService, body: RequestBody<any>) => Promise<{
        data: any;
        error: ErrorType;
    }>;
    const updateUserAddress: (api: APIService, body: RequestBody<any>, addressId?: string) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const abandonLeads: (api: APIService, body: RequestBody<any>) => Promise<{
        data: any;
        error: ErrorType;
    }>;
    const passUtmData: (api: APIService, body: RequestBody<any>) => Promise<{
        data: any;
        error: ErrorType;
    }>;
}
declare namespace pageFunctions {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    enum FilterViewTypes {
        CHECKBOX = "CHECKBOX",
        IMAGE_SELECTION = "IMAGE_SELECTION"
    }
    interface defaultCategoryParams {
        pageCount: number;
        pageSize: number;
    }
    interface CategoryParams {
        key: string;
        value: string[];
    }
    interface FilterOption {
        title: string;
        id: string;
        productsCount: number;
        imageUrl?: string;
        colorCode?: string;
        frontImageUrl?: string;
    }
    interface FilterItemType {
        name: string;
        id: string;
        type: FilterViewTypes;
        options: FilterOption[];
        canCollapse: boolean;
        showBorderTop: boolean;
        selectedOption: string[];
    }
    interface FilterType {
        categoryInfo: string;
        productCount: number;
        filters: FilterItemType[];
    }
    interface CategoryData extends ErrorType {
        breadcrumb: BreadCrumbType[];
        productCount: number;
        categoryOffer: string;
        categoryName: string;
        categoryType: string;
        subCategories: string;
        showCategoryImage: boolean;
        categoryImage: string;
        isDitto: boolean;
        ageGroup: string;
        seo: SEOType;
        categoryPowerUrl: [
        ];
        urlKey: string;
        urlPath: string;
        categorySubType: string;
        isPersonalization: boolean;
        parentHashtagList: string;
        description: string;
    }
    const getPageData: (redisIds: string[], api: APIService, subdirectoryPath?: string, defaultPrams?: defaultCategoryParams, params?: CategoryParams[], postcheckParams?: CategoryParams[], cmsApi?: APIService, deviceType?: string) => Promise<ResponseData | {
        pageData: null;
        data: {};
        error: ErrorType;
        pageType: PageTypes;
    }>;
    const getSearchData: (query: string, api: APIService, defaultPrams: defaultCategoryParams, subdirectoryPath?: string, params?: FilterData[], postcheckParams?: CategoryParams[], isAlgoliaSearch?: boolean, isSimilarProductId?: boolean) => Promise<ResponseData | {
        data: {};
        error: ErrorType;
        pageType: PageTypes;
        pageData?: undefined;
    } | {
        data: {
            pageType: string;
            data: {
                id: string;
                userData: {
                    id: any;
                    isLoggedIn: boolean;
                    customerMobile: any;
                    customerEmail: any;
                    cartIds: any;
                    itemsCount: any;
                    wishlist: any;
                };
                productListData: {};
                categoryData: {};
                productDetailData: {};
                cmsData: {};
                webUrl: any;
            };
            error: ErrorType | {
                isError: boolean;
                message: string;
            };
        };
        error: {
            isError: boolean;
            message: string;
        };
        pageType: PageTypes;
        pageData: {};
    }>;
}
declare namespace homeFunctions {
    const getHomePageData: (key: string, api: APIService, api2: APIService) => Promise<{
        data: {
            homePageData?: undefined;
            categoryCarouselsData?: undefined;
        };
        error: {
            isError: boolean;
            message: string;
        };
    } | {
        data: {
            homePageData: any;
            categoryCarouselsData: any;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace pdpFunctions {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    const getPinCode: (pid: number, pincode: number, country: string, api: APIService) => Promise<{
        data: {
            detailData?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            detailData: any;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    enum FilterViewTypes {
        CHECKBOX = "CHECKBOX",
        IMAGE_SELECTION = "IMAGE_SELECTION"
    }
    interface defaultCategoryParams {
        pageCount: number;
        pageSize: number;
    }
    interface CategoryParams {
        key: string;
        value: string[];
    }
    interface FilterOption {
        title: string;
        id: string;
        productsCount: number;
        imageUrl?: string;
        colorCode?: string;
        frontImageUrl?: string;
    }
    interface FilterItemType {
        name: string;
        id: string;
        type: FilterViewTypes;
        options: FilterOption[];
        canCollapse: boolean;
        showBorderTop: boolean;
        selectedOption: string[];
    }
    interface FilterType {
        categoryInfo: string;
        productCount: number;
        filters: FilterItemType[];
    }
    interface CategoryData extends ErrorType {
        breadcrumb: BreadCrumbType[];
        productCount: number;
        categoryOffer: string;
        categoryName: string;
        categoryType: string;
        subCategories: string;
        showCategoryImage: boolean;
        categoryImage: string;
        isDitto: boolean;
        ageGroup: string;
        seo: SEOType;
        categoryPowerUrl: [
        ];
        urlKey: string;
        urlPath: string;
        categorySubType: string;
        isPersonalization: boolean;
        parentHashtagList: string;
        description: string;
    }
    interface ReviewsType {
        count: number;
        reviews: ReviewItem[] | null;
        pageCount: number;
        pageSize: number;
        reviewGraph: {
            stars: number;
            percentage: number;
        }[];
    }
    interface ReviewItem {
        id: number;
        title: string;
        desc: string;
        userName: string;
        date: string;
        rating: number;
        images: string[];
    }
    enum CurrencySymbol {
        INR = "\u20B9",
        SGD = "$",
        AED = "AED",
        SAR = "SAR",
        USD = "$"
    }
    enum CurrencyType {
        INR = "INR",
        SGD = "SGD",
        AED = "AED",
        SAR = "SAR",
        USD = "USD"
    }
    interface PriceType {
        symbol: CurrencySymbol;
        currency: CurrencyType;
        basePrice: number;
        lkPrice: number;
        firstFrameFreePrice?: number;
        remainingExchangePrice?: number;
        itemExchangePrice?: number;
    }
    interface ProductDetailAPI {
        additionalOptions: {
            options: [
                {
                    label: string;
                    id: string;
                    selectedId: string;
                }
            ];
            optionsMapping: [
                {
                    color: string;
                    power: string;
                    productId: string;
                }
            ];
        };
        id: string;
        isTryNowAvailable: boolean;
        qty: number;
        isDittoEnabled: boolean;
        imageUrls: string[];
        url: string;
        type: string;
        sku: string;
        fullName: string;
        isHecButton: boolean;
        brandName: string;
        modelName: string;
        mobileOfferText: string;
        offerBanner: string;
        isTbyb: boolean;
        avgRating: number;
        totalNoOfRatings: string;
        numberOfReviews: string;
        seoTitle: string;
        seoMetaDescription: string;
        seoMetaKeywords: string;
        seoMetaCanonical: string;
        seoMetaAlternate: string;
        color: string;
        frameTypeKey: string;
        frameColour: string;
        frameDetails: FrameDetail[];
        prices: APIPriceDetail[];
        minLensPrice: number;
        male180: any[];
        female180: any[];
        prescriptionType: PrescriptionType[];
        colorOptions: ColorOptionDetailAPI[];
        relatedItems: any[];
        crossSells: any[];
        specifications: Specification[];
        thumbnailImage: string;
        image: string;
        deliveryOptions: DeliveryOption[];
        classification: string;
        classificationId: string;
        description: string;
        imageResolutions: string[];
        review: ResultReview;
        storeId: any[];
        brandLogo: string;
        imageUrlsDetail: ImageUrlsDetail[];
        subCategories: string;
        lastPurchaseInfo: string;
        frameWidth: string;
        suitedFor: string;
        clLegalreqDetails: string;
        offers: any[];
        breadcrumb: BreadcrumbAPI[];
        mostViewed: number;
        bogoEnabled: boolean;
        offer: any[];
        deliveryTimeShort: string;
        offerName: string;
        pdpContent: string;
        tierName: string;
        wishlistCount: number;
        purchaseCount: number;
        tags: string;
        noOfLensesInABox: number;
        buyFourPrice: number;
        jit: boolean;
        isPlano: boolean;
        merchantId: string;
        sellerLabel: string;
        cmsLinkAndroid: string;
        cmsLinkIos: string;
        arModelAndroidUrl: string;
        arModelIOSUrl: string;
        arModelMsiteAndDesktopUrl: string;
        arModelOriginalUrl: string;
        labels: Label[];
        pdpRichTemplateType: string;
        offerDetails: OfferDetails;
        imageUrlDetail: imageUrlDetailAPI[];
        clUsage: string;
        isDitto: boolean;
        isCygnusEnabled: boolean;
        isQuickCheckout: boolean;
    }
    interface APIPriceDetail {
        name: string;
        currencyCode: string;
        price: number;
        value: number;
    }
    interface ColorOptionDetailAPI {
        id: string;
        productUrl: string;
        imageUrls: string[];
        brand_name: string;
        model_name: string;
        prices: APIPriceDetail[];
        color: string;
        colorId: number;
        arModelAndroidUrl?: string;
        arModelIOSUrl?: string;
    }
    interface BreadcrumbAPI {
        label: string;
        link?: string;
    }
    interface imageUrlDetailAPI {
        label: string;
        url: string;
    }
    interface DeliveryOption {
        deliveryOption: string;
    }
    interface FrameDetail {
        name: string;
        value: string;
        name_en: string;
        value_en: string;
    }
    interface ImageUrlsDetail {
        url: string;
        label: string;
    }
    interface Label {
        label: string;
        value: string;
        design: string;
    }
    interface OfferDetails {
        offerImage: string;
        stickyOfferImage: string;
        headline1: string;
        headline3: string;
        colorCode: string;
        showTax: boolean;
        shimmer: boolean;
        icon: string;
        offerPrice: number;
    }
    interface PrescriptionType {
        id: string;
        title: string;
        isDefault: boolean;
        isPackageAvailable: boolean;
    }
    interface ResultReview {
        reviews: ReviewElement[];
        imageReviews: any[];
        review_graph: ReviewGraph[];
    }
    interface ReviewGraph {
        stars: number;
        percentage: number;
    }
    interface ReviewElement {
        reviewId: string;
        reviewTitle: string;
        reviewDetail: string;
        reviewee: string;
        noOfStars: string;
        reviewDate: string;
        email: string;
        reviewerType: ReviewerType;
        images: any[];
    }
    enum ReviewerType {
        AnonymousUser = "anonymous_user",
        VerifiedReviewer = "verified_reviewer"
    }
    interface Specification {
        name: string;
        items: Item[];
    }
    interface Item {
        name_en?: string;
        name: string;
        value: string;
        value_en?: string;
        urlDetails?: ImageUrlsDetail;
    }
    // import { PrescriptionType } from "./responses/productDetailAPI";
    interface ARModelType {
        android: string | null;
        ios: string | null;
    }
    interface imageHoverType {
        url: string;
        frontURL: string;
        hoverURL: string;
    }
    interface ColorOptionType {
        id: number;
        color: string;
        colorID: number;
        productURL: string;
        price: PriceType;
        arModel: ARModelType;
        productImage?: imageHoverType;
        glassColor: string | null;
        frameColorImage: string;
    }
    interface PrescriptionType$0 {
        id: string;
        title: string;
        isPackageAvailable: boolean;
        imageUrl: string;
        subText: string;
    }
    /**
     * TODO - Change Classification to ENUM
     */
    interface ProductTypeBasic {
        id: number;
        size: string;
        productName: string;
        showProductRating: boolean;
        productRating: number;
        showPurchaseCount: boolean;
        purchaseCount: number;
        showWishlistCount: boolean;
        wishListCount: number;
        tags: string;
        isDitto: boolean;
        isColorOptionExtra: boolean;
        colorOptionExtraCount: number;
        classification: string;
        productURL: string;
        productURLWithoutDomain: string;
        productImage?: imageHoverType;
        price: PriceType;
        colorOptions: ColorOptionType[];
        offerText: string;
        specifications: Specification[];
        productModelName: string;
        sku: string;
        totalNoOfRatings?: string;
        relatedItems: any;
        color: string;
    }
    interface ProductDetailType extends ProductTypeBasic {
        imageUrlDetail: imageUrlDetailAPI[];
        mobileImageUrl: mobileImageUrlAPI[];
        gridImages: GridImageType[];
        seo: SEOType;
        breadcrumb: BreadCrumbType[];
        generalProductInfo: ProductInfo[];
        technicalProductInfo: ProductInfo[];
        brandName: string;
        reviews: ReviewsType;
        type: string;
        richContent: string;
        prescriptionType: PrescriptionType$0[];
        isTryOnEnabled: boolean;
        addToCartButtons: AddToCartButtonType[] | null;
        frameType: string;
        productQuantity: number | null;
        thumbnail: string;
        jit: boolean;
        isPlano: boolean;
        isDitto: boolean;
        isQuickCheckout: boolean;
        fullName: string;
        frameDetails: FrameDetailsType[];
        sellerLabel: string;
        clLegalreqDetails: string;
        frontImage: string;
        cmsLinkAndroid: string;
        additionalOptions: {
            options: [
                {
                    label: string;
                    id: string;
                    selectedId: string;
                }
            ];
            optionsMapping: [
                {
                    color: string;
                    power: string;
                    productId: string;
                }
            ];
        };
        relatedItems: any[];
        offerDetails: OfferDetails;
        crossSells: {
            id: string;
            text: string;
        }[] | [
        ];
    }
    interface FrameDetailsType {
        name: string;
        name_en: string;
        value: string;
        value_en: string;
    }
    interface AddToCartButtonType {
        primaryText: string;
        secondaryText?: string;
        onlyLens: boolean;
        withPower: boolean;
    }
    enum PackageENUM {
        POWER = "power",
        PACKAGES = "packages",
        EYESIGHT = "eyeSight"
    }
    interface PackageVisibilityType {
        type: PackageENUM;
        selectedText: string;
        showSection: boolean;
        isActive: boolean;
    }
    interface GridImageType {
        id: number;
        imageUrl: string;
        mediumImageUrl: string;
    }
    interface imageUrlDetailAPI$0 {
        label: string;
        imageUrl: string;
    }
    interface mobileImageUrlAPI extends imageUrlDetailAPI$0 {
        alt: string;
        source: string;
    }
    interface ProductInfo {
        name: string;
        nameEn?: string;
        value: string | number;
        valueEn?: string | number;
        showAdditionalInfo: boolean;
        additionalInfoUrl: string | null;
    }
    interface prescriptionTypeCL {
        dob: string;
        gender: string;
        notes: string;
        userName: string;
        powerType: string;
        left?: {
            [name: string]: string;
        };
        right?: {
            [name: string]: string;
        };
    }
    interface cartDataTypeCL {
        productId: number;
        quantity: number;
        prescription: prescriptionTypeCL;
    }
    interface validationDataTypeCL {
        powerOptionList: {
            type: string;
            value: string;
            price: number;
        }[];
    }
    interface Specification$0 {
        name: string;
        items: Item[];
    }
    const getProductDetails: (pid: number, api: APIService, subdirectoryPath?: string, postcheckParams?: CategoryParams[]) => Promise<{
        data: {
            detailData?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            detailData: ProductDetailType;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const oosSubscription: (api: APIService, body: RequestBody<any>) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getReviews: (pid: number, pageSize: number, requestPage: string, api: APIService) => Promise<{
        data: {
            reviews?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            reviews: any;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const postReview: (pid: number, api: APIService, body: RequestBody<any>) => Promise<{
        data: {
            message?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            message: any;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const get360ViewStatus: (id: number) => Promise<{
        result: any;
        error: ErrorType;
    }>;
    const fetchPowers: (pid: number, api: APIService, powerType: string, consumer: boolean) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const validateCLPrescription: (body: RequestBody<cartDataTypeCL | validationDataTypeCL>, api: APIService, pid: number | null) => Promise<{
        data: {
            validPower?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            validPower: boolean;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace wishlistFunctions {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    const addToWishlist: (api: APIService, body: RequestBody<any>) => Promise<{
        data: {
            wishListData?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            wishListData: any;
        };
        error: ErrorType;
    }>;
    const deleteSingleWishlist: (api: APIService, params: {
        requestBody: {
            productId: number;
        };
    }) => Promise<{
        data: {
            wishListData?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            wishListData: any;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const deleteWishlist: (api: APIService) => Promise<{
        data: {
            wishListData?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            wishListData: any;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    interface ProductDetailAPI {
        additionalOptions: {
            options: [
                {
                    label: string;
                    id: string;
                    selectedId: string;
                }
            ];
            optionsMapping: [
                {
                    color: string;
                    power: string;
                    productId: string;
                }
            ];
        };
        id: string;
        isTryNowAvailable: boolean;
        qty: number;
        isDittoEnabled: boolean;
        imageUrls: string[];
        url: string;
        type: string;
        sku: string;
        fullName: string;
        isHecButton: boolean;
        brandName: string;
        modelName: string;
        mobileOfferText: string;
        offerBanner: string;
        isTbyb: boolean;
        avgRating: number;
        totalNoOfRatings: string;
        numberOfReviews: string;
        seoTitle: string;
        seoMetaDescription: string;
        seoMetaKeywords: string;
        seoMetaCanonical: string;
        seoMetaAlternate: string;
        color: string;
        frameTypeKey: string;
        frameColour: string;
        frameDetails: FrameDetail[];
        prices: APIPriceDetail[];
        minLensPrice: number;
        male180: any[];
        female180: any[];
        prescriptionType: PrescriptionType[];
        colorOptions: ColorOptionDetailAPI[];
        relatedItems: any[];
        crossSells: any[];
        specifications: Specification[];
        thumbnailImage: string;
        image: string;
        deliveryOptions: DeliveryOption[];
        classification: string;
        classificationId: string;
        description: string;
        imageResolutions: string[];
        review: ResultReview;
        storeId: any[];
        brandLogo: string;
        imageUrlsDetail: ImageUrlsDetail[];
        subCategories: string;
        lastPurchaseInfo: string;
        frameWidth: string;
        suitedFor: string;
        clLegalreqDetails: string;
        offers: any[];
        breadcrumb: BreadcrumbAPI[];
        mostViewed: number;
        bogoEnabled: boolean;
        offer: any[];
        deliveryTimeShort: string;
        offerName: string;
        pdpContent: string;
        tierName: string;
        wishlistCount: number;
        purchaseCount: number;
        tags: string;
        noOfLensesInABox: number;
        buyFourPrice: number;
        jit: boolean;
        isPlano: boolean;
        merchantId: string;
        sellerLabel: string;
        cmsLinkAndroid: string;
        cmsLinkIos: string;
        arModelAndroidUrl: string;
        arModelIOSUrl: string;
        arModelMsiteAndDesktopUrl: string;
        arModelOriginalUrl: string;
        labels: Label[];
        pdpRichTemplateType: string;
        offerDetails: OfferDetails;
        imageUrlDetail: imageUrlDetailAPI[];
        clUsage: string;
        isDitto: boolean;
        isCygnusEnabled: boolean;
        isQuickCheckout: boolean;
    }
    interface APIPriceDetail {
        name: string;
        currencyCode: string;
        price: number;
        value: number;
    }
    interface ColorOptionDetailAPI {
        id: string;
        productUrl: string;
        imageUrls: string[];
        brand_name: string;
        model_name: string;
        prices: APIPriceDetail[];
        color: string;
        colorId: number;
        arModelAndroidUrl?: string;
        arModelIOSUrl?: string;
    }
    interface BreadcrumbAPI {
        label: string;
        link?: string;
    }
    interface imageUrlDetailAPI {
        label: string;
        url: string;
    }
    interface DeliveryOption {
        deliveryOption: string;
    }
    interface FrameDetail {
        name: string;
        value: string;
        name_en: string;
        value_en: string;
    }
    interface ImageUrlsDetail {
        url: string;
        label: string;
    }
    interface Label {
        label: string;
        value: string;
        design: string;
    }
    interface OfferDetails {
        offerImage: string;
        stickyOfferImage: string;
        headline1: string;
        headline3: string;
        colorCode: string;
        showTax: boolean;
        shimmer: boolean;
        icon: string;
        offerPrice: number;
    }
    interface PrescriptionType {
        id: string;
        title: string;
        isDefault: boolean;
        isPackageAvailable: boolean;
    }
    interface ResultReview {
        reviews: ReviewElement[];
        imageReviews: any[];
        review_graph: ReviewGraph[];
    }
    interface ReviewGraph {
        stars: number;
        percentage: number;
    }
    interface ReviewElement {
        reviewId: string;
        reviewTitle: string;
        reviewDetail: string;
        reviewee: string;
        noOfStars: string;
        reviewDate: string;
        email: string;
        reviewerType: ReviewerType;
        images: any[];
    }
    enum ReviewerType {
        AnonymousUser = "anonymous_user",
        VerifiedReviewer = "verified_reviewer"
    }
    interface Specification {
        name: string;
        items: Item[];
    }
    interface Item {
        name_en?: string;
        name: string;
        value: string;
        value_en?: string;
        urlDetails?: ImageUrlsDetail;
    }
    interface ProductListObject {
        id: string;
        brandName: string;
        prices: Array<APIPriceDetail>;
        frameType: string;
        productName: string;
        productImageUrl: string;
        inStock: boolean;
        productUrl: string;
    }
    interface WishListDataObject {
        productList: Array<ProductListObject>;
        productIds: string[];
    }
    const formattedWishListData: (data: WishListDataObject, subdirectoryPath: string) => WishListDataObject;
    const getWishlist: (api: APIService, subdirectoryPath: string) => Promise<{
        data: {
            wishListData?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            wishListData: WishListDataObject;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace categoryFunctions {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    enum FilterViewTypes {
        CHECKBOX = "CHECKBOX",
        IMAGE_SELECTION = "IMAGE_SELECTION"
    }
    interface defaultCategoryParams {
        pageCount: number;
        pageSize: number;
    }
    interface CategoryParams {
        key: string;
        value: string[];
    }
    interface FilterOption {
        title: string;
        id: string;
        productsCount: number;
        imageUrl?: string;
        colorCode?: string;
        frontImageUrl?: string;
    }
    interface FilterItemType {
        name: string;
        id: string;
        type: FilterViewTypes;
        options: FilterOption[];
        canCollapse: boolean;
        showBorderTop: boolean;
        selectedOption: string[];
    }
    interface FilterType {
        categoryInfo: string;
        productCount: number;
        filters: FilterItemType[];
    }
    interface CategoryData extends ErrorType {
        breadcrumb: BreadCrumbType[];
        productCount: number;
        categoryOffer: string;
        categoryName: string;
        categoryType: string;
        subCategories: string;
        showCategoryImage: boolean;
        categoryImage: string;
        isDitto: boolean;
        ageGroup: string;
        seo: SEOType;
        categoryPowerUrl: [
        ];
        urlKey: string;
        urlPath: string;
        categorySubType: string;
        isPersonalization: boolean;
        parentHashtagList: string;
        description: string;
    }
    interface ReviewsType {
        count: number;
        reviews: ReviewItem[] | null;
        pageCount: number;
        pageSize: number;
        reviewGraph: {
            stars: number;
            percentage: number;
        }[];
    }
    interface ReviewItem {
        id: number;
        title: string;
        desc: string;
        userName: string;
        date: string;
        rating: number;
        images: string[];
    }
    enum CurrencySymbol {
        INR = "\u20B9",
        SGD = "$",
        AED = "AED",
        SAR = "SAR",
        USD = "$"
    }
    enum CurrencyType {
        INR = "INR",
        SGD = "SGD",
        AED = "AED",
        SAR = "SAR",
        USD = "USD"
    }
    interface PriceType {
        symbol: CurrencySymbol;
        currency: CurrencyType;
        basePrice: number;
        lkPrice: number;
        firstFrameFreePrice?: number;
        remainingExchangePrice?: number;
        itemExchangePrice?: number;
    }
    interface ProductDetailAPI {
        additionalOptions: {
            options: [
                {
                    label: string;
                    id: string;
                    selectedId: string;
                }
            ];
            optionsMapping: [
                {
                    color: string;
                    power: string;
                    productId: string;
                }
            ];
        };
        id: string;
        isTryNowAvailable: boolean;
        qty: number;
        isDittoEnabled: boolean;
        imageUrls: string[];
        url: string;
        type: string;
        sku: string;
        fullName: string;
        isHecButton: boolean;
        brandName: string;
        modelName: string;
        mobileOfferText: string;
        offerBanner: string;
        isTbyb: boolean;
        avgRating: number;
        totalNoOfRatings: string;
        numberOfReviews: string;
        seoTitle: string;
        seoMetaDescription: string;
        seoMetaKeywords: string;
        seoMetaCanonical: string;
        seoMetaAlternate: string;
        color: string;
        frameTypeKey: string;
        frameColour: string;
        frameDetails: FrameDetail[];
        prices: APIPriceDetail[];
        minLensPrice: number;
        male180: any[];
        female180: any[];
        prescriptionType: PrescriptionType[];
        colorOptions: ColorOptionDetailAPI[];
        relatedItems: any[];
        crossSells: any[];
        specifications: Specification[];
        thumbnailImage: string;
        image: string;
        deliveryOptions: DeliveryOption[];
        classification: string;
        classificationId: string;
        description: string;
        imageResolutions: string[];
        review: ResultReview;
        storeId: any[];
        brandLogo: string;
        imageUrlsDetail: ImageUrlsDetail[];
        subCategories: string;
        lastPurchaseInfo: string;
        frameWidth: string;
        suitedFor: string;
        clLegalreqDetails: string;
        offers: any[];
        breadcrumb: BreadcrumbAPI[];
        mostViewed: number;
        bogoEnabled: boolean;
        offer: any[];
        deliveryTimeShort: string;
        offerName: string;
        pdpContent: string;
        tierName: string;
        wishlistCount: number;
        purchaseCount: number;
        tags: string;
        noOfLensesInABox: number;
        buyFourPrice: number;
        jit: boolean;
        isPlano: boolean;
        merchantId: string;
        sellerLabel: string;
        cmsLinkAndroid: string;
        cmsLinkIos: string;
        arModelAndroidUrl: string;
        arModelIOSUrl: string;
        arModelMsiteAndDesktopUrl: string;
        arModelOriginalUrl: string;
        labels: Label[];
        pdpRichTemplateType: string;
        offerDetails: OfferDetails;
        imageUrlDetail: imageUrlDetailAPI[];
        clUsage: string;
        isDitto: boolean;
        isCygnusEnabled: boolean;
        isQuickCheckout: boolean;
    }
    interface APIPriceDetail {
        name: string;
        currencyCode: string;
        price: number;
        value: number;
    }
    interface ColorOptionDetailAPI {
        id: string;
        productUrl: string;
        imageUrls: string[];
        brand_name: string;
        model_name: string;
        prices: APIPriceDetail[];
        color: string;
        colorId: number;
        arModelAndroidUrl?: string;
        arModelIOSUrl?: string;
    }
    interface BreadcrumbAPI {
        label: string;
        link?: string;
    }
    interface imageUrlDetailAPI {
        label: string;
        url: string;
    }
    interface DeliveryOption {
        deliveryOption: string;
    }
    interface FrameDetail {
        name: string;
        value: string;
        name_en: string;
        value_en: string;
    }
    interface ImageUrlsDetail {
        url: string;
        label: string;
    }
    interface Label {
        label: string;
        value: string;
        design: string;
    }
    interface OfferDetails {
        offerImage: string;
        stickyOfferImage: string;
        headline1: string;
        headline3: string;
        colorCode: string;
        showTax: boolean;
        shimmer: boolean;
        icon: string;
        offerPrice: number;
    }
    interface PrescriptionType {
        id: string;
        title: string;
        isDefault: boolean;
        isPackageAvailable: boolean;
    }
    interface ResultReview {
        reviews: ReviewElement[];
        imageReviews: any[];
        review_graph: ReviewGraph[];
    }
    interface ReviewGraph {
        stars: number;
        percentage: number;
    }
    interface ReviewElement {
        reviewId: string;
        reviewTitle: string;
        reviewDetail: string;
        reviewee: string;
        noOfStars: string;
        reviewDate: string;
        email: string;
        reviewerType: ReviewerType;
        images: any[];
    }
    enum ReviewerType {
        AnonymousUser = "anonymous_user",
        VerifiedReviewer = "verified_reviewer"
    }
    interface Specification {
        name: string;
        items: Item[];
    }
    interface Item {
        name_en?: string;
        name: string;
        value: string;
        value_en?: string;
        urlDetails?: ImageUrlsDetail;
    }
    // import { PrescriptionType } from "./responses/productDetailAPI";
    interface ARModelType {
        android: string | null;
        ios: string | null;
    }
    interface imageHoverType {
        url: string;
        frontURL: string;
        hoverURL: string;
    }
    interface ColorOptionType {
        id: number;
        color: string;
        colorID: number;
        productURL: string;
        price: PriceType;
        arModel: ARModelType;
        productImage?: imageHoverType;
        glassColor: string | null;
        frameColorImage: string;
    }
    interface PrescriptionType$0 {
        id: string;
        title: string;
        isPackageAvailable: boolean;
        imageUrl: string;
        subText: string;
    }
    /**
     * TODO - Change Classification to ENUM
     */
    interface ProductTypeBasic {
        id: number;
        size: string;
        productName: string;
        showProductRating: boolean;
        productRating: number;
        showPurchaseCount: boolean;
        purchaseCount: number;
        showWishlistCount: boolean;
        wishListCount: number;
        tags: string;
        isDitto: boolean;
        isColorOptionExtra: boolean;
        colorOptionExtraCount: number;
        classification: string;
        productURL: string;
        productURLWithoutDomain: string;
        productImage?: imageHoverType;
        price: PriceType;
        colorOptions: ColorOptionType[];
        offerText: string;
        specifications: Specification$0[];
        productModelName: string;
        sku: string;
        totalNoOfRatings?: string;
        relatedItems: any;
        color: string;
    }
    interface ProductDetailType extends ProductTypeBasic {
        imageUrlDetail: imageUrlDetailAPI$0[];
        mobileImageUrl: mobileImageUrlAPI[];
        gridImages: GridImageType[];
        seo: SEOType;
        breadcrumb: BreadCrumbType[];
        generalProductInfo: ProductInfo[];
        technicalProductInfo: ProductInfo[];
        brandName: string;
        reviews: ReviewsType;
        type: string;
        richContent: string;
        prescriptionType: PrescriptionType$0[];
        isTryOnEnabled: boolean;
        addToCartButtons: AddToCartButtonType[] | null;
        frameType: string;
        productQuantity: number | null;
        thumbnail: string;
        jit: boolean;
        isPlano: boolean;
        isDitto: boolean;
        isQuickCheckout: boolean;
        fullName: string;
        frameDetails: FrameDetailsType[];
        sellerLabel: string;
        clLegalreqDetails: string;
        frontImage: string;
        cmsLinkAndroid: string;
        additionalOptions: {
            options: [
                {
                    label: string;
                    id: string;
                    selectedId: string;
                }
            ];
            optionsMapping: [
                {
                    color: string;
                    power: string;
                    productId: string;
                }
            ];
        };
        relatedItems: any[];
        offerDetails: OfferDetails;
        crossSells: {
            id: string;
            text: string;
        }[] | [
        ];
    }
    interface FrameDetailsType {
        name: string;
        name_en: string;
        value: string;
        value_en: string;
    }
    interface AddToCartButtonType {
        primaryText: string;
        secondaryText?: string;
        onlyLens: boolean;
        withPower: boolean;
    }
    enum PackageENUM {
        POWER = "power",
        PACKAGES = "packages",
        EYESIGHT = "eyeSight"
    }
    interface PackageVisibilityType {
        type: PackageENUM;
        selectedText: string;
        showSection: boolean;
        isActive: boolean;
    }
    interface GridImageType {
        id: number;
        imageUrl: string;
        mediumImageUrl: string;
    }
    interface imageUrlDetailAPI$0 {
        label: string;
        imageUrl: string;
    }
    interface mobileImageUrlAPI extends imageUrlDetailAPI$0 {
        alt: string;
        source: string;
    }
    interface ProductInfo {
        name: string;
        nameEn?: string;
        value: string | number;
        valueEn?: string | number;
        showAdditionalInfo: boolean;
        additionalInfoUrl: string | null;
    }
    interface prescriptionTypeCL {
        dob: string;
        gender: string;
        notes: string;
        userName: string;
        powerType: string;
        left?: {
            [name: string]: string;
        };
        right?: {
            [name: string]: string;
        };
    }
    interface cartDataTypeCL {
        productId: number;
        quantity: number;
        prescription: prescriptionTypeCL;
    }
    interface validationDataTypeCL {
        powerOptionList: {
            type: string;
            value: string;
            price: number;
        }[];
    }
    interface Specification$0 {
        name: string;
        items: Item[];
    }
    const getCategoryData: (id: number, api: APIService, subdirectoryPath?: string, defaultParams?: defaultCategoryParams, params?: CategoryParams[]) => Promise<{
        data: {
            categoryData?: undefined;
            productListData?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            categoryData: CategoryData;
            productListData: ProductTypeBasic[];
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getFilterData: (id: number | string, api: APIService, isSearch: boolean, filterParams?: any, isAlgoliaSearch?: boolean, isSimilarProductId?: boolean) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: {
            categoryInfo: string;
            productCount: number;
            filters: FilterItemType[];
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getFiltersData: (id: number | string, defaultFilters: defaultCategoryParams, otherFilters: FilterData[], api: APIService, isSearch: boolean, subdirectoryPath?: string, isAlgoliaSearch?: boolean, isSimilarProductId?: boolean) => Promise<{
        data: {
            categoryData?: undefined;
            productListData?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            categoryData: CategoryData;
            productListData: ProductTypeBasic[];
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getQueryFilter: (api: APIService, query: string) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: {
            categoryInfo: string;
            productCount: number;
            filters: FilterItemType[];
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getQuerySelectedFilterData: (query: string, pageSize: number, pageNumber: number, api: APIService, subdirectoryPath?: string, otherFilters?: FilterData[], isAlgoliaSearch?: boolean, isSimilarProductId?: boolean) => Promise<{
        formatData: {
            categoryData: {};
            productData: {};
        };
        error: ErrorType;
        webUrl: string;
    } | {
        formatData: {
            categoryData: CategoryData;
            productData: ProductTypeBasic[];
        };
        error: {
            isError: boolean;
            message: string;
        };
        webUrl: any;
    }>;
    const getCategoryCarouselData: (api: APIService, catIds: string) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace cartFunctions {
    interface ReviewsType {
        count: number;
        reviews: ReviewItem[] | null;
        pageCount: number;
        pageSize: number;
        reviewGraph: {
            stars: number;
            percentage: number;
        }[];
    }
    interface ReviewItem {
        id: number;
        title: string;
        desc: string;
        userName: string;
        date: string;
        rating: number;
        images: string[];
    }
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    enum CurrencySymbol {
        INR = "\u20B9",
        SGD = "$",
        AED = "AED",
        SAR = "SAR",
        USD = "$"
    }
    enum CurrencyType {
        INR = "INR",
        SGD = "SGD",
        AED = "AED",
        SAR = "SAR",
        USD = "USD"
    }
    interface PriceType {
        symbol: CurrencySymbol;
        currency: CurrencyType;
        basePrice: number;
        lkPrice: number;
        firstFrameFreePrice?: number;
        remainingExchangePrice?: number;
        itemExchangePrice?: number;
    }
    interface ProductDetailAPI {
        additionalOptions: {
            options: [
                {
                    label: string;
                    id: string;
                    selectedId: string;
                }
            ];
            optionsMapping: [
                {
                    color: string;
                    power: string;
                    productId: string;
                }
            ];
        };
        id: string;
        isTryNowAvailable: boolean;
        qty: number;
        isDittoEnabled: boolean;
        imageUrls: string[];
        url: string;
        type: string;
        sku: string;
        fullName: string;
        isHecButton: boolean;
        brandName: string;
        modelName: string;
        mobileOfferText: string;
        offerBanner: string;
        isTbyb: boolean;
        avgRating: number;
        totalNoOfRatings: string;
        numberOfReviews: string;
        seoTitle: string;
        seoMetaDescription: string;
        seoMetaKeywords: string;
        seoMetaCanonical: string;
        seoMetaAlternate: string;
        color: string;
        frameTypeKey: string;
        frameColour: string;
        frameDetails: FrameDetail[];
        prices: APIPriceDetail[];
        minLensPrice: number;
        male180: any[];
        female180: any[];
        prescriptionType: PrescriptionType[];
        colorOptions: ColorOptionDetailAPI[];
        relatedItems: any[];
        crossSells: any[];
        specifications: Specification[];
        thumbnailImage: string;
        image: string;
        deliveryOptions: DeliveryOption[];
        classification: string;
        classificationId: string;
        description: string;
        imageResolutions: string[];
        review: ResultReview;
        storeId: any[];
        brandLogo: string;
        imageUrlsDetail: ImageUrlsDetail[];
        subCategories: string;
        lastPurchaseInfo: string;
        frameWidth: string;
        suitedFor: string;
        clLegalreqDetails: string;
        offers: any[];
        breadcrumb: BreadcrumbAPI[];
        mostViewed: number;
        bogoEnabled: boolean;
        offer: any[];
        deliveryTimeShort: string;
        offerName: string;
        pdpContent: string;
        tierName: string;
        wishlistCount: number;
        purchaseCount: number;
        tags: string;
        noOfLensesInABox: number;
        buyFourPrice: number;
        jit: boolean;
        isPlano: boolean;
        merchantId: string;
        sellerLabel: string;
        cmsLinkAndroid: string;
        cmsLinkIos: string;
        arModelAndroidUrl: string;
        arModelIOSUrl: string;
        arModelMsiteAndDesktopUrl: string;
        arModelOriginalUrl: string;
        labels: Label[];
        pdpRichTemplateType: string;
        offerDetails: OfferDetails;
        imageUrlDetail: imageUrlDetailAPI[];
        clUsage: string;
        isDitto: boolean;
        isCygnusEnabled: boolean;
        isQuickCheckout: boolean;
    }
    interface APIPriceDetail {
        name: string;
        currencyCode: string;
        price: number;
        value: number;
    }
    interface ColorOptionDetailAPI {
        id: string;
        productUrl: string;
        imageUrls: string[];
        brand_name: string;
        model_name: string;
        prices: APIPriceDetail[];
        color: string;
        colorId: number;
        arModelAndroidUrl?: string;
        arModelIOSUrl?: string;
    }
    interface BreadcrumbAPI {
        label: string;
        link?: string;
    }
    interface imageUrlDetailAPI {
        label: string;
        url: string;
    }
    interface DeliveryOption {
        deliveryOption: string;
    }
    interface FrameDetail {
        name: string;
        value: string;
        name_en: string;
        value_en: string;
    }
    interface ImageUrlsDetail {
        url: string;
        label: string;
    }
    interface Label {
        label: string;
        value: string;
        design: string;
    }
    interface OfferDetails {
        offerImage: string;
        stickyOfferImage: string;
        headline1: string;
        headline3: string;
        colorCode: string;
        showTax: boolean;
        shimmer: boolean;
        icon: string;
        offerPrice: number;
    }
    interface PrescriptionType {
        id: string;
        title: string;
        isDefault: boolean;
        isPackageAvailable: boolean;
    }
    interface ResultReview {
        reviews: ReviewElement[];
        imageReviews: any[];
        review_graph: ReviewGraph[];
    }
    interface ReviewGraph {
        stars: number;
        percentage: number;
    }
    interface ReviewElement {
        reviewId: string;
        reviewTitle: string;
        reviewDetail: string;
        reviewee: string;
        noOfStars: string;
        reviewDate: string;
        email: string;
        reviewerType: ReviewerType;
        images: any[];
    }
    enum ReviewerType {
        AnonymousUser = "anonymous_user",
        VerifiedReviewer = "verified_reviewer"
    }
    interface Specification {
        name: string;
        items: Item[];
    }
    interface Item {
        name_en?: string;
        name: string;
        value: string;
        value_en?: string;
        urlDetails?: ImageUrlsDetail;
    }
    // import { PrescriptionType } from "./responses/productDetailAPI";
    interface ARModelType {
        android: string | null;
        ios: string | null;
    }
    interface imageHoverType {
        url: string;
        frontURL: string;
        hoverURL: string;
    }
    interface ColorOptionType {
        id: number;
        color: string;
        colorID: number;
        productURL: string;
        price: PriceType;
        arModel: ARModelType;
        productImage?: imageHoverType;
        glassColor: string | null;
        frameColorImage: string;
    }
    interface PrescriptionType$0 {
        id: string;
        title: string;
        isPackageAvailable: boolean;
        imageUrl: string;
        subText: string;
    }
    /**
     * TODO - Change Classification to ENUM
     */
    interface ProductTypeBasic {
        id: number;
        size: string;
        productName: string;
        showProductRating: boolean;
        productRating: number;
        showPurchaseCount: boolean;
        purchaseCount: number;
        showWishlistCount: boolean;
        wishListCount: number;
        tags: string;
        isDitto: boolean;
        isColorOptionExtra: boolean;
        colorOptionExtraCount: number;
        classification: string;
        productURL: string;
        productURLWithoutDomain: string;
        productImage?: imageHoverType;
        price: PriceType;
        colorOptions: ColorOptionType[];
        offerText: string;
        specifications: Specification$0[];
        productModelName: string;
        sku: string;
        totalNoOfRatings?: string;
        relatedItems: any;
        color: string;
    }
    interface ProductDetailType extends ProductTypeBasic {
        imageUrlDetail: imageUrlDetailAPI$0[];
        mobileImageUrl: mobileImageUrlAPI[];
        gridImages: GridImageType[];
        seo: SEOType;
        breadcrumb: BreadCrumbType[];
        generalProductInfo: ProductInfo[];
        technicalProductInfo: ProductInfo[];
        brandName: string;
        reviews: ReviewsType;
        type: string;
        richContent: string;
        prescriptionType: PrescriptionType$0[];
        isTryOnEnabled: boolean;
        addToCartButtons: AddToCartButtonType[] | null;
        frameType: string;
        productQuantity: number | null;
        thumbnail: string;
        jit: boolean;
        isPlano: boolean;
        isDitto: boolean;
        isQuickCheckout: boolean;
        fullName: string;
        frameDetails: FrameDetailsType[];
        sellerLabel: string;
        clLegalreqDetails: string;
        frontImage: string;
        cmsLinkAndroid: string;
        additionalOptions: {
            options: [
                {
                    label: string;
                    id: string;
                    selectedId: string;
                }
            ];
            optionsMapping: [
                {
                    color: string;
                    power: string;
                    productId: string;
                }
            ];
        };
        relatedItems: any[];
        offerDetails: OfferDetails;
        crossSells: {
            id: string;
            text: string;
        }[] | [
        ];
    }
    interface FrameDetailsType {
        name: string;
        name_en: string;
        value: string;
        value_en: string;
    }
    interface AddToCartButtonType {
        primaryText: string;
        secondaryText?: string;
        onlyLens: boolean;
        withPower: boolean;
    }
    enum PackageENUM {
        POWER = "power",
        PACKAGES = "packages",
        EYESIGHT = "eyeSight"
    }
    interface PackageVisibilityType {
        type: PackageENUM;
        selectedText: string;
        showSection: boolean;
        isActive: boolean;
    }
    interface GridImageType {
        id: number;
        imageUrl: string;
        mediumImageUrl: string;
    }
    interface imageUrlDetailAPI$0 {
        label: string;
        imageUrl: string;
    }
    interface mobileImageUrlAPI extends imageUrlDetailAPI$0 {
        alt: string;
        source: string;
    }
    interface ProductInfo {
        name: string;
        nameEn?: string;
        value: string | number;
        valueEn?: string | number;
        showAdditionalInfo: boolean;
        additionalInfoUrl: string | null;
    }
    interface prescriptionTypeCL {
        dob: string;
        gender: string;
        notes: string;
        userName: string;
        powerType: string;
        left?: {
            [name: string]: string;
        };
        right?: {
            [name: string]: string;
        };
    }
    interface cartDataTypeCL {
        productId: number;
        quantity: number;
        prescription: prescriptionTypeCL;
    }
    interface validationDataTypeCL {
        powerOptionList: {
            type: string;
            value: string;
            price: number;
        }[];
    }
    interface Specification$0 {
        name: string;
        items: Item[];
    }
    interface CartItemAPIResponse {
        id: number;
        productId: number;
        productType?: string;
        relatedItems: any[];
        sku: string;
        quantity: number;
        availableQuantity: number;
        options: Option[];
        price: APIPriceDetail;
        framePrice: FramePriceClass;
        freeFrame: boolean;
        gender: string;
        productTypeValue: string;
        amount: Amount;
        appliedRules: number[];
        coupons: any[];
        inventory: Inventory;
        brandName: string;
        isBogoItem: boolean;
        name: string;
        modelName: string;
        productUrl: string;
        thumbnail: string;
        image: string;
        classificationId: string;
        createdAt: number;
        updatedAt: number;
        catalogPrices: APIPriceDetail[];
        prescription: Prescription;
        powerRequired: string;
        classification: string;
        frameType?: string;
        productEligibleForExpressDelivery: boolean;
        lensType: string;
        lensCategory?: string;
        frameShape?: string;
        frameSize?: string;
        frameWidth?: string;
        subcategory?: string;
        cartItemRequest: CartItemRequest;
        productDeliveryType: string;
        isSubscriptionItemFromScheduler: string;
        frameSizeSpecification?: string;
        frameColour?: string;
        merchantId: string;
        sellerLabel: string;
        jit: boolean;
        offerDetail?: DataType | string;
        comboSwitcherProducts: any[];
        message?: string;
        taxPercentage?: number;
        marketPrice: APIPriceDetail;
        goldDiscount: number;
        bogoDiscount: number;
        prescriptionView: PrescriptionView;
        hubCode: string;
        hsnCode: string;
        activeInventories?: ActiveInventory[];
        isExpressDelivery: boolean;
        tierMembershipName?: string;
        label?: string;
        knowMoreText?: string;
        tierMembershipDuration?: number;
        extraDetails?: ExtraDetails;
        contactDisposableType?: string;
        offerDiscount?: number;
        discountedPrice?: APIPriceDetail;
        isFree?: boolean;
        webHeadline?: string;
        webColorCode?: string;
    }
    interface ActiveInventory {
        productId: number;
        storeId: string;
        facilityCode: string;
        quantity: number;
        priority: number;
    }
    interface Amount {
        currencyCode: string;
        discounts: Discount[];
        totalDiscount: number;
        taxes: Tax[];
        totalTax: number;
        shipping: number;
        subTotal: number;
        total: number;
    }
    interface Discount {
        code: string;
        type: string;
        amount: number;
    }
    interface Tax {
        name: string;
        amount: number;
    }
    interface CartItemRequest {
        productId: number;
        relatedProductIds: any[];
        packageId?: string;
        powerType?: string;
        isSubscriptionItemFromScheduler: string;
        subscriptionDiscount: number;
        relatedItems: any[];
        comboSwitcherProducts: any[];
        quantity?: number;
        prescription?: Prescription;
        hubCode?: string;
        addOns?: string;
    }
    interface Prescription {
        powerType?: string;
        left?: PrescriptionLeft;
        right?: PrescriptionLeft;
        notes?: string;
        gender?: string;
        dob?: string;
        showPd?: boolean;
    }
    interface PrescriptionLeft {
        sph: string;
        boxes: number;
        powerwiseId: string;
    }
    interface ExtraDetails {
        tierName: string;
        detailsUrl: string;
        images: Images;
        detailsButtonText: string;
        upgradableTiers: UpgradableTier[];
        tierLabel: string;
    }
    interface Images {
        knowMore: string;
        banner: string;
        labelImage?: string;
    }
    interface UpgradableTier {
        duration: number;
        name: string;
        price: FramePriceClass;
        description: string;
        productId: number;
        currentTier: boolean;
    }
    interface FramePriceClass {
        currencyCode: string;
        value: number;
    }
    interface Inventory {
        deliveryStoreId: number;
    }
    interface Option {
        type: string;
        name: string;
        label: string;
        catalogPrices: APIPriceDetail[];
        id: number;
        oid: string;
        sku?: string;
        group: string;
    }
    interface PrescriptionView {
        showPd: boolean;
        pdConfigAvailable: boolean;
        powerType?: string;
        left?: PrescriptionViewLeft;
        right?: PrescriptionViewLeft;
        notes?: string;
        gender?: string;
        dob?: string;
        labels?: DataType;
    }
    interface PrescriptionViewLeft {
        sph: string;
        boxes: number;
    }
    interface CartTotalAPIType {
        id: string;
        label: string;
        value: number;
        type: string;
        message?: string;
    }
    interface CartPayableAPIResponse {
        currencyCode: string;
        discounts: Discount[];
        totalDiscount: number;
        taxes: Tax[];
        totalTax: number;
        shipping: number;
        subTotal: number;
        total: number;
    }
    interface Discount {
        code: string;
        type: string;
        amount: number;
    }
    interface Tax {
        name: string;
        amount: number;
    }
    interface Wallet {
        applicableAmount: number;
        balance: number;
        message: string;
        type: string;
    }
    interface CartItemType {
        id: number;
        itemId: number;
        itemUrl: string;
        itemImg: string;
        itemModel: string;
        itemClassification: string;
        itemQty: number;
        itemPowerRequired: string;
        itemPrescriptionView: CartPrescriptionType;
        itemFrameType: string;
        itemLensType: string;
        itemLensCategory: string;
        itemContactDisposableType: string;
        showRibbon: boolean;
        ribbonMessage: string;
        showOfferMessage: boolean;
        offerMessage: string;
        itemPriceObj: CartItemPriceType;
        addOnPriceObj: CartItemPriceType | null;
        itemBrandName: string;
        itemFrameColor: string;
        itemOptions: any;
        itemSku: string;
        itemCatalogPrice: any;
        itemTotalPrice: number | string;
        itemPrescription: Prescription;
        itemFrameSize: string;
        tierMembershipName?: string;
        // labelImage: string,
        isLoyalty: boolean;
        loyaltyImage: string;
        isFree: boolean;
        itemLabel?: string;
        itemName: string;
        itemDiscountedPrice?: APIPriceDetail;
        price: APIPriceDetail;
        extraDetails?: ExtraDetails;
        webHeadline?: string;
        webColorCode?: string;
        itemType: string;
    }
    interface CartItemPriceType {
        showStrikeOffPrice: boolean;
        strikeOffPrice: number;
        itemPrice: number;
        itemName: string;
    }
    interface CartPrescriptionType {
        showPd: boolean;
        pdConfigAvailable: boolean;
        powerType?: string;
        left?: PrescriptionViewType;
        right?: PrescriptionViewType;
        notes?: string;
        gender?: string;
        dob?: string;
        labels?: DataType;
    }
    interface PrescriptionViewType {
        sph: string;
        boxes: number;
    }
    interface CartTotalType {
        id?: string;
        label: string;
        amount: number;
        type: CartAmountType;
        addDashedLine?: boolean;
    }
    enum CartAmountType {
        POSITIVE = "positive",
        NEGATIVE = "negative",
        FREE = "free",
        TOTAL = "total",
        SUBTOTAL = "subtotal",
        TOTALBTAX = "beforeTaxTotal"
    }
    const addToCartNoPower: (api: APIService, body: RequestBody<any>) => Promise<{
        data: {
            cartItems: CartItemType[];
            cartCount: any;
            cartQty: any;
            cartTotal: CartTotalType[];
            cartSubTotal: any;
            applicableGvs: any;
            currencyCode: any;
            offerDetails: any;
            appliedGv: any;
            appliedSc: any;
            lkCash: {
                applicableAmount: number;
                isApplicable: number | boolean;
                moneySaved: number;
                totalWalletAmount: number;
            };
            lkCashPlus: {
                applicableAmount: number;
                isApplicable: number | boolean;
                moneySaved: number;
                totalWalletAmount: number;
            };
            taxMessage: any;
            offerBanner: any;
            hasBogoLimitExceeded: boolean;
            bogoNotAppliedMessage: any;
            hasOnlyCLProduct: boolean;
            payLaterAllowed: any;
            cartId: any;
            studioFlow: any;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const addToCartCLWithValidate: (api: APIService, body: RequestBody<cartDataTypeCL>, validationBody: RequestBody<cartDataTypeCL | validationDataTypeCL>, pid: number | null) => Promise<{
        data: {};
        error: ErrorType | {
            isError: boolean;
            message: string;
        };
    } | {
        data: {
            cartItems: CartItemType[];
            cartCount: any;
            cartQty: any;
            cartTotal: CartTotalType[];
            cartSubTotal: any;
            applicableGvs: any;
            currencyCode: any;
            offerDetails: any;
            appliedGv: any;
            appliedSc: any;
            lkCash: {
                applicableAmount: number;
                isApplicable: number | boolean;
                moneySaved: number;
                totalWalletAmount: number;
            };
            lkCashPlus: {
                applicableAmount: number;
                isApplicable: number | boolean;
                moneySaved: number;
                totalWalletAmount: number;
            };
            taxMessage: any;
            offerBanner: any;
            hasBogoLimitExceeded: boolean;
            bogoNotAppliedMessage: any;
            hasOnlyCLProduct: boolean;
            payLaterAllowed: any;
            cartId: any;
            studioFlow: any;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const postAddToCart: (api: APIService) => Promise<{
        data: {
            cartItems?: undefined;
            cartCount?: undefined;
            cartQty?: undefined;
            cartTotal?: undefined;
            applicableGvs?: undefined;
            currencyCode?: undefined;
            appliedGv?: undefined;
            lkCash?: undefined;
            lkCashPlus?: undefined;
            studioFlow?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            cartItems: any;
            cartCount: any;
            cartQty: any;
            cartTotal: any;
            applicableGvs: any;
            currencyCode: any;
            appliedGv: any;
            lkCash: {
                applicableAmount: number;
                isApplicable: number | boolean;
                moneySaved: number;
                totalWalletAmount: number;
            };
            lkCashPlus: {
                applicableAmount: number;
                isApplicable: number | boolean;
                moneySaved: number;
                totalWalletAmount: number;
            };
            studioFlow: any;
        };
        error: {
            isError: false;
            message: string;
        };
    }>;
    const applyGV: (api: APIService, params: {
        requestBody: {
            code: string;
        };
    }) => Promise<{
        data: {
            cartItems?: undefined;
            cartCount?: undefined;
            cartQty?: undefined;
            cartTotal?: undefined;
            cartSubTotal?: undefined;
            applicableGvs?: undefined;
            currencyCode?: undefined;
            offerDetails?: undefined;
            appliedGv?: undefined;
            appliedSc?: undefined;
            lkCash?: undefined;
            lkCashPlus?: undefined;
            taxMessage?: undefined;
            offerBanner?: undefined;
            hasBogoLimitExceeded?: undefined;
            bogoNotAppliedMessage?: undefined;
            hasOnlyCLProduct?: undefined;
            payLaterAllowed?: undefined;
            cartId?: undefined;
            studioFlow?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            cartItems: CartItemType[];
            cartCount: any;
            cartQty: any;
            cartTotal: CartTotalType[];
            cartSubTotal: any;
            applicableGvs: any;
            currencyCode: any;
            offerDetails: any;
            appliedGv: any;
            appliedSc: any;
            lkCash: {
                applicableAmount: number;
                isApplicable: number | boolean;
                moneySaved: number;
                totalWalletAmount: number;
            };
            lkCashPlus: {
                applicableAmount: number;
                isApplicable: number | boolean;
                moneySaved: number;
                totalWalletAmount: number;
            };
            taxMessage: any;
            offerBanner: any;
            hasBogoLimitExceeded: boolean;
            bogoNotAppliedMessage: any;
            hasOnlyCLProduct: boolean;
            payLaterAllowed: any;
            cartId: any;
            studioFlow: any;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const fetchCart: (api: APIService, params?: string, subdirectoryPath?: string) => Promise<{
        data: {
            cartItems?: undefined;
            cartCount?: undefined;
            cartQty?: undefined;
            cartTotal?: undefined;
            cartSubTotal?: undefined;
            applicableGvs?: undefined;
            taxMessage?: undefined;
            currencyCode?: undefined;
            offerDetails?: undefined;
            appliedGv?: undefined;
            appliedSc?: undefined;
            lkCash?: undefined;
            lkCashPlus?: undefined;
            offerBanner?: undefined;
            hasBogoLimitExceeded?: undefined;
            bogoNotAppliedMessage?: undefined;
            hasOnlyCLProduct?: undefined;
            payLaterAllowed?: undefined;
            storeCreditDetails?: undefined;
            cartId?: undefined;
            studioFlow?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            cartItems: CartItemType[];
            cartCount: any;
            cartQty: any;
            cartTotal: CartTotalType[];
            cartSubTotal: any;
            applicableGvs: any;
            taxMessage: any;
            currencyCode: any;
            offerDetails: any;
            appliedGv: any;
            appliedSc: any;
            lkCash: {
                applicableAmount: number;
                isApplicable: number | boolean;
                moneySaved: number;
                totalWalletAmount: number;
            };
            lkCashPlus: {
                applicableAmount: number;
                isApplicable: number | boolean;
                moneySaved: number;
                totalWalletAmount: number;
            };
            offerBanner: any;
            hasBogoLimitExceeded: boolean;
            bogoNotAppliedMessage: any;
            hasOnlyCLProduct: boolean;
            payLaterAllowed: any;
            storeCreditDetails: any;
            cartId: any;
            studioFlow: any;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const updateCartItem: (api: APIService, params: {
        requestBody: {
            itemId: string;
            count: string;
        };
    }, subdirectoryPath: string) => Promise<{
        data: {
            cartItems?: undefined;
            cartCount?: undefined;
            cartQty?: undefined;
            cartTotal?: undefined;
            cartSubTotal?: undefined;
            applicableGvs?: undefined;
            currencyCode?: undefined;
            offerDetails?: undefined;
            appliedGv?: undefined;
            lkCash?: undefined;
            lkCashplus?: undefined;
            offerBanner?: undefined;
            taxMessage?: undefined;
            hasBogoLimitExceeded?: undefined;
            bogoNotAppliedMessage?: undefined;
            hasOnlyCLProduct?: undefined;
            payLaterAllowed?: undefined;
            cartId?: undefined;
            studioFlow?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            cartItems: CartItemType[];
            cartCount: any;
            cartQty: any;
            cartTotal: number | CartTotalType[];
            cartSubTotal: any;
            applicableGvs: any;
            currencyCode: any;
            offerDetails: any;
            appliedGv: any;
            lkCash: number | {
                applicableAmount: number;
                isApplicable: number | boolean;
                moneySaved: number;
                totalWalletAmount: number;
            };
            lkCashplus: number | {
                applicableAmount: number;
                isApplicable: number | boolean;
                moneySaved: number;
                totalWalletAmount: number;
            };
            offerBanner: any;
            taxMessage: any;
            hasBogoLimitExceeded: boolean;
            bogoNotAppliedMessage: any;
            hasOnlyCLProduct: boolean;
            payLaterAllowed: any;
            cartId: any;
            studioFlow: any;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const deleteCartItem: (api: APIService, params: {
        requestBody: {
            itemId: string;
        };
    }, subdirectoryPath: string) => Promise<{
        data: {
            cartItems?: undefined;
            cartId?: undefined;
            cartCount?: undefined;
            cartQty?: undefined;
            cartTotal?: undefined;
            cartSubTotal?: undefined;
            applicableGvs?: undefined;
            offerDetails?: undefined;
            appliedGv?: undefined;
            appliedSc?: undefined;
            lkCash?: undefined;
            lkCashplus?: undefined;
            offerBanner?: undefined;
            taxMessage?: undefined;
            hasBogoLimitExceeded?: undefined;
            bogoNotAppliedMessage?: undefined;
            hasOnlyCLProduct?: undefined;
            studioFlow?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            cartItems: CartItemType[];
            cartId: any;
            cartCount: any;
            cartQty: any;
            cartTotal: CartTotalType[];
            cartSubTotal: any;
            applicableGvs: any;
            offerDetails: any;
            appliedGv: any;
            appliedSc: any;
            lkCash: {
                applicableAmount: number;
                isApplicable: number | boolean;
                moneySaved: number;
                totalWalletAmount: number;
            };
            lkCashplus: {
                applicableAmount: number;
                isApplicable: number | boolean;
                moneySaved: number;
                totalWalletAmount: number;
            };
            offerBanner: any;
            taxMessage: any;
            hasBogoLimitExceeded: boolean;
            bogoNotAppliedMessage: any;
            hasOnlyCLProduct: boolean;
            studioFlow: any;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const needHelpWhatsapp: (api: APIService, body: RequestBody<{
        collectionData: [
            {
                phone: string;
            }
        ];
    }>) => Promise<{
        data: any;
        error: ErrorType;
    }>;
}
declare namespace checkoutFunctions {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    const fetchAddress: (api: APIService) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const deleteAddress: (addressId: number, api: APIService) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const fetchCountryState: (api: APIService) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const fetchDeliveryStatus: (pin: string, api: APIService) => Promise<{
        data: {};
        error: {
            message: string;
            isError: boolean;
            status?: number | undefined;
            key?: string | undefined;
        };
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const editAddress: (addressId: number, api: APIService, body: RequestBody<any>) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const addAddress: (api: APIService, body: RequestBody<any>) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const dualLogin: (body: RequestBody<any>, api: APIService) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getPresalesInfo: (api: APIService) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace packagesFunctions {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    enum FilterViewTypes {
        CHECKBOX = "CHECKBOX",
        IMAGE_SELECTION = "IMAGE_SELECTION"
    }
    interface defaultCategoryParams {
        pageCount: number;
        pageSize: number;
    }
    interface CategoryParams {
        key: string;
        value: string[];
    }
    interface FilterOption {
        title: string;
        id: string;
        productsCount: number;
        imageUrl?: string;
        colorCode?: string;
        frontImageUrl?: string;
    }
    interface FilterItemType {
        name: string;
        id: string;
        type: FilterViewTypes;
        options: FilterOption[];
        canCollapse: boolean;
        showBorderTop: boolean;
        selectedOption: string[];
    }
    interface FilterType {
        categoryInfo: string;
        productCount: number;
        filters: FilterItemType[];
    }
    interface CategoryData extends ErrorType {
        breadcrumb: BreadCrumbType[];
        productCount: number;
        categoryOffer: string;
        categoryName: string;
        categoryType: string;
        subCategories: string;
        showCategoryImage: boolean;
        categoryImage: string;
        isDitto: boolean;
        ageGroup: string;
        seo: SEOType;
        categoryPowerUrl: [
        ];
        urlKey: string;
        urlPath: string;
        categorySubType: string;
        isPersonalization: boolean;
        parentHashtagList: string;
        description: string;
    }
    interface ReviewsType {
        count: number;
        reviews: ReviewItem[] | null;
        pageCount: number;
        pageSize: number;
        reviewGraph: {
            stars: number;
            percentage: number;
        }[];
    }
    interface ReviewItem {
        id: number;
        title: string;
        desc: string;
        userName: string;
        date: string;
        rating: number;
        images: string[];
    }
    enum CurrencySymbol {
        INR = "\u20B9",
        SGD = "$",
        AED = "AED",
        SAR = "SAR",
        USD = "$"
    }
    enum CurrencyType {
        INR = "INR",
        SGD = "SGD",
        AED = "AED",
        SAR = "SAR",
        USD = "USD"
    }
    interface PriceType {
        symbol: CurrencySymbol;
        currency: CurrencyType;
        basePrice: number;
        lkPrice: number;
        firstFrameFreePrice?: number;
        remainingExchangePrice?: number;
        itemExchangePrice?: number;
    }
    interface ProductDetailAPI {
        additionalOptions: {
            options: [
                {
                    label: string;
                    id: string;
                    selectedId: string;
                }
            ];
            optionsMapping: [
                {
                    color: string;
                    power: string;
                    productId: string;
                }
            ];
        };
        id: string;
        isTryNowAvailable: boolean;
        qty: number;
        isDittoEnabled: boolean;
        imageUrls: string[];
        url: string;
        type: string;
        sku: string;
        fullName: string;
        isHecButton: boolean;
        brandName: string;
        modelName: string;
        mobileOfferText: string;
        offerBanner: string;
        isTbyb: boolean;
        avgRating: number;
        totalNoOfRatings: string;
        numberOfReviews: string;
        seoTitle: string;
        seoMetaDescription: string;
        seoMetaKeywords: string;
        seoMetaCanonical: string;
        seoMetaAlternate: string;
        color: string;
        frameTypeKey: string;
        frameColour: string;
        frameDetails: FrameDetail[];
        prices: APIPriceDetail[];
        minLensPrice: number;
        male180: any[];
        female180: any[];
        prescriptionType: PrescriptionType[];
        colorOptions: ColorOptionDetailAPI[];
        relatedItems: any[];
        crossSells: any[];
        specifications: Specification[];
        thumbnailImage: string;
        image: string;
        deliveryOptions: DeliveryOption[];
        classification: string;
        classificationId: string;
        description: string;
        imageResolutions: string[];
        review: ResultReview;
        storeId: any[];
        brandLogo: string;
        imageUrlsDetail: ImageUrlsDetail[];
        subCategories: string;
        lastPurchaseInfo: string;
        frameWidth: string;
        suitedFor: string;
        clLegalreqDetails: string;
        offers: any[];
        breadcrumb: BreadcrumbAPI[];
        mostViewed: number;
        bogoEnabled: boolean;
        offer: any[];
        deliveryTimeShort: string;
        offerName: string;
        pdpContent: string;
        tierName: string;
        wishlistCount: number;
        purchaseCount: number;
        tags: string;
        noOfLensesInABox: number;
        buyFourPrice: number;
        jit: boolean;
        isPlano: boolean;
        merchantId: string;
        sellerLabel: string;
        cmsLinkAndroid: string;
        cmsLinkIos: string;
        arModelAndroidUrl: string;
        arModelIOSUrl: string;
        arModelMsiteAndDesktopUrl: string;
        arModelOriginalUrl: string;
        labels: Label[];
        pdpRichTemplateType: string;
        offerDetails: OfferDetails;
        imageUrlDetail: imageUrlDetailAPI[];
        clUsage: string;
        isDitto: boolean;
        isCygnusEnabled: boolean;
        isQuickCheckout: boolean;
    }
    interface APIPriceDetail {
        name: string;
        currencyCode: string;
        price: number;
        value: number;
    }
    interface ColorOptionDetailAPI {
        id: string;
        productUrl: string;
        imageUrls: string[];
        brand_name: string;
        model_name: string;
        prices: APIPriceDetail[];
        color: string;
        colorId: number;
        arModelAndroidUrl?: string;
        arModelIOSUrl?: string;
    }
    interface BreadcrumbAPI {
        label: string;
        link?: string;
    }
    interface imageUrlDetailAPI {
        label: string;
        url: string;
    }
    interface DeliveryOption {
        deliveryOption: string;
    }
    interface FrameDetail {
        name: string;
        value: string;
        name_en: string;
        value_en: string;
    }
    interface ImageUrlsDetail {
        url: string;
        label: string;
    }
    interface Label {
        label: string;
        value: string;
        design: string;
    }
    interface OfferDetails {
        offerImage: string;
        stickyOfferImage: string;
        headline1: string;
        headline3: string;
        colorCode: string;
        showTax: boolean;
        shimmer: boolean;
        icon: string;
        offerPrice: number;
    }
    interface PrescriptionType {
        id: string;
        title: string;
        isDefault: boolean;
        isPackageAvailable: boolean;
    }
    interface ResultReview {
        reviews: ReviewElement[];
        imageReviews: any[];
        review_graph: ReviewGraph[];
    }
    interface ReviewGraph {
        stars: number;
        percentage: number;
    }
    interface ReviewElement {
        reviewId: string;
        reviewTitle: string;
        reviewDetail: string;
        reviewee: string;
        noOfStars: string;
        reviewDate: string;
        email: string;
        reviewerType: ReviewerType;
        images: any[];
    }
    enum ReviewerType {
        AnonymousUser = "anonymous_user",
        VerifiedReviewer = "verified_reviewer"
    }
    interface Specification {
        name: string;
        items: Item[];
    }
    interface Item {
        name_en?: string;
        name: string;
        value: string;
        value_en?: string;
        urlDetails?: ImageUrlsDetail;
    }
    // import { PrescriptionType } from "./responses/productDetailAPI";
    interface ARModelType {
        android: string | null;
        ios: string | null;
    }
    interface imageHoverType {
        url: string;
        frontURL: string;
        hoverURL: string;
    }
    interface ColorOptionType {
        id: number;
        color: string;
        colorID: number;
        productURL: string;
        price: PriceType;
        arModel: ARModelType;
        productImage?: imageHoverType;
        glassColor: string | null;
        frameColorImage: string;
    }
    interface PrescriptionType$0 {
        id: string;
        title: string;
        isPackageAvailable: boolean;
        imageUrl: string;
        subText: string;
    }
    /**
     * TODO - Change Classification to ENUM
     */
    interface ProductTypeBasic {
        id: number;
        size: string;
        productName: string;
        showProductRating: boolean;
        productRating: number;
        showPurchaseCount: boolean;
        purchaseCount: number;
        showWishlistCount: boolean;
        wishListCount: number;
        tags: string;
        isDitto: boolean;
        isColorOptionExtra: boolean;
        colorOptionExtraCount: number;
        classification: string;
        productURL: string;
        productURLWithoutDomain: string;
        productImage?: imageHoverType;
        price: PriceType;
        colorOptions: ColorOptionType[];
        offerText: string;
        specifications: Specification$0[];
        productModelName: string;
        sku: string;
        totalNoOfRatings?: string;
        relatedItems: any;
        color: string;
    }
    interface ProductDetailType extends ProductTypeBasic {
        imageUrlDetail: imageUrlDetailAPI$0[];
        mobileImageUrl: mobileImageUrlAPI[];
        gridImages: GridImageType[];
        seo: SEOType;
        breadcrumb: BreadCrumbType[];
        generalProductInfo: ProductInfo[];
        technicalProductInfo: ProductInfo[];
        brandName: string;
        reviews: ReviewsType;
        type: string;
        richContent: string;
        prescriptionType: PrescriptionType$0[];
        isTryOnEnabled: boolean;
        addToCartButtons: AddToCartButtonType[] | null;
        frameType: string;
        productQuantity: number | null;
        thumbnail: string;
        jit: boolean;
        isPlano: boolean;
        isDitto: boolean;
        isQuickCheckout: boolean;
        fullName: string;
        frameDetails: FrameDetailsType[];
        sellerLabel: string;
        clLegalreqDetails: string;
        frontImage: string;
        cmsLinkAndroid: string;
        additionalOptions: {
            options: [
                {
                    label: string;
                    id: string;
                    selectedId: string;
                }
            ];
            optionsMapping: [
                {
                    color: string;
                    power: string;
                    productId: string;
                }
            ];
        };
        relatedItems: any[];
        offerDetails: OfferDetails;
        crossSells: {
            id: string;
            text: string;
        }[] | [
        ];
    }
    interface FrameDetailsType {
        name: string;
        name_en: string;
        value: string;
        value_en: string;
    }
    interface AddToCartButtonType {
        primaryText: string;
        secondaryText?: string;
        onlyLens: boolean;
        withPower: boolean;
    }
    enum PackageENUM {
        POWER = "power",
        PACKAGES = "packages",
        EYESIGHT = "eyeSight"
    }
    interface PackageVisibilityType {
        type: PackageENUM;
        selectedText: string;
        showSection: boolean;
        isActive: boolean;
    }
    interface GridImageType {
        id: number;
        imageUrl: string;
        mediumImageUrl: string;
    }
    interface imageUrlDetailAPI$0 {
        label: string;
        imageUrl: string;
    }
    interface mobileImageUrlAPI extends imageUrlDetailAPI$0 {
        alt: string;
        source: string;
    }
    interface ProductInfo {
        name: string;
        nameEn?: string;
        value: string | number;
        valueEn?: string | number;
        showAdditionalInfo: boolean;
        additionalInfoUrl: string | null;
    }
    interface prescriptionTypeCL {
        dob: string;
        gender: string;
        notes: string;
        userName: string;
        powerType: string;
        left?: {
            [name: string]: string;
        };
        right?: {
            [name: string]: string;
        };
    }
    interface cartDataTypeCL {
        productId: number;
        quantity: number;
        prescription: prescriptionTypeCL;
    }
    interface validationDataTypeCL {
        powerOptionList: {
            type: string;
            value: string;
            price: number;
        }[];
    }
    interface Specification$0 {
        name: string;
        items: Item[];
    }
    const getStepsData: (classification: string) => {
        data: {
            steps: {
                type: PackageENUM;
                heading: string;
                selectedText: string;
                showSection: boolean;
                isActive: boolean;
            }[];
        };
        error: {
            isError: boolean;
            message: string;
        };
    };
    interface PackagesType {
        id: string;
        label: string;
        packages: PackageItemTypes[];
        framePrice: PriceType;
        sortBy: PackageItemSortENUM;
    }
    interface PackageItemTypes {
        id: string;
        imageUrl: string;
        name: string;
        label: string;
        warrantyTxt: string;
        offerText: string;
        price: PriceType;
        specifications: SpecificationType[] | null;
        showAddOns: boolean;
        addOns: AddonType[] | null;
        packageTitle: string;
        isBluCut: boolean;
        videoLink?: string;
        tags?: Array<string>;
        offerDetails?: any;
        packageImageLink?: string;
        fullDetails?: any;
    }
    enum PackageItemSortENUM {
        PRICE = "price",
        INDEX = "index"
    }
    interface AddonType {
        id: string;
        title: string;
        imageUrl: string;
        price: PriceType;
    }
    interface SpecificationType {
        groupType: string;
        groupTitle: string;
        title: string;
        subTitle: string;
        showHoverIcon: boolean;
        hoverUrl: string | null;
        isEnabled: boolean;
        boldText: boolean;
    }
    const getPackagesData: (pid: number, powerType: string, frameType: string, classification: string, api: APIService, postcheckParams?: CategoryParams[]) => Promise<{
        data: {
            packages?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            packages: PackagesType;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace headerFunctions {
    const getHeaderData: (configApi: APIService, deviceType?: string) => Promise<{
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace paymentFunctions {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    const fetchDeliveryOptions: (api: APIService, postcode: string, country: string) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const fetchPaymentMethods: (api: APIService, orderId?: string, isExchange?: boolean, paymentMethod?: string, isSalesman?: boolean) => Promise<{
        data: {};
        error: {
            message: string;
            isError: boolean;
            status?: number | undefined;
            key?: string | undefined;
        };
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const postOrderPayment: (api: APIService, body: RequestBody<any>) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const fetchShippingAddress: (api: APIService, body: RequestBody<any>) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getShippingAndDelivery: (api: APIService, body: RequestBody<any>) => Promise<{
        data: {
            deliveryData?: undefined;
            shippingAddressData?: undefined;
        };
        error: ErrorType | {
            isError: boolean;
            message: string;
        };
    } | {
        data: {
            deliveryData: any;
            shippingAddressData: any;
        };
        error: ErrorType | {
            isError: boolean;
            message: string;
        };
    }>;
    interface ProductDetailAPI {
        additionalOptions: {
            options: [
                {
                    label: string;
                    id: string;
                    selectedId: string;
                }
            ];
            optionsMapping: [
                {
                    color: string;
                    power: string;
                    productId: string;
                }
            ];
        };
        id: string;
        isTryNowAvailable: boolean;
        qty: number;
        isDittoEnabled: boolean;
        imageUrls: string[];
        url: string;
        type: string;
        sku: string;
        fullName: string;
        isHecButton: boolean;
        brandName: string;
        modelName: string;
        mobileOfferText: string;
        offerBanner: string;
        isTbyb: boolean;
        avgRating: number;
        totalNoOfRatings: string;
        numberOfReviews: string;
        seoTitle: string;
        seoMetaDescription: string;
        seoMetaKeywords: string;
        seoMetaCanonical: string;
        seoMetaAlternate: string;
        color: string;
        frameTypeKey: string;
        frameColour: string;
        frameDetails: FrameDetail[];
        prices: APIPriceDetail[];
        minLensPrice: number;
        male180: any[];
        female180: any[];
        prescriptionType: PrescriptionType[];
        colorOptions: ColorOptionDetailAPI[];
        relatedItems: any[];
        crossSells: any[];
        specifications: Specification[];
        thumbnailImage: string;
        image: string;
        deliveryOptions: DeliveryOption[];
        classification: string;
        classificationId: string;
        description: string;
        imageResolutions: string[];
        review: ResultReview;
        storeId: any[];
        brandLogo: string;
        imageUrlsDetail: ImageUrlsDetail[];
        subCategories: string;
        lastPurchaseInfo: string;
        frameWidth: string;
        suitedFor: string;
        clLegalreqDetails: string;
        offers: any[];
        breadcrumb: BreadcrumbAPI[];
        mostViewed: number;
        bogoEnabled: boolean;
        offer: any[];
        deliveryTimeShort: string;
        offerName: string;
        pdpContent: string;
        tierName: string;
        wishlistCount: number;
        purchaseCount: number;
        tags: string;
        noOfLensesInABox: number;
        buyFourPrice: number;
        jit: boolean;
        isPlano: boolean;
        merchantId: string;
        sellerLabel: string;
        cmsLinkAndroid: string;
        cmsLinkIos: string;
        arModelAndroidUrl: string;
        arModelIOSUrl: string;
        arModelMsiteAndDesktopUrl: string;
        arModelOriginalUrl: string;
        labels: Label[];
        pdpRichTemplateType: string;
        offerDetails: OfferDetails;
        imageUrlDetail: imageUrlDetailAPI[];
        clUsage: string;
        isDitto: boolean;
        isCygnusEnabled: boolean;
        isQuickCheckout: boolean;
    }
    interface APIPriceDetail {
        name: string;
        currencyCode: string;
        price: number;
        value: number;
    }
    interface ColorOptionDetailAPI {
        id: string;
        productUrl: string;
        imageUrls: string[];
        brand_name: string;
        model_name: string;
        prices: APIPriceDetail[];
        color: string;
        colorId: number;
        arModelAndroidUrl?: string;
        arModelIOSUrl?: string;
    }
    interface BreadcrumbAPI {
        label: string;
        link?: string;
    }
    interface imageUrlDetailAPI {
        label: string;
        url: string;
    }
    interface DeliveryOption {
        deliveryOption: string;
    }
    interface FrameDetail {
        name: string;
        value: string;
        name_en: string;
        value_en: string;
    }
    interface ImageUrlsDetail {
        url: string;
        label: string;
    }
    interface Label {
        label: string;
        value: string;
        design: string;
    }
    interface OfferDetails {
        offerImage: string;
        stickyOfferImage: string;
        headline1: string;
        headline3: string;
        colorCode: string;
        showTax: boolean;
        shimmer: boolean;
        icon: string;
        offerPrice: number;
    }
    interface PrescriptionType {
        id: string;
        title: string;
        isDefault: boolean;
        isPackageAvailable: boolean;
    }
    interface ResultReview {
        reviews: ReviewElement[];
        imageReviews: any[];
        review_graph: ReviewGraph[];
    }
    interface ReviewGraph {
        stars: number;
        percentage: number;
    }
    interface ReviewElement {
        reviewId: string;
        reviewTitle: string;
        reviewDetail: string;
        reviewee: string;
        noOfStars: string;
        reviewDate: string;
        email: string;
        reviewerType: ReviewerType;
        images: any[];
    }
    enum ReviewerType {
        AnonymousUser = "anonymous_user",
        VerifiedReviewer = "verified_reviewer"
    }
    interface Specification {
        name: string;
        items: Item[];
    }
    interface Item {
        name_en?: string;
        name: string;
        value: string;
        value_en?: string;
        urlDetails?: ImageUrlsDetail;
    }
    interface CartItemAPIResponse {
        id: number;
        productId: number;
        productType?: string;
        relatedItems: any[];
        sku: string;
        quantity: number;
        availableQuantity: number;
        options: Option[];
        price: APIPriceDetail;
        framePrice: FramePriceClass;
        freeFrame: boolean;
        gender: string;
        productTypeValue: string;
        amount: Amount;
        appliedRules: number[];
        coupons: any[];
        inventory: Inventory;
        brandName: string;
        isBogoItem: boolean;
        name: string;
        modelName: string;
        productUrl: string;
        thumbnail: string;
        image: string;
        classificationId: string;
        createdAt: number;
        updatedAt: number;
        catalogPrices: APIPriceDetail[];
        prescription: Prescription;
        powerRequired: string;
        classification: string;
        frameType?: string;
        productEligibleForExpressDelivery: boolean;
        lensType: string;
        lensCategory?: string;
        frameShape?: string;
        frameSize?: string;
        frameWidth?: string;
        subcategory?: string;
        cartItemRequest: CartItemRequest;
        productDeliveryType: string;
        isSubscriptionItemFromScheduler: string;
        frameSizeSpecification?: string;
        frameColour?: string;
        merchantId: string;
        sellerLabel: string;
        jit: boolean;
        offerDetail?: DataType | string;
        comboSwitcherProducts: any[];
        message?: string;
        taxPercentage?: number;
        marketPrice: APIPriceDetail;
        goldDiscount: number;
        bogoDiscount: number;
        prescriptionView: PrescriptionView;
        hubCode: string;
        hsnCode: string;
        activeInventories?: ActiveInventory[];
        isExpressDelivery: boolean;
        tierMembershipName?: string;
        label?: string;
        knowMoreText?: string;
        tierMembershipDuration?: number;
        extraDetails?: ExtraDetails;
        contactDisposableType?: string;
        offerDiscount?: number;
        discountedPrice?: APIPriceDetail;
        isFree?: boolean;
        webHeadline?: string;
        webColorCode?: string;
    }
    interface ActiveInventory {
        productId: number;
        storeId: string;
        facilityCode: string;
        quantity: number;
        priority: number;
    }
    interface Amount {
        currencyCode: string;
        discounts: Discount[];
        totalDiscount: number;
        taxes: Tax[];
        totalTax: number;
        shipping: number;
        subTotal: number;
        total: number;
    }
    interface Discount {
        code: string;
        type: string;
        amount: number;
    }
    interface Tax {
        name: string;
        amount: number;
    }
    interface CartItemRequest {
        productId: number;
        relatedProductIds: any[];
        packageId?: string;
        powerType?: string;
        isSubscriptionItemFromScheduler: string;
        subscriptionDiscount: number;
        relatedItems: any[];
        comboSwitcherProducts: any[];
        quantity?: number;
        prescription?: Prescription;
        hubCode?: string;
        addOns?: string;
    }
    interface Prescription {
        powerType?: string;
        left?: PrescriptionLeft;
        right?: PrescriptionLeft;
        notes?: string;
        gender?: string;
        dob?: string;
        showPd?: boolean;
    }
    interface PrescriptionLeft {
        sph: string;
        boxes: number;
        powerwiseId: string;
    }
    interface ExtraDetails {
        tierName: string;
        detailsUrl: string;
        images: Images;
        detailsButtonText: string;
        upgradableTiers: UpgradableTier[];
        tierLabel: string;
    }
    interface Images {
        knowMore: string;
        banner: string;
        labelImage?: string;
    }
    interface UpgradableTier {
        duration: number;
        name: string;
        price: FramePriceClass;
        description: string;
        productId: number;
        currentTier: boolean;
    }
    interface FramePriceClass {
        currencyCode: string;
        value: number;
    }
    interface Inventory {
        deliveryStoreId: number;
    }
    interface Option {
        type: string;
        name: string;
        label: string;
        catalogPrices: APIPriceDetail[];
        id: number;
        oid: string;
        sku?: string;
        group: string;
    }
    interface PrescriptionView {
        showPd: boolean;
        pdConfigAvailable: boolean;
        powerType?: string;
        left?: PrescriptionViewLeft;
        right?: PrescriptionViewLeft;
        notes?: string;
        gender?: string;
        dob?: string;
        labels?: DataType;
    }
    interface PrescriptionViewLeft {
        sph: string;
        boxes: number;
    }
    interface CartTotalAPIType {
        id: string;
        label: string;
        value: number;
        type: string;
        message?: string;
    }
    interface CartPayableAPIResponse {
        currencyCode: string;
        discounts: Discount[];
        totalDiscount: number;
        taxes: Tax[];
        totalTax: number;
        shipping: number;
        subTotal: number;
        total: number;
    }
    interface Discount {
        code: string;
        type: string;
        amount: number;
    }
    interface Tax {
        name: string;
        amount: number;
    }
    interface Wallet {
        applicableAmount: number;
        balance: number;
        message: string;
        type: string;
    }
    interface CartItemType {
        id: number;
        itemId: number;
        itemUrl: string;
        itemImg: string;
        itemModel: string;
        itemClassification: string;
        itemQty: number;
        itemPowerRequired: string;
        itemPrescriptionView: CartPrescriptionType;
        itemFrameType: string;
        itemLensType: string;
        itemLensCategory: string;
        itemContactDisposableType: string;
        showRibbon: boolean;
        ribbonMessage: string;
        showOfferMessage: boolean;
        offerMessage: string;
        itemPriceObj: CartItemPriceType;
        addOnPriceObj: CartItemPriceType | null;
        itemBrandName: string;
        itemFrameColor: string;
        itemOptions: any;
        itemSku: string;
        itemCatalogPrice: any;
        itemTotalPrice: number | string;
        itemPrescription: Prescription;
        itemFrameSize: string;
        tierMembershipName?: string;
        // labelImage: string,
        isLoyalty: boolean;
        loyaltyImage: string;
        isFree: boolean;
        itemLabel?: string;
        itemName: string;
        itemDiscountedPrice?: APIPriceDetail;
        price: APIPriceDetail;
        extraDetails?: ExtraDetails;
        webHeadline?: string;
        webColorCode?: string;
        itemType: string;
    }
    interface CartItemPriceType {
        showStrikeOffPrice: boolean;
        strikeOffPrice: number;
        itemPrice: number;
        itemName: string;
    }
    interface CartPrescriptionType {
        showPd: boolean;
        pdConfigAvailable: boolean;
        powerType?: string;
        left?: PrescriptionViewType;
        right?: PrescriptionViewType;
        notes?: string;
        gender?: string;
        dob?: string;
        labels?: DataType;
    }
    interface PrescriptionViewType {
        sph: string;
        boxes: number;
    }
    interface CartTotalType {
        id?: string;
        label: string;
        amount: number;
        type: CartAmountType;
        addDashedLine?: boolean;
    }
    enum CartAmountType {
        POSITIVE = "positive",
        NEGATIVE = "negative",
        FREE = "free",
        TOTAL = "total",
        SUBTOTAL = "subtotal",
        TOTALBTAX = "beforeTaxTotal"
    }
    const getStoreCredit: (api: APIService, code: string, amount: string, body: RequestBody<null>, subdirectoryPath: string) => Promise<{
        data: {
            cartItems?: undefined;
            cartCount?: undefined;
            cartQty?: undefined;
            cartTotal?: undefined;
            cartSubTotal?: undefined;
            applicableGvs?: undefined;
            currencyCode?: undefined;
            offerDetails?: undefined;
            appliedSc?: undefined;
            offerBanner?: undefined;
            hasBogoLimitExceeded?: undefined;
            bogoNotAppliedMessage?: undefined;
            hasOnlyCLProduct?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            cartItems: CartItemType[];
            cartCount: any;
            cartQty: any;
            cartTotal: CartTotalType[];
            cartSubTotal: any;
            applicableGvs: any;
            currencyCode: any;
            offerDetails: any;
            appliedSc: any;
            offerBanner: any;
            hasBogoLimitExceeded: boolean;
            bogoNotAppliedMessage: any;
            hasOnlyCLProduct: boolean;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const removeStoreCredit: (api: APIService, storeCredit: string, subdirectoryPath: string) => Promise<{
        data: {
            cartItems?: undefined;
            cartCount?: undefined;
            cartQty?: undefined;
            cartTotal?: undefined;
            cartSubTotal?: undefined;
            applicableGvs?: undefined;
            currencyCode?: undefined;
            offerDetails?: undefined;
            appliedSc?: undefined;
            offerBanner?: undefined;
            hasBogoLimitExceeded?: undefined;
            bogoNotAppliedMessage?: undefined;
            hasOnlyCLProduct?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            cartItems: CartItemType[];
            cartCount: any;
            cartQty: any;
            cartTotal: CartTotalType[];
            cartSubTotal: any;
            applicableGvs: any;
            currencyCode: any;
            offerDetails: any;
            appliedSc: any;
            offerBanner: any;
            hasBogoLimitExceeded: boolean;
            bogoNotAppliedMessage: any;
            hasOnlyCLProduct: boolean;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getSavedCards: (api: APIService, gatewayId: string, filterByOffer?: boolean, orderId?: string) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    // import { fetchDeliveryOptions } from "./deliveryOptions";
    // import { fetchShippingAddress } from "./shippingAddress";
    const getPaymentOffer: (api: APIService, body: RequestBody<{
        cardNumber: string;
        offerId: string;
    }>) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getCaptcha: (api: APIService) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getQrCode: (api: APIService, orderId: string | number, body: RequestBody<null>) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getQrStatus: (api: APIService, orderId: string | number) => Promise<{
        data: {
            running?: undefined;
            success?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            running: boolean;
            success: boolean;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getAvailableOffers: (api: APIService) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const juspaySdkInitiate: (api: APIService, orderId: string | number) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getJuspayStatus: (api: APIService, orderId: string | number) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const verifyVpa: (api: APIService, body: RequestBody<any>) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const upiTransactionStatus: (api: APIService, orderId: string | number) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace cmsFunctions {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    const fetchCMSDataWithURL: (redisIds: string[], api: APIService, sessionId: string, cmsApi?: APIService) => Promise<{
        data: {};
        csmError: ErrorType;
        error?: undefined;
    } | {
        data: any;
        error: ErrorType;
        csmError?: undefined;
    }>;
    const getCMSDataWithID: (id: string, sessionId: string, csmAPI: APIService) => Promise<{
        data: {};
        csmError: ErrorType;
        error?: undefined;
    } | {
        data: any;
        error: ErrorType;
        csmError?: undefined;
    }>;
}
declare namespace searchbarFunctions {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    // const filterSearchBarData = (data: DataType[]) => {
    // 	return data.map(d => {
    // 		return {...d}
    // 	})
    // }
    const fetchSearchBarData: (api: APIService, query: string) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace orderFunctions {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    const returnReasons: (payload: string, api: APIService) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getOrderDetailsInv: (orderId: number, api: APIService) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    //
    const eligibility: (orderId: number, api: APIService) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const updateShippingAddress: (orderId: number, api: APIService, body: RequestBody<any>) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const cartData: (api: APIService, body: RequestBody<any>) => Promise<{
        data: {
            cartData?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            cartData: any;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getCartData: (api: APIService) => Promise<{
        data: {
            cartData?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            cartData: any;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getCartDataWalletFalse: (api: APIService) => Promise<{
        data: {
            cartData?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            cartData: any;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const returnMethods: (pinCode: number, api: APIService) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const nearbyStore: (address: number, radius: number, pageSize: number, pageNumber: number, api: APIService) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const saveShippingAddress: (api: APIService, body: RequestBody<any>) => Promise<{
        data: {
            result?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            result: any;
        };
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const refundExchangeStatus: (api: APIService, orderId: string | number, itemId: string | number) => Promise<{
        data: {};
        error: {
            key: string;
            message: string;
            isError: boolean;
            status?: number | undefined;
        };
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getOrderListing: (api: APIService, page: number, itemsPerPage: number) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const confirmOrders: (api: APIService, id: number) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error?: undefined;
    }>;
    const getOrderData: (api: APIService, orderId: string | number) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getV2OrderData: (api: APIService, orderId: string | number, email?: string) => Promise<{
        data: {};
        error: {
            key: string;
            message: string;
            isError: boolean;
            status?: number | undefined;
        };
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const validateCodOtp: (api: APIService, orderId: string | number, email: string, otp: number) => Promise<{
        data: {};
        error: {
            key: string;
            message: string;
            isError: boolean;
            status?: number | undefined;
        };
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace fetchMarketingSubscriptionFunction {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    const fetchMarketingSubscriptionData: (api: APIService) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getMarketingSubscription: (api: APIService, body: RequestBody<any>) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace saveCardFunctions {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    const fetchSavedCardData: (api: APIService, query: string) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const deleteSavedCardData: (api: APIService, cardToken: string, email: string) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace checkVoucherFunctions {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    const checkVoucherBalance: (api: APIService, query: string) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace getPrescriptionFunction {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    const getPrescriptionData: (api: APIService) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getPrescriptionDataWithPowerType: (api: APIService, powerType: string) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getCLSubscriptionData: (api: APIService, productId: string | number, isBothEye: boolean) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getCLSubscriptionDiscount: (productId: string | number, subscriptionType: string, api: APIService) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getCLSolutions: (productId: string | number, api: APIService) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace storeCreditFunction {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    const checkStoreCreditBalance: (api: APIService, query: string) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const storeCreditOrderList: (api: APIService, query: string, itemsPerPage: number) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const storeCreditOrderHistory: (api: APIService, query: string) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getStoreCreditCodeBySMS: (api: APIService, query: string) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace UserPowerFunctions {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    const getPowerDetails: (api: APIService, productID: string | number, powerType: string) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const submitPowerManual: (api: APIService, orderID: string | number, itemID: string | number, emailID: string, body: RequestBody<any>) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace qrCodePidFunction {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    const fetchPidFromQr: (api: APIService, query: string) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace StoreLocatorFuntions {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    const getStoreSlots: (api: APIService, body: RequestBody<any>) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const bookSlots: (api: APIService, orderId: number, itemId: number, body: RequestBody<any>) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace StudioFlowFunctions {
    type Store = {
        code: string;
        storeType: string;
        name: string;
        address: string;
        openingTime: string;
        closingTime: string;
        area: string;
        landmark: string;
        city: string;
        state: string;
        country: string;
        telephone: string;
        phoneCode: string;
        longitude: string;
        latitude: string;
        url: string;
        shortUrl: string;
        googleUrl: string;
        pincode: string;
        email: string;
        updatedAt?: number;
        isAvailable: boolean;
        geoDistance: number;
    };
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    const getStores: (api: APIService, body: RequestBody<string>) => Promise<{
        data: never[];
        error: ErrorType;
        isAvailable?: undefined;
    } | {
        data: any;
        isAvailable: any;
        error: {
            isError: boolean;
            message: string;
            status: number;
        };
    }>;
    const getTimeSlots: (api: APIService, body: RequestBody<any>) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const bookSlots: (api: APIService, orderId: number, body: RequestBody<any>) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const bookAppointment: (api: APIService, orderId: number, body: RequestBody<any>, reschedule: boolean) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace getJsonDataFunctions {
    const getJsonData: (arrayOfUrl: any, url: string | undefined, configApi: APIService, api: APIService, isMobile: boolean) => Promise<any>;
}
declare namespace PrimerFunctions {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    const getClientToken: (api: APIService, body: RequestBody<string>) => Promise<{
        data: null;
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getPaymentMethods: (api: APIService, body: RequestBody<{
        paymentMethods: any;
        orderId?: string;
        configData: ConfigDataType;
    }>) => Promise<{
        data: null;
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    const getPrimerPaymentStatus: (api: APIService, body: RequestBody<{
        paymentRefId: string;
        paymentId: string;
    }>) => Promise<{
        data: null;
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace newSearchFunctions {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    const getTrendingSearch: (api: APIService) => Promise<{
        data: any;
        error: ErrorType;
    }>;
    enum FilterViewTypes {
        CHECKBOX = "CHECKBOX",
        IMAGE_SELECTION = "IMAGE_SELECTION"
    }
    interface defaultCategoryParams {
        pageCount: number;
        pageSize: number;
    }
    interface CategoryParams {
        key: string;
        value: string[];
    }
    interface FilterOption {
        title: string;
        id: string;
        productsCount: number;
        imageUrl?: string;
        colorCode?: string;
        frontImageUrl?: string;
    }
    interface FilterItemType {
        name: string;
        id: string;
        type: FilterViewTypes;
        options: FilterOption[];
        canCollapse: boolean;
        showBorderTop: boolean;
        selectedOption: string[];
    }
    interface FilterType {
        categoryInfo: string;
        productCount: number;
        filters: FilterItemType[];
    }
    interface CategoryData extends ErrorType {
        breadcrumb: BreadCrumbType[];
        productCount: number;
        categoryOffer: string;
        categoryName: string;
        categoryType: string;
        subCategories: string;
        showCategoryImage: boolean;
        categoryImage: string;
        isDitto: boolean;
        ageGroup: string;
        seo: SEOType;
        categoryPowerUrl: [
        ];
        urlKey: string;
        urlPath: string;
        categorySubType: string;
        isPersonalization: boolean;
        parentHashtagList: string;
        description: string;
    }
    interface ReviewsType {
        count: number;
        reviews: ReviewItem[] | null;
        pageCount: number;
        pageSize: number;
        reviewGraph: {
            stars: number;
            percentage: number;
        }[];
    }
    interface ReviewItem {
        id: number;
        title: string;
        desc: string;
        userName: string;
        date: string;
        rating: number;
        images: string[];
    }
    enum CurrencySymbol {
        INR = "\u20B9",
        SGD = "$",
        AED = "AED",
        SAR = "SAR",
        USD = "$"
    }
    enum CurrencyType {
        INR = "INR",
        SGD = "SGD",
        AED = "AED",
        SAR = "SAR",
        USD = "USD"
    }
    interface PriceType {
        symbol: CurrencySymbol;
        currency: CurrencyType;
        basePrice: number;
        lkPrice: number;
        firstFrameFreePrice?: number;
        remainingExchangePrice?: number;
        itemExchangePrice?: number;
    }
    interface ProductDetailAPI {
        additionalOptions: {
            options: [
                {
                    label: string;
                    id: string;
                    selectedId: string;
                }
            ];
            optionsMapping: [
                {
                    color: string;
                    power: string;
                    productId: string;
                }
            ];
        };
        id: string;
        isTryNowAvailable: boolean;
        qty: number;
        isDittoEnabled: boolean;
        imageUrls: string[];
        url: string;
        type: string;
        sku: string;
        fullName: string;
        isHecButton: boolean;
        brandName: string;
        modelName: string;
        mobileOfferText: string;
        offerBanner: string;
        isTbyb: boolean;
        avgRating: number;
        totalNoOfRatings: string;
        numberOfReviews: string;
        seoTitle: string;
        seoMetaDescription: string;
        seoMetaKeywords: string;
        seoMetaCanonical: string;
        seoMetaAlternate: string;
        color: string;
        frameTypeKey: string;
        frameColour: string;
        frameDetails: FrameDetail[];
        prices: APIPriceDetail[];
        minLensPrice: number;
        male180: any[];
        female180: any[];
        prescriptionType: PrescriptionType[];
        colorOptions: ColorOptionDetailAPI[];
        relatedItems: any[];
        crossSells: any[];
        specifications: Specification[];
        thumbnailImage: string;
        image: string;
        deliveryOptions: DeliveryOption[];
        classification: string;
        classificationId: string;
        description: string;
        imageResolutions: string[];
        review: ResultReview;
        storeId: any[];
        brandLogo: string;
        imageUrlsDetail: ImageUrlsDetail[];
        subCategories: string;
        lastPurchaseInfo: string;
        frameWidth: string;
        suitedFor: string;
        clLegalreqDetails: string;
        offers: any[];
        breadcrumb: BreadcrumbAPI[];
        mostViewed: number;
        bogoEnabled: boolean;
        offer: any[];
        deliveryTimeShort: string;
        offerName: string;
        pdpContent: string;
        tierName: string;
        wishlistCount: number;
        purchaseCount: number;
        tags: string;
        noOfLensesInABox: number;
        buyFourPrice: number;
        jit: boolean;
        isPlano: boolean;
        merchantId: string;
        sellerLabel: string;
        cmsLinkAndroid: string;
        cmsLinkIos: string;
        arModelAndroidUrl: string;
        arModelIOSUrl: string;
        arModelMsiteAndDesktopUrl: string;
        arModelOriginalUrl: string;
        labels: Label[];
        pdpRichTemplateType: string;
        offerDetails: OfferDetails;
        imageUrlDetail: imageUrlDetailAPI[];
        clUsage: string;
        isDitto: boolean;
        isCygnusEnabled: boolean;
        isQuickCheckout: boolean;
    }
    interface APIPriceDetail {
        name: string;
        currencyCode: string;
        price: number;
        value: number;
    }
    interface ColorOptionDetailAPI {
        id: string;
        productUrl: string;
        imageUrls: string[];
        brand_name: string;
        model_name: string;
        prices: APIPriceDetail[];
        color: string;
        colorId: number;
        arModelAndroidUrl?: string;
        arModelIOSUrl?: string;
    }
    interface BreadcrumbAPI {
        label: string;
        link?: string;
    }
    interface imageUrlDetailAPI {
        label: string;
        url: string;
    }
    interface DeliveryOption {
        deliveryOption: string;
    }
    interface FrameDetail {
        name: string;
        value: string;
        name_en: string;
        value_en: string;
    }
    interface ImageUrlsDetail {
        url: string;
        label: string;
    }
    interface Label {
        label: string;
        value: string;
        design: string;
    }
    interface OfferDetails {
        offerImage: string;
        stickyOfferImage: string;
        headline1: string;
        headline3: string;
        colorCode: string;
        showTax: boolean;
        shimmer: boolean;
        icon: string;
        offerPrice: number;
    }
    interface PrescriptionType {
        id: string;
        title: string;
        isDefault: boolean;
        isPackageAvailable: boolean;
    }
    interface ResultReview {
        reviews: ReviewElement[];
        imageReviews: any[];
        review_graph: ReviewGraph[];
    }
    interface ReviewGraph {
        stars: number;
        percentage: number;
    }
    interface ReviewElement {
        reviewId: string;
        reviewTitle: string;
        reviewDetail: string;
        reviewee: string;
        noOfStars: string;
        reviewDate: string;
        email: string;
        reviewerType: ReviewerType;
        images: any[];
    }
    enum ReviewerType {
        AnonymousUser = "anonymous_user",
        VerifiedReviewer = "verified_reviewer"
    }
    interface Specification {
        name: string;
        items: Item[];
    }
    interface Item {
        name_en?: string;
        name: string;
        value: string;
        value_en?: string;
        urlDetails?: ImageUrlsDetail;
    }
    // import { PrescriptionType } from "./responses/productDetailAPI";
    interface ARModelType {
        android: string | null;
        ios: string | null;
    }
    interface imageHoverType {
        url: string;
        frontURL: string;
        hoverURL: string;
    }
    interface ColorOptionType {
        id: number;
        color: string;
        colorID: number;
        productURL: string;
        price: PriceType;
        arModel: ARModelType;
        productImage?: imageHoverType;
        glassColor: string | null;
        frameColorImage: string;
    }
    interface PrescriptionType$0 {
        id: string;
        title: string;
        isPackageAvailable: boolean;
        imageUrl: string;
        subText: string;
    }
    /**
     * TODO - Change Classification to ENUM
     */
    interface ProductTypeBasic {
        id: number;
        size: string;
        productName: string;
        showProductRating: boolean;
        productRating: number;
        showPurchaseCount: boolean;
        purchaseCount: number;
        showWishlistCount: boolean;
        wishListCount: number;
        tags: string;
        isDitto: boolean;
        isColorOptionExtra: boolean;
        colorOptionExtraCount: number;
        classification: string;
        productURL: string;
        productURLWithoutDomain: string;
        productImage?: imageHoverType;
        price: PriceType;
        colorOptions: ColorOptionType[];
        offerText: string;
        specifications: Specification$0[];
        productModelName: string;
        sku: string;
        totalNoOfRatings?: string;
        relatedItems: any;
        color: string;
    }
    interface ProductDetailType extends ProductTypeBasic {
        imageUrlDetail: imageUrlDetailAPI$0[];
        mobileImageUrl: mobileImageUrlAPI[];
        gridImages: GridImageType[];
        seo: SEOType;
        breadcrumb: BreadCrumbType[];
        generalProductInfo: ProductInfo[];
        technicalProductInfo: ProductInfo[];
        brandName: string;
        reviews: ReviewsType;
        type: string;
        richContent: string;
        prescriptionType: PrescriptionType$0[];
        isTryOnEnabled: boolean;
        addToCartButtons: AddToCartButtonType[] | null;
        frameType: string;
        productQuantity: number | null;
        thumbnail: string;
        jit: boolean;
        isPlano: boolean;
        isDitto: boolean;
        isQuickCheckout: boolean;
        fullName: string;
        frameDetails: FrameDetailsType[];
        sellerLabel: string;
        clLegalreqDetails: string;
        frontImage: string;
        cmsLinkAndroid: string;
        additionalOptions: {
            options: [
                {
                    label: string;
                    id: string;
                    selectedId: string;
                }
            ];
            optionsMapping: [
                {
                    color: string;
                    power: string;
                    productId: string;
                }
            ];
        };
        relatedItems: any[];
        offerDetails: OfferDetails;
        crossSells: {
            id: string;
            text: string;
        }[] | [
        ];
    }
    interface FrameDetailsType {
        name: string;
        name_en: string;
        value: string;
        value_en: string;
    }
    interface AddToCartButtonType {
        primaryText: string;
        secondaryText?: string;
        onlyLens: boolean;
        withPower: boolean;
    }
    enum PackageENUM {
        POWER = "power",
        PACKAGES = "packages",
        EYESIGHT = "eyeSight"
    }
    interface PackageVisibilityType {
        type: PackageENUM;
        selectedText: string;
        showSection: boolean;
        isActive: boolean;
    }
    interface GridImageType {
        id: number;
        imageUrl: string;
        mediumImageUrl: string;
    }
    interface imageUrlDetailAPI$0 {
        label: string;
        imageUrl: string;
    }
    interface mobileImageUrlAPI extends imageUrlDetailAPI$0 {
        alt: string;
        source: string;
    }
    interface ProductInfo {
        name: string;
        nameEn?: string;
        value: string | number;
        valueEn?: string | number;
        showAdditionalInfo: boolean;
        additionalInfoUrl: string | null;
    }
    interface prescriptionTypeCL {
        dob: string;
        gender: string;
        notes: string;
        userName: string;
        powerType: string;
        left?: {
            [name: string]: string;
        };
        right?: {
            [name: string]: string;
        };
    }
    interface cartDataTypeCL {
        productId: number;
        quantity: number;
        prescription: prescriptionTypeCL;
    }
    interface validationDataTypeCL {
        powerOptionList: {
            type: string;
            value: string;
            price: number;
        }[];
    }
    interface Specification$0 {
        name: string;
        items: Item[];
    }
    // const searchProduct = async (api: APIService, body: RequestBody<any>) => {
    // 	const { data, error } = await apiWrapper(`${APIConstants.PRODUCTS_SEARCH}`, api, false, body);
    // 	if(error.isError) {
    // 		return { data: {}, error };
    // 	} else {
    // 		return {
    // 			data: data.result,
    // 			error
    // 		};
    // 	}
    // };
    // const searchProductFilters = async (api: APIService, body: RequestBody<any>) => {
    // 	const { data, error } = await apiWrapper(`${APIConstants.PRODUCTS_SEARCH}`, api, false, body);
    // 	if(error.isError) {
    // 		return { data: {}, error };
    // 	} else {
    // 		return {
    // 			data: data.result,
    // 			error
    // 		};
    // 	}
    // };
    const searchProduct: (api: APIService, body: RequestBody<any>) => Promise<{
        formatData: {
            categoryData: {};
            productData: {};
        };
        error: ErrorType;
        webUrl: string;
        deeplinkUrl: string;
    } | {
        formatData: {
            categoryData: CategoryData;
            productData: ProductTypeBasic[];
        };
        error: {
            isError: boolean;
            message: string;
        };
        webUrl: any;
        deeplinkUrl: any;
    }>;
}
declare namespace PhoneCaptureFunctions {
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    const fetchPhoneCaptureData: (api: APIService, body: RequestBody<[
        {
            sessionId: string;
            UTM: string;
            created_at: string;
            device_id: string;
            is_verified: number;
            phone: string;
            phoneCode: string;
            platform: string;
        }
    ]>) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
declare namespace paymentMethodsV5 {
    const fetchPaymentMethods: (api: APIService, orderId?: string, isExchange?: boolean, paymentMethod?: string, isSalesman?: boolean) => Promise<{
        data: {};
        error: {
            message: string;
            isError: boolean;
            status?: number | undefined;
            key?: string | undefined;
        };
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
    interface StoreCreditType {
        code: string;
        amount: number;
        expiryDate: string;
        isApplied: boolean;
    }
    interface StoreCreditTypes {
        storeCredits: Array<StoreCreditType>;
        currencyCode: string;
    }
    interface DataType {
        [name: string]: unknown;
    }
    interface ConfigDataType {
        [name: string]: unknown;
    }
    interface ConfigResponseData {
        error: ErrorType;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    interface ResponseData {
        pageData: DataType;
        data: DataType;
        error: ErrorType;
        pageType?: PageTypes;
        configData?: ConfigDataType;
        localeData?: ConfigDataType;
    }
    enum PageTypes {
        CMS = "cms",
        PLP = "cat",
        PDP = "prod",
        NULL = "null",
        CART = "cart",
        COL = "col",
        SPECIAL_CATEGORY = "SPECIAL_CATEGORY"
    }
    enum SignInType {
        EMAIL = "email",
        PHONE = "phone"
    }
    interface ErrorType {
        message: string;
        isError: boolean;
        status?: number;
        key?: string;
    }
    interface BreadCrumbType {
        label: string;
        link: string;
    }
    interface SEOType {
        title: string;
        keyword: string;
        description: string;
        canonical: string;
        alternate: string;
    }
    enum APIMethods {
        GET = "GET",
        POST = "POST"
    }
    interface imageUrlsDetailType {
        label: string;
        imageUrl: string;
    }
    interface FilterData {
        key: string;
        value: string[];
    }
    interface ProductDetailAPI {
        additionalOptions: {
            options: [
                {
                    label: string;
                    id: string;
                    selectedId: string;
                }
            ];
            optionsMapping: [
                {
                    color: string;
                    power: string;
                    productId: string;
                }
            ];
        };
        id: string;
        isTryNowAvailable: boolean;
        qty: number;
        isDittoEnabled: boolean;
        imageUrls: string[];
        url: string;
        type: string;
        sku: string;
        fullName: string;
        isHecButton: boolean;
        brandName: string;
        modelName: string;
        mobileOfferText: string;
        offerBanner: string;
        isTbyb: boolean;
        avgRating: number;
        totalNoOfRatings: string;
        numberOfReviews: string;
        seoTitle: string;
        seoMetaDescription: string;
        seoMetaKeywords: string;
        seoMetaCanonical: string;
        seoMetaAlternate: string;
        color: string;
        frameTypeKey: string;
        frameColour: string;
        frameDetails: FrameDetail[];
        prices: APIPriceDetail[];
        minLensPrice: number;
        male180: any[];
        female180: any[];
        prescriptionType: PrescriptionType[];
        colorOptions: ColorOptionDetailAPI[];
        relatedItems: any[];
        crossSells: any[];
        specifications: Specification[];
        thumbnailImage: string;
        image: string;
        deliveryOptions: DeliveryOption[];
        classification: string;
        classificationId: string;
        description: string;
        imageResolutions: string[];
        review: ResultReview;
        storeId: any[];
        brandLogo: string;
        imageUrlsDetail: ImageUrlsDetail[];
        subCategories: string;
        lastPurchaseInfo: string;
        frameWidth: string;
        suitedFor: string;
        clLegalreqDetails: string;
        offers: any[];
        breadcrumb: BreadcrumbAPI[];
        mostViewed: number;
        bogoEnabled: boolean;
        offer: any[];
        deliveryTimeShort: string;
        offerName: string;
        pdpContent: string;
        tierName: string;
        wishlistCount: number;
        purchaseCount: number;
        tags: string;
        noOfLensesInABox: number;
        buyFourPrice: number;
        jit: boolean;
        isPlano: boolean;
        merchantId: string;
        sellerLabel: string;
        cmsLinkAndroid: string;
        cmsLinkIos: string;
        arModelAndroidUrl: string;
        arModelIOSUrl: string;
        arModelMsiteAndDesktopUrl: string;
        arModelOriginalUrl: string;
        labels: Label[];
        pdpRichTemplateType: string;
        offerDetails: OfferDetails;
        imageUrlDetail: imageUrlDetailAPI[];
        clUsage: string;
        isDitto: boolean;
        isCygnusEnabled: boolean;
        isQuickCheckout: boolean;
    }
    interface APIPriceDetail {
        name: string;
        currencyCode: string;
        price: number;
        value: number;
    }
    interface ColorOptionDetailAPI {
        id: string;
        productUrl: string;
        imageUrls: string[];
        brand_name: string;
        model_name: string;
        prices: APIPriceDetail[];
        color: string;
        colorId: number;
        arModelAndroidUrl?: string;
        arModelIOSUrl?: string;
    }
    interface BreadcrumbAPI {
        label: string;
        link?: string;
    }
    interface imageUrlDetailAPI {
        label: string;
        url: string;
    }
    interface DeliveryOption {
        deliveryOption: string;
    }
    interface FrameDetail {
        name: string;
        value: string;
        name_en: string;
        value_en: string;
    }
    interface ImageUrlsDetail {
        url: string;
        label: string;
    }
    interface Label {
        label: string;
        value: string;
        design: string;
    }
    interface OfferDetails {
        offerImage: string;
        stickyOfferImage: string;
        headline1: string;
        headline3: string;
        colorCode: string;
        showTax: boolean;
        shimmer: boolean;
        icon: string;
        offerPrice: number;
    }
    interface PrescriptionType {
        id: string;
        title: string;
        isDefault: boolean;
        isPackageAvailable: boolean;
    }
    interface ResultReview {
        reviews: ReviewElement[];
        imageReviews: any[];
        review_graph: ReviewGraph[];
    }
    interface ReviewGraph {
        stars: number;
        percentage: number;
    }
    interface ReviewElement {
        reviewId: string;
        reviewTitle: string;
        reviewDetail: string;
        reviewee: string;
        noOfStars: string;
        reviewDate: string;
        email: string;
        reviewerType: ReviewerType;
        images: any[];
    }
    enum ReviewerType {
        AnonymousUser = "anonymous_user",
        VerifiedReviewer = "verified_reviewer"
    }
    interface Specification {
        name: string;
        items: Item[];
    }
    interface Item {
        name_en?: string;
        name: string;
        value: string;
        value_en?: string;
        urlDetails?: ImageUrlsDetail;
    }
    interface CartItemAPIResponse {
        id: number;
        productId: number;
        productType?: string;
        relatedItems: any[];
        sku: string;
        quantity: number;
        availableQuantity: number;
        options: Option[];
        price: APIPriceDetail;
        framePrice: FramePriceClass;
        freeFrame: boolean;
        gender: string;
        productTypeValue: string;
        amount: Amount;
        appliedRules: number[];
        coupons: any[];
        inventory: Inventory;
        brandName: string;
        isBogoItem: boolean;
        name: string;
        modelName: string;
        productUrl: string;
        thumbnail: string;
        image: string;
        classificationId: string;
        createdAt: number;
        updatedAt: number;
        catalogPrices: APIPriceDetail[];
        prescription: Prescription;
        powerRequired: string;
        classification: string;
        frameType?: string;
        productEligibleForExpressDelivery: boolean;
        lensType: string;
        lensCategory?: string;
        frameShape?: string;
        frameSize?: string;
        frameWidth?: string;
        subcategory?: string;
        cartItemRequest: CartItemRequest;
        productDeliveryType: string;
        isSubscriptionItemFromScheduler: string;
        frameSizeSpecification?: string;
        frameColour?: string;
        merchantId: string;
        sellerLabel: string;
        jit: boolean;
        offerDetail?: DataType | string;
        comboSwitcherProducts: any[];
        message?: string;
        taxPercentage?: number;
        marketPrice: APIPriceDetail;
        goldDiscount: number;
        bogoDiscount: number;
        prescriptionView: PrescriptionView;
        hubCode: string;
        hsnCode: string;
        activeInventories?: ActiveInventory[];
        isExpressDelivery: boolean;
        tierMembershipName?: string;
        label?: string;
        knowMoreText?: string;
        tierMembershipDuration?: number;
        extraDetails?: ExtraDetails;
        contactDisposableType?: string;
        offerDiscount?: number;
        discountedPrice?: APIPriceDetail;
        isFree?: boolean;
        webHeadline?: string;
        webColorCode?: string;
    }
    interface ActiveInventory {
        productId: number;
        storeId: string;
        facilityCode: string;
        quantity: number;
        priority: number;
    }
    interface Amount {
        currencyCode: string;
        discounts: Discount[];
        totalDiscount: number;
        taxes: Tax[];
        totalTax: number;
        shipping: number;
        subTotal: number;
        total: number;
    }
    interface Discount {
        code: string;
        type: string;
        amount: number;
    }
    interface Tax {
        name: string;
        amount: number;
    }
    interface CartItemRequest {
        productId: number;
        relatedProductIds: any[];
        packageId?: string;
        powerType?: string;
        isSubscriptionItemFromScheduler: string;
        subscriptionDiscount: number;
        relatedItems: any[];
        comboSwitcherProducts: any[];
        quantity?: number;
        prescription?: Prescription;
        hubCode?: string;
        addOns?: string;
    }
    interface Prescription {
        powerType?: string;
        left?: PrescriptionLeft;
        right?: PrescriptionLeft;
        notes?: string;
        gender?: string;
        dob?: string;
        showPd?: boolean;
    }
    interface PrescriptionLeft {
        sph: string;
        boxes: number;
        powerwiseId: string;
    }
    interface ExtraDetails {
        tierName: string;
        detailsUrl: string;
        images: Images;
        detailsButtonText: string;
        upgradableTiers: UpgradableTier[];
        tierLabel: string;
    }
    interface Images {
        knowMore: string;
        banner: string;
        labelImage?: string;
    }
    interface UpgradableTier {
        duration: number;
        name: string;
        price: FramePriceClass;
        description: string;
        productId: number;
        currentTier: boolean;
    }
    interface FramePriceClass {
        currencyCode: string;
        value: number;
    }
    interface Inventory {
        deliveryStoreId: number;
    }
    interface Option {
        type: string;
        name: string;
        label: string;
        catalogPrices: APIPriceDetail[];
        id: number;
        oid: string;
        sku?: string;
        group: string;
    }
    interface PrescriptionView {
        showPd: boolean;
        pdConfigAvailable: boolean;
        powerType?: string;
        left?: PrescriptionViewLeft;
        right?: PrescriptionViewLeft;
        notes?: string;
        gender?: string;
        dob?: string;
        labels?: DataType;
    }
    interface PrescriptionViewLeft {
        sph: string;
        boxes: number;
    }
    interface CartTotalAPIType {
        id: string;
        label: string;
        value: number;
        type: string;
        message?: string;
    }
    interface CartPayableAPIResponse {
        currencyCode: string;
        discounts: Discount[];
        totalDiscount: number;
        taxes: Tax[];
        totalTax: number;
        shipping: number;
        subTotal: number;
        total: number;
    }
    interface Discount {
        code: string;
        type: string;
        amount: number;
    }
    interface Tax {
        name: string;
        amount: number;
    }
    interface Wallet {
        applicableAmount: number;
        balance: number;
        message: string;
        type: string;
    }
    interface CartItemType {
        id: number;
        itemId: number;
        itemUrl: string;
        itemImg: string;
        itemModel: string;
        itemClassification: string;
        itemQty: number;
        itemPowerRequired: string;
        itemPrescriptionView: CartPrescriptionType;
        itemFrameType: string;
        itemLensType: string;
        itemLensCategory: string;
        itemContactDisposableType: string;
        showRibbon: boolean;
        ribbonMessage: string;
        showOfferMessage: boolean;
        offerMessage: string;
        itemPriceObj: CartItemPriceType;
        addOnPriceObj: CartItemPriceType | null;
        itemBrandName: string;
        itemFrameColor: string;
        itemOptions: any;
        itemSku: string;
        itemCatalogPrice: any;
        itemTotalPrice: number | string;
        itemPrescription: Prescription;
        itemFrameSize: string;
        tierMembershipName?: string;
        // labelImage: string,
        isLoyalty: boolean;
        loyaltyImage: string;
        isFree: boolean;
        itemLabel?: string;
        itemName: string;
        itemDiscountedPrice?: APIPriceDetail;
        price: APIPriceDetail;
        extraDetails?: ExtraDetails;
        webHeadline?: string;
        webColorCode?: string;
        itemType: string;
    }
    interface CartItemPriceType {
        showStrikeOffPrice: boolean;
        strikeOffPrice: number;
        itemPrice: number;
        itemName: string;
    }
    interface CartPrescriptionType {
        showPd: boolean;
        pdConfigAvailable: boolean;
        powerType?: string;
        left?: PrescriptionViewType;
        right?: PrescriptionViewType;
        notes?: string;
        gender?: string;
        dob?: string;
        labels?: DataType;
    }
    interface PrescriptionViewType {
        sph: string;
        boxes: number;
    }
    interface CartTotalType {
        id?: string;
        label: string;
        amount: number;
        type: CartAmountType;
        addDashedLine?: boolean;
    }
    enum CartAmountType {
        POSITIVE = "positive",
        NEGATIVE = "negative",
        FREE = "free",
        TOTAL = "total",
        SUBTOTAL = "subtotal",
        TOTALBTAX = "beforeTaxTotal"
    }
    const storeCredits: (api: APIService, body: RequestBody<StoreCreditTypes>) => Promise<{
        data: {
            cartItems?: undefined;
            cartCount?: undefined;
            cartQty?: undefined;
            cartTotal?: undefined;
            cartSubTotal?: undefined;
            applicableGvs?: undefined;
            taxMessage?: undefined;
            currencyCode?: undefined;
            appliedGv?: undefined;
            appliedSc?: undefined;
            lkCash?: undefined;
            lkCashplus?: undefined;
            offerBanner?: undefined;
            hasBogoLimitExceeded?: undefined;
            bogoNotAppliedMessage?: undefined;
            hasOnlyCLProduct?: undefined;
            payLaterAllowed?: undefined;
            storeCreditDetails?: undefined;
        };
        error: ErrorType;
    } | {
        data: {
            cartItems: CartItemType[];
            cartCount: any;
            cartQty: any;
            cartTotal: CartTotalType[];
            cartSubTotal: any;
            applicableGvs: any;
            taxMessage: any;
            currencyCode: any;
            appliedGv: any;
            appliedSc: any;
            lkCash: {
                applicableAmount: number;
                isApplicable: number | boolean;
                moneySaved: number;
                totalWalletAmount: number;
            };
            lkCashplus: {
                applicableAmount: number;
                isApplicable: number | boolean;
                moneySaved: number;
                totalWalletAmount: number;
            };
            offerBanner: any;
            hasBogoLimitExceeded: boolean;
            bogoNotAppliedMessage: any;
            hasOnlyCLProduct: boolean;
            payLaterAllowed: any;
            storeCreditDetails: any;
        };
        error: {
            isError: false;
            message: string;
        };
    }>;
    const verifyVpaNew: (api: APIService, body: RequestBody<any>) => Promise<{
        data: {};
        error: ErrorType;
    } | {
        data: any;
        error: {
            isError: boolean;
            message: string;
        };
    }>;
}
export { sessionFunctions, fireBaseFunctions, redisFunctions, userFunctions, pageFunctions, homeFunctions, pdpFunctions, wishlistFunctions, categoryFunctions, cartFunctions, checkoutFunctions, packagesFunctions, headerFunctions, paymentFunctions, cmsFunctions, searchbarFunctions, orderFunctions, fetchMarketingSubscriptionFunction, saveCardFunctions, checkVoucherFunctions, getPrescriptionFunction, storeCreditFunction, UserPowerFunctions, qrCodePidFunction, StoreLocatorFuntions, StudioFlowFunctions, getJsonDataFunctions, PrimerFunctions, newSearchFunctions, PhoneCaptureFunctions, paymentMethodsV5 };
