type KeyValue<T, U> = {
    key: T;
    value: U;
};
declare enum APIMethods {
    GET = "GET",
    POST = "POST",
    PUT = "PUT",
    DELETE = "DELETE"
}
declare class APIService {
    #private;
    constructor(envURL: string);
    get envURL(): string;
    set envURL(url: string);
    get sessionToken(): string;
    set sessionToken(newToken: string);
    get method(): APIMethods;
    get headers(): string[][];
    setHeaders(headers: KeyValue<string, string>[]): APIService;
    resetHeaders(): void;
    setMethod(newMethod: APIMethods): APIService;
    request<T>(body?: T): RequestInit;
}
declare class RequestBody<T> {
    private _requestBody;
    constructor(_requestBody: T);
    get requestBody(): T;
    set requestBody(newRequestBody: T);
}
declare const extractUtmParams: (utmSourceStr: string) => {
    utm_source: null;
    utm_medium: null;
    utm_campaign: null;
    utm_content: null;
    utm_term: null;
};
declare const localStorageHelper: {
    getItem: (key: string) => any;
    setItem: (key: string, value?: object | string | number | null) => void;
    removeItem: (key: string) => void;
};
declare const SubDomain: (url: string) => string;
type APIServiceType = InstanceType<typeof APIService>;
export { APIServiceType, APIService, RequestBody, extractUtmParams, localStorageHelper, SubDomain };
