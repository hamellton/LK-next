import React, { useLayoutEffect, useRef, useState, useEffect } from "react";
import Swipe from "./Swipe";

import { getTrackStyle } from "./utils";
// import { useEffect } from "@storybook/addons";
import { CarouselMain, CarouselNext, CarouselPrev, CarouselSlide, CarouselSlideContainer, CarouselTrack, DotContainer, DotItem, NavDot, NavDotsContainer } from "./Carousel.styles";
import { CarouselPropTypes } from "./Carousel.types";

const Carousel = ({ autoPlay, disabledInfinite, slidesPerView, onSlideChange, children, newStyle, dots, arrows, dataLocale, isPfu, noOfSlides, slideStyle, isFitToView, leftMirroredSlides, rightMirroredSlides }: CarouselPropTypes) => {
	const autoPlayHandler = useRef<ReturnType<typeof setInterval> | null>(null);
	const animateToView = useRef<ReturnType<typeof setTimeout> | null>(null);
	const [currentSlide, setCurrentSlide] = useState(0);
	const [animating, setAnimating] = useState(false);
	const [trackStyle, setTrackStyle] = useState({});

	useEffect(() => {
		if (autoPlay > 0) {
			autoPlayHandler.current = setInterval(() => {
				getNextSlide();
			}, autoPlay);
		}
	}, []);
	useEffect(() => {
		getSlideIntoView(currentSlide, 0);
		if(!disabledInfinite) {
			if (currentSlide === noOfSlides) {
				setAnimating(true);
				animateToView.current = setTimeout(() => {
					getSlideIntoView(-1, 1, true);
					setAnimating(false);
				}, 500);
			} else if (currentSlide === -1) {
				setAnimating(true);
				animateToView.current = setTimeout(() => {
					getSlideIntoView(noOfSlides, -1, true);
					setAnimating(false);
				}, 500);
			}
		}
	}, [currentSlide, disabledInfinite, noOfSlides]);

	useLayoutEffect(() => {
		return () => {
			if (autoPlayHandler.current) {
				clearInterval(autoPlayHandler.current);
			}
			if(animateToView.current) clearTimeout(animateToView.current);
		};
	}, []);

	function getPrevSlide() {
		if (disabledInfinite && currentSlide === 0) return;
		getSlideIntoView(currentSlide, -1);
	}
	function getNextSlide() {
		if (disabledInfinite && currentSlide === noOfSlides - 1) return;
		getSlideIntoView(currentSlide, 1);
	}
	function getSlideIntoView(current: number, prevOrNext = 1, transitionOFF?: boolean) {
		const newTrackStyle = getTrackStyle({
			current,
			prevOrNext,
			transitionOFF,
			slidesPerView,
			disabledInfinite,
			slideStyle,
			noOfSlides,
			trackStyle
		});
		setCurrentSlide(current + prevOrNext);
		setTrackStyle(newTrackStyle);
		if (typeof onSlideChange === "function") {
			onSlideChange({ currentSlide: current + prevOrNext });
		}
	}
	function stopAutoPlay() {
		if (autoPlayHandler.current) {
			clearInterval(autoPlayHandler.current);
		}
	}
	function prevSlideHandler() {
		if (animating || isFitToView) return;
		getPrevSlide();
		stopAutoPlay();
	}
	function nextSlideHandler() {
		if (animating || isFitToView) return;
		getNextSlide();
		stopAutoPlay();
	}
	const { NEXT, PREV } = dataLocale;
	const pfuCarouselTrack = {
		...trackStyle,
		height: "96vh",
	};
	return (
		<CarouselMain>
			{newStyle && (
				<DotContainer>
					{children?.map((item: any, index: number) => {
						return (
							<DotItem
								key={index}
								style={currentSlide === index ? { backgroundColor: "#A2A2B8" } : {}}
								onClick={() => getSlideIntoView(index - 1)}
							></DotItem>
						);
					})}
				</DotContainer>
			)}
			{arrows && !isFitToView && !newStyle && (
				<CarouselPrev
					aria-label="carousel-prev"
					type="button"
					isPfu={isPfu}
					onClick={prevSlideHandler}
				>
					{PREV}
				</CarouselPrev>
			)}

			<Swipe next={nextSlideHandler} previous={prevSlideHandler}>
				<CarouselSlideContainer isPfu={isPfu}>
					<CarouselTrack
						data-testid="carouselTrack"
						style={isPfu ? pfuCarouselTrack : trackStyle}
					>
						{!disabledInfinite && leftMirroredSlides}
						{React.Children.map(children, (childNode, index) => {
							return (
								<CarouselSlide
									key={index}
									isPfu={isPfu}
									active={currentSlide===index}
									data-testid="carouselSlide"
									style={slideStyle}
								>
									{childNode}
								</CarouselSlide>
							);
						})}
						{!disabledInfinite && rightMirroredSlides}
					</CarouselTrack>
				</CarouselSlideContainer>
			</Swipe>

			{arrows && !isFitToView && !newStyle && (
				<CarouselNext
					aria-label="carousel-next"
					isPfu={false}
					type="button"
					onClick={nextSlideHandler}
				>
					{NEXT}
				</CarouselNext>
			)}

			{dots && !isFitToView && (
				<NavDotsContainer>
					{React.Children.map(children, (childNode, index) => {
						return (
							<NavDot
								key={index}
								active={currentSlide === index}
								data-testid="navDot"
							></NavDot>
						);
					})}
				</NavDotsContainer>
			)}
		</CarouselMain>
	);
};

export default Carousel;
