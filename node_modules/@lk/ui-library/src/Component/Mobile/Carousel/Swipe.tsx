import React, { ReactNode, useEffect, useRef, useState } from "react";

const Swipe = ({ next, previous, children }: {next: () => void, previous: () => void, children: ReactNode}) => {
	const containerRef = useRef<HTMLDivElement | null>(null);
	const [containerWidth, setContainerWidth] = useState(0);
	const [start, setStart] = useState({ pageX: 0, pageY: 0, time: Number(new Date()) });
	const [isScrolling, setIsScrolling] = useState(false);
	const [deltaX, setDeltaX] = useState(0);

	useEffect(() => {
		const $container = containerRef.current;
		if ($container) {
			const containerWidth = $container.getBoundingClientRect().width;
			setContainerWidth(containerWidth);
		}
	}, []);

	function onTouchStart(event: any) {
		setStart({
			pageX: event.touches[0].pageX,
			pageY: event.touches[0].pageY,
			time: Number(new Date()),
		});
		setIsScrolling(false);
		setDeltaX(0);
	}

	function onTouchMove(event: any) {
		if (event.touches.length > 1 || (event.scale && event.scale !== 1)) return;
		const deltaX = event.touches[0].pageX - start.pageX;
		setDeltaX(deltaX);
		if (isScrolling == null) {
			setIsScrolling(!!(
				isScrolling ||
        Math.abs(deltaX) < Math.abs(event.touches[0].pageY - start.pageY)
			));
		}
	}

	function onTouchEnd() {
		const isValidSlide =
      (Number(new Date()) - start.time < 250 && Math.abs(deltaX) > 20) ||
      Math.abs(deltaX) > containerWidth / 2;

		if (!isScrolling && isValidSlide) {
			const fn = deltaX < 0 ? next : previous;
			fn();
		}
	}

	return (
		<div
			ref={containerRef}
			data-testid="swipeContainer"
			onTouchEnd={onTouchEnd}
			onTouchMove={e => onTouchMove(e)}
			onTouchStart={e => onTouchStart(e)}
		>
			{children}
		</div>
	);
};

export default Swipe;
