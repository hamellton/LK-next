import React, { ReactNode, useEffect, useRef, useState } from "react";
import styled from "styled-components";
import PinchZoom from "./pinch-zoom";

interface Props {
  options: { draggableUnzoomed: boolean };
  children: ReactNode
}

const Container = styled.div<{ visibility: string }>`
  transform: scale(1, 1) translate(0, 0);
  width: 100%;
  height: 100vh;
  padding: 0 20px;
  display: flex;
  align-items: center;

  img {
    width: 100%;
  }

  visibility: ${(props) => props.visibility};
`;

const PinchZoomComponent: React.FC<Props> = ({ options, children }) => {
	const [visibility, setVisibility] = useState<"hidden" | "visible">("hidden");
	const containerRef = useRef<HTMLDivElement>(null);

	useEffect(() => {
		const $elements = containerRef.current;
		if ($elements) {
			new PinchZoom($elements, options);
			setTimeout(() => {
				setVisibility("visible");
			}, 50);
		}
	}, [options]);

	return (
		<Container ref={containerRef} visibility={visibility} data-testid="pinchZoomBody">
			{children}
		</Container>
	);
};

export default PinchZoomComponent;
