import React, { useMemo, useState } from "react";
import { DataType } from "../../../../Types/general";
// import { CartPrescriptionType } from "../../../V1/Cart/CartCard/CartCard.types";
import PowerTable from "../../../V1/Cart/PowerTable/PowerTable.component";
import PowerStatusMessage from "./Subcomponents/PowerStatusMessage";
import ViewUploadImage from "./Subcomponents/ViewUploadImage";
// interface EyeSectionType {
//     boxes: number,
//     sph?: string,
//     axis?: string,
//     cyl?: string,
//     ap?: string,
// }
interface PowerDetailType {
    prescriptionView: {
        left?: any,
        right?: any,
        imageFileName?: string,
        pdImageFileName?: string,
        userName?: string,
    },
    isMobileView?: boolean,
    dataLocale: DataType,
    configData: DataType
}
const PowerDetailsMain = ({ prescriptionView, isMobileView, dataLocale, configData }: PowerDetailType) => {
	const prescriptionData = useMemo(() => {
		const eyeData = prescriptionView;
		if(eyeData && (eyeData?.left || eyeData?.right)) {
			const data: {Eye: string, SPH?: string, CYL?: string, AXIS?: string, Boxes?: number}[] = [{ Eye: "L" }, { Eye: "R" }];
			const leftLensData = eyeData.left;
			if(leftLensData?.sph) data[0].SPH = leftLensData.sph;
			if(leftLensData?.cyl) data[0].CYL = leftLensData.cyl;
			if(leftLensData?.axis) data[0].AXIS = leftLensData.axis;
			if(leftLensData?.boxes) data[0].Boxes = leftLensData.boxes;
			const rightLensData = eyeData.right;
			if(rightLensData?.sph) data[1].SPH = rightLensData.sph;
			if(rightLensData?.cyl) data[1].CYL = rightLensData.cyl;
			if(rightLensData?.axis) data[1].AXIS = rightLensData.axis;
			if(rightLensData?.boxes) data[1].Boxes = rightLensData.boxes;
			return data;
		}
		return null;
	}, [prescriptionView]);
	const { imageFileName, left, right, pdImageFileName } = prescriptionView;
	// const pdValue =
	// prescriptionView?.left?.pd && !isNaN(prescriptionView.left.pd) && prescriptionView.left.pd.length !== 0;
	const isPowerTable = (left && (Object.keys(left).some(itm => itm !== "boxes" && left[itm] !== "" && left[itm] !== null && !isNaN(left[itm])) || (left.ap && left.ap !== "Call Me/Email Me for Power")) ||
    (right && (Object.keys(right).some(itm => itm !== "boxes" && right[itm] !== "" && right[itm] !== null && !isNaN(right[itm])) || (right.ap && right.ap !== "Call Me/Email Me for Power"))));
	const powerStatusMessage = configData?.POWER_STATUS_MESSAGE && JSON.parse(configData.POWER_STATUS_MESSAGE);
	const message = !isPowerTable ? (imageFileName ? (powerStatusMessage?.powerUploadText.message || dataLocale?.PRESCRIPTION_UPLOADED_WILL_ASSIST_YOU) : (powerStatusMessage?.dontKnowPowerText.message ||
        dataLocale?.DONT_KNOW_PRESCRIPTION_WILL_ASSIST_YOU)) : "";
	// const icon = !isPowerTable ? (imageFileName ? (powerStatusMessage?.powerUploadText.icon ||
	//     "https://static.lenskart.com/media/mobile/universal/assets/power-upload.svg") : (powerStatusMessage?.dontKnowPowerText.icon ||
	//     "https://static.lenskart.com/media/mobile/universal/assets/dont-know-power.svg")) : "";
	const [showUploadPresc, showUploadedPresc] = useState(false);
	const [showTable, setShowTable] = useState(true);
	const showUploadPrescModal = () => {
		showUploadedPresc(showPresc => !showPresc);
	};
	const isPowerValue = !!(imageFileName && !pdImageFileName && prescriptionView?.left?.sph);
	return (
		<div>
			{
				showUploadPresc && <ViewUploadImage showUploadPrescModal={showUploadPrescModal} imageFileName={prescriptionView.imageFileName || ""} altText={dataLocale.UPLOAD_IMG_ALT} />
			}
			{isPowerTable ? <PowerTable
				heading={{ Eye: "Eye", SPH: (prescriptionView?.left?.sph || prescriptionView?.right?.sph) ? "Sph" : "", CYL: (prescriptionView?.left?.cyl || prescriptionView?.right?.cyl) ? "Cyl" : "", Axis: (prescriptionView?.left?.axis || prescriptionView?.right?.axis) ? "Axis" : "", Boxes: "Boxes" }}
				data={prescriptionData}
				fullWidth
				userName={prescriptionView?.userName}
				showTable={showTable}
				showFunction={(e: { stopPropagation: () => void; }) => {
					setShowTable(showTable => !showTable);
					e.stopPropagation();
				}}
				dataLocale={dataLocale}
			/> : !(imageFileName && isMobileView) && <PowerStatusMessage message={message} isMobileView={!!isMobileView} showUploadPrescModal={imageFileName ? showUploadPrescModal : undefined} dataLocale={dataLocale} powerValue={isPowerValue} />}
			{/* Pd area */}
			{isMobileView ? (pdImageFileName ? <div></div> : (imageFileName && <PowerStatusMessage message={message} isMobileView={isMobileView} showUploadPrescModal={showUploadPrescModal} dataLocale={dataLocale} powerValue={isPowerValue} />)) : null}
			{/* {!(imageFileName && isMobileView) && <PowerStatusMessage message={message} isMobileView={isMobileView} showUploadPrescModal={() => null} dataLocale={dataLocale} powerValue={!!(imageFileName && !pdImageFileName && prescriptionView?.left?.sph)} />} */}
		</div>
	);
};

export default PowerDetailsMain;
