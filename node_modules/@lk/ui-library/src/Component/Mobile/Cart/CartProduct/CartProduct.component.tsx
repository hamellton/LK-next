import React, { useState } from "react";
import DeleteItem from "../../../V1/Cart/CartCard/DeleteItem";
// import PowerTable from "../../../V1/Cart/PowerTable/PowerTable.component";
import BottomSheet from "../../BottomSheet/BottomSheet.component";
import AddDeleteItem from "../AddDeleteItem/AddDeleteItem.component";
import { CardOfferBanner, CartItemSectionSep, CartQuantity, /* CloseIcon, */ CloseIconContainer,/* CloseModal,*/ DescLightDark, DuplicateItem, FinalPrice, FreeAmountText, FreePriceText, ItemDescPrice, ItemDescRow, ItemDiscountContainer, ItemFinalPriceContainer, ItemFreeText, KnowMoreContainer, KnowMoreCta, KnowMoreImage, LoyaltyImage, NoPowerMessageContainer, NoPowerMessagePrimary, NoPowerMessageSecondary, PriceDiscount, PriceFinal, ProductCardContainer, ProductCardDesc, ProductCardImage, RemoveItem, Ribbon, TextRegular } from "./CartProduct.styles";
import { CartProductType } from "./CartProduct.types";
import PowerDetailsMain from "./PowerDetailsMain";


const CartProduct = ({ id, isRTL, item, dataLocale, onDeleteClick, deleteAllCount, itemUrl, currencySymbol, /* addOnLenskartPrice, addOnMarketPrice, */ decreaseItemQtyFunc, increaseItemQtyFunc, /* handleKnowMore, knowMoreBottomSheet, setKnowMoreBottomSheet,*/ cartData,wishlist, decreaseItemQtyInCart, removeItemFromCart, configData }: CartProductType) => {
	const {
		FREE,
		QUANTITY_FULL,
		SYMBOL_COLON,
		WITH,
		AND,
		YOU_CAN_UPLOAD_PRESCRIPTION_AFTER_PAYMENT,
		NO_EXTRA_CHARGES_FOR_HIGH_POWER,
		EXTRA_DISCOUNT,
		FINAL_PRICE,
		REMOVE,
		REPEAT
	} = dataLocale;
	const [showDeleteModal, setShowDeleteModal] = useState(false);
	const [showAlert, setShowAlert] = useState(false);
	const [knowMoreBottomSheet, setKnowMoreBottomSheet] = useState<{show: boolean, imagePath: string, url: string | URL, cta: string}>({
		show: false,
		imagePath: "",
		url: "",
		cta: "",
	});
	// const [showTable, setShowTable] = useState(true);
	const handleKnowMore = (imagePath: string, url: string, cta: string) => {
		const obj = { show: true, imagePath, url: new URL(url), cta };
		setKnowMoreBottomSheet(obj);
	};
	// const prescriptionData = useMemo(() => {
	// 	const eyeData = item?.itemPrescription;
	// 	if(eyeData && (eyeData?.left || eyeData?.right)) {
	// 		const data: {Eye: string, SPH?: string, CYL?: string, AXIS?: string, Boxes?: number}[] = [{ Eye: "left" }, { Eye: "Right" }];
	// 		const leftLensData = eyeData.left;
	// 		if(leftLensData?.sph) data[0].SPH = leftLensData.sph;
	// 		if(leftLensData?.cyl) data[0].CYL = leftLensData.cyl;
	// 		if(leftLensData?.axis) data[0].AXIS = leftLensData.axis;
	// 		if(leftLensData?.boxes) data[0].Boxes = leftLensData.boxes;
	// 		const rightLensData = eyeData.right;
	// 		if(rightLensData?.sph) data[1].SPH = rightLensData.sph;
	// 		if(rightLensData?.cyl) data[1].CYL = rightLensData.cyl;
	// 		if(rightLensData?.axis) data[1].AXIS = rightLensData.axis;
	// 		if(rightLensData?.boxes) data[1].Boxes = rightLensData.boxes;
	// 		return data;
	// 	}
	// 	return null;
	// }, [item?.itemPrescription]);

	return (
		<ProductCardContainer
			loyalty={!!item?.isLoyalty}
			id={id}
		>
			{item && item?.isFree && (
				<Ribbon topLeft>
					<span>{FREE}</span>
				</Ribbon>
			)}
			<a href={itemUrl}>
				<ProductCardImage
					loyalty={!!item?.isLoyalty}
				>
					<LoyaltyImage
						alt="product"
						loyalty={!!item?.isLoyalty}
						src={
							item?.loyaltyImage ? item?.loyaltyImage : item?.itemImg
						}
					/>
				</ProductCardImage>
			</a>
			<ProductCardDesc
				loyalty={!!item?.isLoyalty}
			>
				<ItemDescRow>
					<DescLightDark descLight colorDark>
						{item.isLoyalty
							? item?.itemLabel
							: item?.itemClassification === "contact_lens"
								? item?.itemName
								: item.itemBrandName}
						{item?.itemFrameSize && <span> | {item?.itemFrameSize} </span>}
						{item?.itemFrameColor && <span> | {item.itemFrameColor}</span>}
						{item?.itemQty && item.itemQty > 1 && (
							<CartQuantity>
								({QUANTITY_FULL}
								{SYMBOL_COLON} {item?.itemQty})
							</CartQuantity>
						)}
					</DescLightDark>
					{/* && item.isLoyalty */}
					{item?.isFree ? (
						<DescLightDark descLight>
							<span>
								<s>
									<span>{currencySymbol}</span>
									<span>{item?.itemCatalogPrice?.[1]?.value}</span>
								</s>
							</span>
							<ItemFreeText>{FREE}</ItemFreeText>
						</DescLightDark>
					) : (
						<ItemDescPrice>
							{item &&
								item?.itemCatalogPrice &&
								(item?.itemCatalogPrice?.[0]?.value !== item?.itemCatalogPrice?.[1]?.value ? (
									<DescLightDark descLight colorDark>
										<DescLightDark as="span" descLight>
											<s>
												{currencySymbol}
												{item?.itemCatalogPrice?.[0]?.value}
											</s>
										</DescLightDark>
										<span style={{ marginLeft: isRTL ? 0 : "5px" }}>
											{currencySymbol}
											{item?.itemCatalogPrice?.[1]?.value}
										</span>
									</DescLightDark>
								) : (
									<DescLightDark descLight colorDark style={{ marginLeft: isRTL ? 0 : "5px" }}>
										<span>{currencySymbol}</span>
										<span>{item?.itemCatalogPrice?.[1]?.value}</span>
									</DescLightDark>
								))}
						</ItemDescPrice>
					)}
				</ItemDescRow>
				{item && item?.itemOptions && item?.itemOptions?.length > 0 && (
					<ItemDescRow>
						<DescLightDark descLight colorDark>
							{item?.itemOptions?.[0]?.label}
							{item?.itemOptions?.length > 1 && (
								<span>
									{WITH} {item?.itemOptions?.[1]?.label}
								</span>
							)}
							{item?.itemOptions?.length > 2 && (
								<span>
									{AND} {item?.itemOptions?.[2]?.label}
								</span>
							)}
						</DescLightDark>
						{/* &&
							item?.isLoyalty */}
						{item &&
							item?.isFree &&
							// item?.message &&
							item?.itemQty === 1 ? (
								<ItemDescPrice>
									<DescLightDark as="span" descLight style={{ marginRight: "5px" }}>
										{item.addOnPriceObj?.itemPrice !== 0 && (
											<s>
												{currencySymbol}
												{item.addOnPriceObj?.itemPrice}
											</s>
										)}
									</DescLightDark>
									<ItemFreeText>{FREE}</ItemFreeText>
								</ItemDescPrice>
							) : (
								<ItemDescPrice>
									{item?.addOnPriceObj?.strikeOffPrice && item?.addOnPriceObj?.itemPrice && item?.addOnPriceObj?.strikeOffPrice > item?.addOnPriceObj?.itemPrice ? (
										<DescLightDark as="span" descLight>
											<s>
												{currencySymbol}
												{item?.addOnPriceObj?.strikeOffPrice}
											</s>
											<DescLightDark as="span" colorDark>
												{currencySymbol}
												{item?.addOnPriceObj?.itemPrice}
											</DescLightDark>
										</DescLightDark>
									) : (
										<DescLightDark as="span" descLight colorDark>
											{currencySymbol}
											{item?.addOnPriceObj?.itemPrice}
										</DescLightDark>
									)}
								</ItemDescPrice>
							)}
					</ItemDescRow>
				)}

				{item &&
					item?.itemPrescriptionView &&
					!item?.isLoyalty &&
					item?.itemPowerRequired !== "POWER_NOT_REQUIRED" && (
					<>
						{item?.itemPrescriptionView &&
								(item?.itemLensType && item?.itemLensType !== "FRAME_ONLY" ? (
									<>
										{item?.itemPowerRequired === "POWER_SUBMITTED" ? (
											// <PowerTable
											// 	heading={{ Eye: "Eye", SPH: (item?.itemPrescription?.left?.sph || item?.itemPrescription?.right?.sph) ? "Sph" : "", CYL: (item?.itemPrescription?.left?.cyl || item?.itemPrescription?.right?.cyl) ? "Cyl" : "", Axis: (item?.itemPrescription?.left?.axis || item?.itemPrescription?.right?.axis) ? "Axis" : "", Boxes: "Boxes" }}
											// 	data={prescriptionData}
											// 	fullWidth
											// />
											<PowerDetailsMain
												isMobileView={true}
												dataLocale={dataLocale}
												configData={configData}
												prescriptionView={item.itemPrescriptionView}
											/>
											// <PowerDetails
											// 	cartView
											// 	newStyle
											// 	dataLocale={dataLocale}
											// 	prescription={item?.prescriptionView}
											// 	showUploadPrescModal={showUploadPrescModal}
											// 	view="mobile"
											// />
										) : (
											<>
												<NoPowerMessageContainer>
													<NoPowerMessagePrimary>
														{YOU_CAN_UPLOAD_PRESCRIPTION_AFTER_PAYMENT}
													</NoPowerMessagePrimary>
													<NoPowerMessageSecondary>
														{NO_EXTRA_CHARGES_FOR_HIGH_POWER}
													</NoPowerMessageSecondary>
												</NoPowerMessageContainer>
											</>
										)}
									</>
								) : null)}
					</>
				)}
				<CartItemSectionSep></CartItemSectionSep>
				<ItemFinalPriceContainer>
					{item?.itemDiscountedPrice && (

						<ItemDiscountContainer>
							<TextRegular>{EXTRA_DISCOUNT}</TextRegular>
							{item?.price?.value && item?.itemQty && item?.itemDiscountedPrice?.value !== undefined && item?.itemDiscountedPrice?.value >= 0 ? <PriceDiscount bold>
								-{currencySymbol}
								{((item?.price?.value * item?.itemQty) - (item?.itemDiscountedPrice?.value || 0))
									?.toFixed(2)
									?.replace(/[.,]00$/, "")}
							</PriceDiscount> : null}
						</ItemDiscountContainer>
					)}
					<ItemDiscountContainer>
						<FinalPrice>{FINAL_PRICE}</FinalPrice>
						<PriceFinal bold>
							{item?.isFree || (item?.itemDiscountedPrice && item?.itemDiscountedPrice?.value === 0) ? (
								<>
									{item?.itemDiscountedPrice?.value !== 0 && (
										<s>
											<FreeAmountText>
												<span>{currencySymbol}</span>
												<span>
													{item?.itemDiscountedPrice
														? item?.itemDiscountedPrice?.value
														: (item?.price?.value && item?.itemQty ? item?.price?.value * item?.itemQty : 0)}
												</span>
											</FreeAmountText>
										</s>
									)}

									<FreePriceText>{FREE}</FreePriceText>
								</>
							) : (
								<>
									<span>{currencySymbol}</span>
									<span>
										{item?.itemDiscountedPrice
											? item?.itemDiscountedPrice?.value
											: (item?.price?.value && item?.itemQty ? (item?.price?.value * item?.itemQty) : 0)}
									</span>
								</>
							)}
						</PriceFinal>
					</ItemDiscountContainer>
				</ItemFinalPriceContainer>
				<CartItemSectionSep></CartItemSectionSep>
				{item?.itemQty === 1 || item.itemClassification === "contact_lens" ? (
					<ItemDescRow>
						<RemoveItem onClick={() => setShowDeleteModal(true)}>
							{REMOVE}
						</RemoveItem>
						{!item?.isLoyalty &&
							item.itemClassification !== "contact_lens" && (
							<DuplicateItem onClick={increaseItemQtyFunc}>
								{REPEAT}
							</DuplicateItem>
						)}

						{item?.isLoyalty && item?.extraDetails && (
							<RemoveItem
								onClick={() =>
									handleKnowMore(
										item?.extraDetails?.images?.knowMore || "",
										item?.extraDetails?.detailsUrl || "",
										item?.extraDetails?.detailsButtonText || ""
									)
								}
							>
								{item?.extraDetails?.detailsButtonText}
							</RemoveItem>
						)}
					</ItemDescRow>
				) : (
					<>
						<ItemDescRow>
							<DescLightDark descLight colorDark>{QUANTITY_FULL}</DescLightDark>
							<AddDeleteItem
								quantity={item?.itemQty}
								onDecrement={decreaseItemQtyFunc}
								onIncrement={increaseItemQtyFunc}
							/>
						</ItemDescRow>
					</>
				)}
			</ProductCardDesc>
			{!item?.isLoyalty && item.webHeadline && !item?.offerMessage && (
				<CardOfferBanner style={{ backgroundColor: item.webColorCode }}>
					{item.webHeadline}
				</CardOfferBanner>
			)}
			{!item?.isLoyalty && item?.offerMessage && item?.isFree && (
				<CardOfferBanner>{item?.offerMessage}</CardOfferBanner>
			)}
			{knowMoreBottomSheet?.show && (
				<BottomSheet
					backdrop
					borderRadius
					darkBack
					expanded
					onClickBackdrop={() => {
						setKnowMoreBottomSheet({ ...knowMoreBottomSheet, show: false });
					}}
				>
					<KnowMoreContainer>
						<CloseIconContainer
							onClick={() => {
								setKnowMoreBottomSheet({ ...knowMoreBottomSheet, show: false });
							}}
						>
							<span>
								<img
									alt="close"
									src="https://static1.lenskart.com/media/desktop/img/DesignStudioIcons/CrossBlue.svg"
								/>
							</span>
						</CloseIconContainer>
						<KnowMoreImage>
							<span>
								<img alt="loyalty-services-details" src={knowMoreBottomSheet?.imagePath} />
							</span>
						</KnowMoreImage>
						<a href={`${(typeof knowMoreBottomSheet.url !== undefined && typeof knowMoreBottomSheet.url !== "string") ? knowMoreBottomSheet?.url?.pathname : (knowMoreBottomSheet?.url || "")}`} rel="noreferrer" target="_blank">
							<KnowMoreCta>{knowMoreBottomSheet?.cta}</KnowMoreCta>
						</a>
					</KnowMoreContainer>
				</BottomSheet>
			)}
			{showDeleteModal && (
				<BottomSheet
					backdrop
					borderRadius
					expanded
					darkBack
					onClickBackdrop={() => {
						setShowDeleteModal(false);
					}}
				>
					{/* {showDeleteModal && (
						<CloseModal onClick={() => setShowDeleteModal(false)}>
							<CloseIcon>
								<span>
									<img
										alt="close"
										src="https://static1.lenskart.com/media/desktop/img/DesignStudioIcons/CrossBlue.svg"
										style={{ maxWidth: "32px" }}
									/>
								</span>
							</CloseIcon>
						</CloseModal>
					)} */}
					<DeleteItem
						cartData={cartData}
						currencySymbol={currencySymbol}
						data={item}
						itemImg={item.itemImg}
						dataLocale={dataLocale}
						onDeleteClick={onDeleteClick}
						deleteAllCount={deleteAllCount}
						wishlist={wishlist}
						decreaseItemQtyInCart={decreaseItemQtyInCart}
						removeItemFromCart={removeItemFromCart}
						setShowAlert={setShowAlert}
						setShowDeleteModal={setShowDeleteModal}
						showAlert={showAlert}
					/>
				</BottomSheet>
			)}
		</ProductCardContainer>
	);
};

export default CartProduct;
