import { useState, useEffect } from "react";

type ValidationFunction<T> = (value: T) => string | undefined;
type Validations<T> = {
  [key in keyof T]?: ValidationFunction<T[key]>;
};
type FormState<T> = {
  data: T;
  errors: Partial<{ [key in keyof T]: string }>;
  touched: Partial<{ [key in keyof T]: boolean }>;
};

function useForm<T>(initialData: T, validations?: Validations<T>) {
	const [formState, setFormState] = useState<FormState<T>>({
		data: initialData,
		errors: {},
		touched: {},
	});
	const [isFormValid, setIsFormValid] = useState(false);

	useEffect(() => {
		if (validations) {
			validateAll();
		}
	}, [formState.data]);

	useEffect(() => {
		if (Object.keys(formState.errors).length) setIsFormValid(true);
		else setIsFormValid(false);
	}, [formState.errors]);

	function setValue<K extends keyof T>(key: K, value: T[K]) {
		setFormState((prevState) => ({
			data: {
				...prevState.data,
				[key]: value,
			},
			errors: {
				...prevState.errors,
				[key]: undefined,
			},
			touched: {
				...prevState.touched,
				[key]: true,
			},
		}));
	}

	function setTouched<K extends keyof T>(key: K, touched: boolean) {
		setFormState((prevState) => ({
			...prevState,
			touched: {
				...prevState.touched,
				[key]: touched,
			},
		}));
	}

	function validateAll() {
		const newErrors: Partial<{ [key in keyof T]: string }> = {};
		for (const key in formState.data) {
			if (validations && validations[key]) {
				const error = validations[key]!(formState.data[key]);
				if (error) {
					newErrors[key] = error;
				}
			}
		}
		setFormState((prevState) => ({
			...prevState,
			errors: newErrors,
		}));
	}

	function validate<K extends keyof T>(key: K) {
		if (validations && validations[key]) {
			const error = validations[key]!(formState.data[key]);
			setFormState((prevState) => ({
				...prevState,
				errors: {
					...prevState.errors,
					[key]: error,
				},
			}));
		}
	}

	function onSubmit(callback: (data: T) => void) {
		return (event: React.FormEvent<HTMLFormElement>) => {
			event.preventDefault();
			event.stopPropagation();
			if (validations) {
				validateAll();
				Object.keys(formState.data as any).map((key) => {
					setTouched(key as keyof T, true);
					return key;
				});
				if (Object.values(formState.errors).some((error) => error)) {
					return;
				}
			}
			callback(formState.data);
		};
	}

	return {
		data: formState.data,
		setValue,
		errors: formState.errors,
		touched: formState.touched,
		setTouched,
		validate,
		validateAll,
		onSubmit,
		isFormValid
	};
}

export default useForm;
