
import React, { useEffect, useRef, useState } from "react";
import * as Icons from "../../../Icons/index";
import { getNumberLengthFromCode, validateNumber } from "../../../helpers";
import { TextTypeENUM, TypographyENUM } from "../../../Types/general";
import Toast from "../../Common/Toast";
import { InputFieldContainer, TextField } from "../../V1/Auth";
import PhoneCodeDropdown from "../../V1/PhonecodeDropdown";
import { SignInWrapper, LogInSignUpContainer, MobileFiledWithLabelWhatsappWrapper, MobileFiledWithLabelWrapper, Label, InputFiledWrapper, PhoneCodeDropdownWrapper, WhatsAppCheckboxWithLabel, InputCheckbox, WhatsAppText, Change, InlineLoader, OtpInputField, SignInPageDetailsContainer, ButtonWrapper, LoginMobileWrapper, ContinueButton, Error, OtpVerified, EditBtn, Timer, ResendOtpTimer, IconWrapper } from "./styles";
import { SignInTypes } from "./types";

const SignIn = ({ dataLocale, supportMultipleCountries, phoneCodeConfigData, isRTL = false, incCountryCodeFont, countryCode, signInStatus, loaderImageLink, resetSignInStatus, onProceed, isAuthenticate, OtpTime = 30, whatsAppOpting }: SignInTypes) => {
	const [showOTP, setShowOtp] = useState<boolean>(false);
	const [currentPhoneCode, setCurrentPhoneCode] = useState<string>(countryCode);
	const [inputValue, setInputValue] = useState<string>("");
	const [otpState, setOtpState] = useState({ otpDigits: 4, otpValue: ["", "", "", ""] });
	const [inputFocusedOut, setInputFocused] = useState(false);
	const [error, setError] = useState("");
	const [whatsAppChecked, setWhatsAppChecked] = useState<boolean>(false);
	const [timer, setTimer] = useState(OtpTime);
	const timerRef = useRef<ReturnType<typeof setInterval>>();
	const OnCLickWhatsAppOptingValue = () => {
		setWhatsAppChecked(!whatsAppChecked);
		whatsAppOpting(!whatsAppChecked);
	};
	let which: any;
	const startTimer = () => {
		setTimer(OtpTime);
		timerRef.current = setInterval(() => {
			setTimer((time: number) => {
				if (time === 0) {
					clearInterval(timerRef.current);
					return 0;
				}
				else return time - 1;
			});
		}, 1000);
	};
	function resendOTP() {
		onProceed(typeof inputValue === "string" ? inputValue : inputValue, undefined, undefined);
	}
	const clickHandler = () => {
		if (resetSignInStatus) resetSignInStatus();
		onProceed(typeof inputValue === "string" ? inputValue : inputValue, undefined, supportMultipleCountries ? currentPhoneCode : undefined);
	};
	function changeInputValue(e: any) {
		setInputValue(e.target.value);
		setInputFocused(false);
		if (!showOTP && inputFocusedOut) {
			const error = validateNumber(e.target.value, countryCode, undefined, dataLocale, true);
			setError(error);
		}
	}
	function validateErrors(e: any, cb: (...props: any) => void) {
		let error = "";
		if (!showOTP) {
			error = validateNumber(inputValue, countryCode, undefined, dataLocale, true);
		}
		setError(error);
		if (!error) cb(e);
	}
	const onKeyUpHandler = (e: any) => {
		if (e.target.value.length === 0 || isNaN(Number(e.target.value)) || e.target.value.length > getNumberLengthFromCode(countryCode)) {
			if (e.target.value === "") return;
		}
		else {
			if (e.target.value === "" || validateNumber(e.target.value, countryCode, undefined, dataLocale, true)) return;
		}
		e.preventDefault();

		if (e.keyCode === 13) {
			validateErrors(e, clickHandler);
		}
	};
	const updatePasswordValue = (ev: any) => {
		const next = ev.target.nextElementSibling;
		const previous = ev.target.previousElementSibling;
		const value = ev.target.value;
		const id = ev.target.id;
		if (which !== 8) {
			const arr = otpState.otpValue;
			arr[parseInt(id, 10)] = value;
			setOtpState({ ...otpState, ...arr });

			setOtpState({ ...otpState, otpValue: ([] as string[]).concat(otpState.otpValue) });

			if (next) {
				next.focus();
			}
		} else if (which === 8) {
			const arr = otpState.otpValue;
			arr[parseInt(id, 10)] = "";
			setOtpState({ ...otpState, ...arr });

			setOtpState({ ...otpState, otpValue: ([] as string[]).concat(otpState.otpValue) });

			if (next || previous) {
				if (which === 8) {
					if (previous) previous.focus();
				} else if (next) {
					next.focus();
				}
			}
		}
	};
	const autoSubmitOTP = () => {
		if (resetSignInStatus) resetSignInStatus();
		setError("");
		onProceed(typeof inputValue === "string" ? inputValue : inputValue, otpState.otpValue.join(""), currentPhoneCode);
	};
	const validateOtp = (otp: string) => {
		const numCheck = (/^[0-9]+$/);
		if (otp && otp.length === 4 && numCheck.test(otp)) {
			return "";
		} else {
			return "Incorrect otp";
		}
	};
	const handleKeyUpOnInput = (ev: any) => {
		//ev.preventDefault();
		ev.persist();
		const id = ev.target.id;
		// const value = ev.target.value;
		if (ev.which === 13) return;
		which = ev.which;
		if (ev.which !== 8) {
			if (otpState.otpValue[parseInt(id, 10)]) {
				if (id < 4) {
					if (parseInt(id, 10) === 3) {
						const val = otpState.otpValue;
						val[parseInt(id, 10)] = String.fromCharCode(ev.keyCode);
						setOtpState({ ...otpState, ...val });
					} else {
						const val = otpState.otpValue;
						val[parseInt(id, 10) + 1] = String.fromCharCode(ev.keyCode);
						setOtpState({ ...otpState, ...val });
					}
				}
				const next = ev.target.nextElementSibling;
				const previous = ev.target.previousElementSibling;

				setOtpState({ ...otpState, otpValue: ([] as string[]).concat(otpState.otpValue) });

				if (next || previous) {
					if (ev.which === 8) {
						if (previous) window.setTimeout(() => previous.focus(), 10);
					} else if (next) window.setTimeout(() => next.focus(), 10);
				}
			}
		} else {
			const previous = ev.target.previousElementSibling;
			if (previous) window.setTimeout(() => previous.focus(), 10);
		}
		if (!showOTP) {
			if (ev.target.value === "") return;
		} else if (showOTP) {
			if (ev.target.value === "" || validateOtp(ev.target.value)) return;
		}
		if (ev.keyCode === 13) {
			validateErrors(ev, clickHandler);
		}
	};
	const renderOtpFiled = () => {
		const inputBoxes = [];
		for (let index = 0; index < otpState.otpDigits; index += 1) {
			inputBoxes.push(
				<OtpInputField
					key={`otp_${index}`}
					autoComplete="off"
					autoFocus={index === 0}
					id={`${index}`}
					maxLength={1}
					type="number"
					value={otpState.otpValue[index]}
					onChange={(e: any) => updatePasswordValue(e)}
					onKeyDown={ev => handleKeyUpOnInput(ev)}
					isError={signInStatus.isError}
					isSuccess={isAuthenticate}
				/>
			);
		}
		return inputBoxes;
	};
	const changeMobileNumber = () => {
		setShowOtp(false);
		resetSignInStatus();
		setOtpState({ ...otpState, otpValue: ["", "", "", ""] });
		setTimer(OtpTime);
	};
	useEffect(() => {
		if (showOTP) startTimer();
	}, [showOTP]);
	useEffect(() => {
		if (!otpState.otpValue.includes("")) {
			autoSubmitOTP();
		}
	}, [otpState.otpValue]);
	const loginWithOtp = () => {
		setShowOtp(true);
		onProceed(typeof inputValue === "string" ? inputValue : inputValue, undefined, currentPhoneCode);
	};
	return <SignInWrapper>
		{!showOTP && <SignInPageDetailsContainer>
			<LoginMobileWrapper>
				<LogInSignUpContainer>{dataLocale.LOG_IN}/{dataLocale.SIGN_UP}</LogInSignUpContainer>
				<MobileFiledWithLabelWhatsappWrapper>
					<MobileFiledWithLabelWrapper>
						<Label>{dataLocale.ENTER_VALID_10_DIGIT_NUMBER}</Label>
						<InputFiledWrapper>
							<InputFieldContainer font={TypographyENUM.lkSansMedium} gapZero={false} forceLTR={false} isFullWidth={true} isError={Boolean(error || (signInStatus.isError && signInStatus.errorMessage))} subText={error || (signInStatus.isError && signInStatus.errorMessage ? signInStatus.errorMessage : "")} isMobileView={true}>
								{phoneCodeConfigData && supportMultipleCountries && <PhoneCodeDropdownWrapper top={incCountryCodeFont ? "0" : "2"}><PhoneCodeDropdown isMobileView={true} width={""} showSvgArrow={true} incCountryCodeFont={incCountryCodeFont} availableCountries={phoneCodeConfigData.availableCountries} currentPhoneCode={currentPhoneCode} onChange={(newPhoneCode: string) => setCurrentPhoneCode(newPhoneCode)} /></PhoneCodeDropdownWrapper>}
								<TextField font={TypographyENUM.lkSansMedium} isRTL={isRTL} value={inputValue} type={TextTypeENUM.number} onChange={(e) => changeInputValue(e)
								} placeholder={"8834678909"} name="mobile" onKeyUpChange={onKeyUpHandler} onBlur={(e) => { validateErrors(e, () => null); setInputFocused(true); }} maxLength={getNumberLengthFromCode(countryCode)}>
									{!supportMultipleCountries ? countryCode : ""}
								</TextField>
							</InputFieldContainer>
						</InputFiledWrapper>
					</MobileFiledWithLabelWrapper>
					<WhatsAppCheckboxWithLabel>
						<InputCheckbox type="checkbox" checked={whatsAppChecked} onChange={() => OnCLickWhatsAppOptingValue()} />
						<WhatsAppText>{dataLocale.SEND_ME_TEXT_WHATSAPP}</WhatsAppText>
					</WhatsAppCheckboxWithLabel>
				</MobileFiledWithLabelWhatsappWrapper>
			</LoginMobileWrapper>
			<ButtonWrapper>
				<ContinueButton disabled={Boolean(error || inputValue.length !== getNumberLengthFromCode(countryCode))} onClick={() => loginWithOtp()}>{dataLocale.CONTINUE}</ContinueButton>
			</ButtonWrapper>
		</SignInPageDetailsContainer>}
		{showOTP && <><LogInSignUpContainer>{dataLocale.ENTER_OTP}</LogInSignUpContainer>
			<MobileFiledWithLabelWhatsappWrapper>
				<MobileFiledWithLabelWrapper>
					<Label>{dataLocale.OTP_SENT_TO} {currentPhoneCode}{inputValue} <Change onClick={() => changeMobileNumber()}>{" . "}{dataLocale.CHANGE}</Change></Label>
					<InputFiledWrapper>
						{signInStatus.isLoading ? <InlineLoader alt="Loading..." src={loaderImageLink} /> :
							(renderOtpFiled())
						}
					</InputFiledWrapper>
					{signInStatus.isError && <Error>{signInStatus.errorMessage}</Error>}
					{isAuthenticate && <IconWrapper><Icons.OtpVerifiedIcon /> <OtpVerified>{dataLocale.OTP_VERIFIED}</OtpVerified></IconWrapper>}
					{!isAuthenticate && <div>{timer === 0 ? <EditBtn onClick={() => { startTimer(); resendOTP(); }}>{dataLocale.RESEND_OTP} </EditBtn> : <ResendOtpTimer>{dataLocale.RESEND_OTP_IN} <Timer>{`00:${timer.toString().length > 1 ? timer : `0${timer}`}`} {dataLocale.SEC}</Timer> {signInStatus.otpSent && <><br /> {dataLocale.OTP_HAS_BEEN_SENT_SUCCESSFULLY} </>}  </ResendOtpTimer>}</div>}
				</MobileFiledWithLabelWrapper>
			</MobileFiledWithLabelWhatsappWrapper>
			{signInStatus.otpSent && <Toast textColor={"#ffffff"} color={"#000000"} text={dataLocale.OTP_HAS_BEEN_SENT_SUCCESSFULLY} />}
		</>}
	</SignInWrapper>;
};

export default SignIn;