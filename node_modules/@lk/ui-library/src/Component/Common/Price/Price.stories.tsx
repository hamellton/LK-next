import React from "react";
import { ComponentMeta, ComponentStory } from "@storybook/react";
import { generateArgTypes } from "../../../StorybookHelper";
import {
	ComponentSizeENUM,
	ThemeENUM,
	TypographyENUM,
} from "../../../Types/general";
import Pricing from "./Price.component";

export default {
	title: "Components/common/Pricing",
	component: Pricing,
	argTypes: {
		id: generateArgTypes({
			type: "string",
			required: true,
			description: "String used as unique identifier",
			category: "General",
		}),
		componentSize: generateArgTypes({
			type: "string",
			required: false,
			description: "Size of the component",
			category: "General",
			defaultValue: ComponentSizeENUM.small,
			control: "radio",
			options: ComponentSizeENUM,
		}),
		font: generateArgTypes({
			type: "string",
			required: true,
			description: "Typography of the component",
			category: "General",
			defaultValue: TypographyENUM.serif,
			control: "radio",
			options: TypographyENUM,
		}),
		// isSpecialPrice: generateArgTypes({
		// 	type: "boolean",
		// 	required: true,
		// 	description: "Special price or not",
		// 	category: "Component",
		// 	defaultValue: "false",
		// }),
		// price: generateArgTypes({
		// 	type: "string",
		// 	required: true,
		// 	description: "price",
		// 	category: "Component",
		// 	defaultValue: "999",
		// }),
		// specialPrice: generateArgTypes({
		// 	type: "string",
		// 	required: false,
		// 	description: "price",
		// 	category: "Component",
		// 	defaultValue: "999",
		// }),
		// discountedPriceColor: generateArgTypes({
		// 	type: "string",
		// 	required: false,
		// 	description: "color of discounted price",
		// 	category: "Component",
		// 	defaultValue: "var(--dark-blue-100)",
		// }),
		currencyCode: generateArgTypes({
			type: "string",
			required: true,
			description: "currency code",
			category: "Component",
			defaultValue:"$",
		}),
		strikeThroughColor: generateArgTypes({
			type: "string",
			required: false,
			description: "color of strikethrough",
			category: "Component",
			defaultValue: "var(--dark-blue-10)",
		}),
		isDiscountPriceBigger: generateArgTypes({
			type: "boolean",
			required: true,
			description: "is discounterd price bigger",
			category: "Component",
			defaultValue: false,
		}),
		styleTheme: generateArgTypes({
			type: "string",
			required: true,
			description: "Theme of the component",
			category: "Component",
			defaultValue: ThemeENUM.primary,
			control: "radio",
			options: ThemeENUM,
		}),
		isRTL: generateArgTypes({
			type: "boolean",
			required: true,
			description: "position of left to right",
			category: "Component",
			defaultValue: false,
		}),
	},
} as ComponentMeta<typeof Pricing>;

const Template: ComponentStory<typeof Pricing> = (args) => <Pricing {...args} />;

export const Overview = Template.bind({});
Overview.args = {
	id: "price",
	actualPrice: 2999,
	finalPrice: 999,
	hasSpecialPrice: true,
	componentSize: ComponentSizeENUM.small,
	font: TypographyENUM.defaultBook,
	strikeThroughColor: "var(--dark-blue-10)",
	styleTheme: ThemeENUM.primary,
	currencyCode: "$",
	finalPriceColor:"var(--dark-blue-100)",
	actualPriceColor:"var(--dark-blue-10)",
	isDiscountPriceBigger: true
};

export const SimplePrice = Template.bind({});
SimplePrice.parameters = {
	controls: {
		exclude: ["specialPrice", "isSpecialPrice", "strikeThroughColor"],
	},
};
SimplePrice.args = {
	...Overview.args,
	id: "simple-price",
	hasSpecialPrice: false,
};
export const SpecialPrice = Template.bind({});
SpecialPrice.parameters = {
	controls: {
		exclude: ["isSpecialPrice"],
	},
};
SpecialPrice.args = {
	...Overview.args,
	id: "special-price",
};
