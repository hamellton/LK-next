import React from "react";
import { SwatchTypes } from "./Swatch.types";
import { SwatchWrapper, SwatchItem, SwatchItemWrapper } from "./Swatch.styles";
import { useState } from "react";
import { action } from "@storybook/addon-actions";
import { ComponentSizeENUM, DeviceTypes } from "../../../Types/general";

const Swatch = ({ id, colors, updateImageURL,productImageURL, componentSize = ComponentSizeENUM.small, selectedIndexColor, selectedIndex, hoverRotate, isRTL = false, device, setproductUrlMobile, triggerCTAGA }: SwatchTypes) => {

	const [selected, setSelected] = useState<boolean[]>(colors.map((item,index)=>selectedIndex===index? true:false));

	const handleHover = (
		e: React.MouseEvent<HTMLSpanElement, MouseEvent>,
		idx: number,
		color:string,
		secondaryColor:string,
		imageURL?:string,
		onHover?:boolean,
	) => {
		const newArr = selected.map((item,index)=>selectedIndex===index? true:false);
		if(onHover){
			newArr[idx] = true;
		}
		if(updateImageURL)
			updateImageURL(imageURL);
		setSelected(newArr);
		action("color and image changed")(e, { primaryColorCode: color, secondaryColorCode: secondaryColor, imageCode:imageURL });

	};

	if (colors && colors.length > 0) {
		return (
			<SwatchWrapper data-testid="swatch-test" id={id} isRTL={isRTL}>
				{colors.map((item, idx) => (
					<SwatchItemWrapper
						key={idx}
						href={device !== DeviceTypes.MOBILE ? item.productURL : ""}
						target={ id === "product-swatch-plp" ? "_blank" : ""}
						isSelected={selectedIndex==idx}
						hoverRotate={hoverRotate}
						selected={selected[idx]}
						selectedIndexColor={selectedIndexColor}
						onClick={device === DeviceTypes.MOBILE && updateImageURL ? (event) => {
							event.preventDefault();
							event.stopPropagation();
							updateImageURL(item?.productImage.url || "");
							setproductUrlMobile?.(item.productURL);
							triggerCTAGA();
						} : (event) => {
							event.stopPropagation();
							triggerCTAGA();
						}
						}
						onMouseOver={(e) => handleHover(e, idx, item.color, item.secondaryColor || "", item.productImage.url, true)}
						onMouseOut={(e) => handleHover(e, idx, item.color, item.secondaryColor|| "", productImageURL, false)}
					>
						<SwatchItem
							size={componentSize}
							data-testid="swatch-item"
							color={item.color}
							secondaryColor={item.secondaryColor || ""}
							glassColor={item.glassColor ? item.glassColor : ""}
							hoverRotate={hoverRotate}
							selected={selected[idx]}
							img={item.frameColorImage}
						/>
					</SwatchItemWrapper>
				))}
			</SwatchWrapper>
		);
	} else {
		return null;
	}
};

export default Swatch;
