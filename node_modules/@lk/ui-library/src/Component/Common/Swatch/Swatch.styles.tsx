import styled from "styled-components";
import { ComponentSizeENUM } from "../../../Types/general";

const getComponentSize = (size: ComponentSizeENUM) => {
	if (size === ComponentSizeENUM.small) {
		return "var(--fs-14)";
	} else if (size === ComponentSizeENUM.medium) {
		return "var(--fs-22)";
	} else {
		return "var(--fs-24)";
	}
};

export const SwatchWrapper = styled.div<{isRTL: boolean}>`
	display: flex;
	flex-direction: ${props => props.isRTL ? "row-reverse" : "row"};
	// overflow-x: auto;
	white-space: nowrap;
	gap:4px;
	padding:0 4px;
	// overflow:hidden;
	flex-wrap: wrap;
`;

export const SwatchItem = styled.span<{
	color: string
	secondaryColor: string
	glassColor: string
	selected: boolean
	size:ComponentSizeENUM
	hoverRotate:boolean
	img: string
}>`
	min-height: ${(props) => getComponentSize(props.size)};
	min-width: ${(props) => getComponentSize(props.size)};
	border-radius: 50%;
	display:block;
	--primary-color: ${ (props) => props.color};
	--secondary-color: ${ (props) => props.secondaryColor ? props.secondaryColor : props.color};
	// background-color: ${props => props.color ? props.color : "#fff"};
	background: ${ props => props.img ? `url(${props.img})` : "linear-gradient( 180deg, var(--primary-color) 50%, var(--secondary-color) 50% )"};
	background-size: cover;
	// background: linear-gradient( 180deg, var(--primary-color) 50%, var(--secondary-color) 50% );
	position: relative;
	// &::after {
	// 	content: "";
	// 	background-color: green;
	// 	height: 50%;
	// 	width: 100%;
	// 	position: absolute;
	// 	border-radius: 50% 50% 0 0;
	// 	transform: translate(-50%, -50%);
	// 	top:25%;
	// 	left:50%
	// }
	// background: ${props => props.glassColor ? `linear-gradient(180deg, ${props.color}, ${props.color} 50%, ${props.glassColor} 50% )` : `${props.color}`};
	pointer-events: auto;
	cursor: var(--pointer);
	box-sizing: border-box;
	border: 1.5px solid var(--border);
	&:hover{
  		animation: ${props => props.hoverRotate ? "anti-spin 2s infinite linear" : "none"};
	}
	${props => props.hoverRotate &&
	`@keyframes anti-spin {
		100% { transform: rotate(-1turn); }
	}`}
`;

export const SwatchItemWrapper = styled.a<{selected: boolean, selectedIndexColor:string, hoverRotate:boolean, isSelected:boolean}>`
	display:${(props) => props.selected ? "block" : "none"}
	height:max-content;
	width:max-content;
	border-radius: 50%;
	box-shadow: 0 1px 2px var(--border), 0 0 0 1.5px var(--border);
	border: ${(props) => props.selected ? `1px solid ${props.selectedIndexColor}` : "1px solid var(--border)"};
	background-color: var(--transparent);
	&:hover{
		border-style:${props => props.hoverRotate && !props.isSelected ? "dashed" : "solid"};
  		animation: ${props => props.hoverRotate ? "spin 2s infinite linear" : "none"};
	}
	${props => props.hoverRotate &&
	`@keyframes spin {
		100% { transform: rotate(1turn); }
	}`}
`;
