import React, { useCallback, useEffect, useState } from "react";
import ModalBody from "./ModalBody";
import ModalTitle from "./ModalTitle";
import ModalHeader from "./ModalHeader";
import { ModalProps, Position } from "./Modal.types";
import { Backdrop, ModalDialog, ModalWrapper } from "./styles";
import ReactDom from "react-dom";
import { useTransition, animated } from "react-spring";

function Modal(props: ModalProps) {
	const {
		show,
		dialogClassName,
		dialogCss,
		children,
		backdropClassName,
		keyboard,
		bsSize,
		position,
		onHide,
		onBackdropClick,
	} = props;
	const [bsSizeLargeAvailable, setBsSizeLargeAvailable] = useState(false);
	const [showComponent, setShowComponent] = useState(false);

	// Function to get the transform value for smooth transitions based on Modal positions.
	const getTransform = () => {
		if (position === Position.top || !position) return "translateY(-50%)";
		else if (position === Position.bottom) return "translateY(50%)";
		else if (position === Position.left) return "translateX(-50%)";
		else if (position === Position.right) return "translateX(50%)";
	};

	const dialogTransitions = useTransition(show, {
		from: { opacity: 0, transform: getTransform() },
		enter: { opacity: 1, transform: "translateY(0px)" },
		leave: { opacity: 0, transform: getTransform() },
	});

	const backdropTransitions = useTransition(show, {
		from: { opacity: 0 },
		enter: { opacity: 1 },
		leave: { opacity: 0 }
	});


	const handleKeyClose = useCallback((e: KeyboardEvent) => {
		if (e.key === "Escape" && onHide) {
			return onHide();
		}
	}, [onHide]);

	useEffect(() => {
		setShowComponent(true);
	}, []);

	useEffect(() => {
		if (bsSize === "large" || bsSize === "lg")
			setBsSizeLargeAvailable(true);
		else
			setBsSizeLargeAvailable(false);
		if (keyboard) {
			window.addEventListener("keydown", e => handleKeyClose(e));
		}
		return () => window.removeEventListener("keydown", handleKeyClose);
	}, [keyboard, bsSize]);

	if (showComponent) {
		return ReactDom.createPortal(
			<ModalWrapper position={position}>
				{backdropTransitions((style, item) => item && (
					<animated.div style={{ ...style, zIndex: 1024, position: "fixed", top: 0, left: 0, right: 0, bottom: 0 }}>
						<Backdrop onClick={() => onBackdropClick?.()} className={`fade modal-backdrop in ${backdropClassName || ""}`}></Backdrop>
					</animated.div>
				))}
				{dialogTransitions((style, item) => item && (
					<animated.div
						style={style}
						className="fade in modal"
						data-testid="modal"
						role="dialog"
						tabIndex={-1}
					>
						<ModalDialog
							className={`${bsSizeLargeAvailable ? "modal-lg" : "modal"} modal-dialog ${dialogClassName}`}
							dialogCss={dialogCss}
						>
							<div className="modal-content" role="document">
								{React.Children.map(children, (child) => {
									if (React.isValidElement(child))
										return React.cloneElement(child, { onHide } as any);
								})}
							</div>
						</ModalDialog>
					</animated.div>
				))}
			</ModalWrapper>,
			document.getElementById("modal-portal") as HTMLElement
		);
	}
	return null;
}

Modal.Header = ModalHeader;
Modal.Title = ModalTitle;
Modal.Body = ModalBody;

export default Modal;
