import React, { useState, useEffect, useRef } from "react";
import { Props } from "./Timer.types";

// Currently this returns time strictly in mm:ss format only.
const Timer: React.FC<Props> = ({ initialTimeInSeconds }) => {
	const [elapsedTimeInSeconds, setElapsedTimeInSeconds] = useState(0);
	const workerRef = useRef<Worker | null>(null);
	const currentTime = useRef<number>(0);

	useEffect(() => {
		currentTime.current = new Date().getTime() / 1000;
		// Spawn a new Web Worker thread
		workerRef.current = new Worker(
			URL.createObjectURL(
				new Blob(
					[
						`
							let elapsedTimeInSeconds = 0;
							const timer = setInterval(() => {
								elapsedTimeInSeconds++;
								postMessage(elapsedTimeInSeconds);
							}, 1000);
							self.onmessage = () => {
								clearInterval(timer);
							};
						`
					],
					{ type: "text/javascript" }
				)
			)
		);

		// Listen to message from the worker thread and update state accordingly
		workerRef.current.onmessage = (event) => {
			setElapsedTimeInSeconds(Math.max(event.data, (new Date().getTime() / 1000) - (currentTime.current + 1)));
		};

		return () => {
			// Terminate the worker thread when the component unmounts
			workerRef.current?.terminate();
		};
	}, []);

	const remainingTimeInSeconds = Math.max(
		0,
		initialTimeInSeconds - elapsedTimeInSeconds
	);
	const formattedTime = new Date(remainingTimeInSeconds * 1000)
		.toISOString()
		.substr(14, 5);

	return <div>{formattedTime}</div>;
};

export default Timer;
