import { ComponentSizeENUM, TypographyENUM } from "../../../Types/general";
import React, { RefObject } from "react";
export interface InputType {
	ref?: RefObject<HTMLInputElement>
	placeholder?: string
	getInputValue: (val:string) => void
	children?: React.ReactNode
	type: React.HTMLInputTypeAttribute
	componentSize?: ComponentSizeENUM
	width: string
	id?: string
	disabled?: boolean
	readonly?: boolean
	hasError?: boolean
	errorMessage?:string;
	label:string
	font:TypographyENUM
	onValueChange?: (value: React.ChangeEvent<HTMLInputElement>) => void
	includeButton?:boolean
	buttonText?:string
	buttonPosition?:positionENUM
	labelPosition?:positionENUM
	buttonOnClick?:() => void
	// will add functionalities for below parameters later
	// includeIcon?:boolean
	// iconText?:string
	// iconPosition?:positionENUM
	// iconOnClick?:() => void
	countryCodePrefix?:string,
	onKeyUpChange?: (value: React.ChangeEvent<HTMLInputElement>) => void
	isRTL?: boolean
	dir?: string
	labelFontSize?: string
	textCapitalize?: boolean
	// suffix?:string
	handleError?: (e: React.FocusEvent<HTMLInputElement>) => void;
	setCurrentPhoneCode?: (e: string) => void
	availableCountries?: {code: string}[];
	hidePlaceholder?: boolean
	uncontrolled?: boolean
	hasErrorIcon?:boolean
	initialValue?: string
	maxLength?: number
	isNumberOnly?: boolean
	isCardExpiryDatefield?: boolean
	storeLocator?: boolean
	keyPressHandler?: (e: React.KeyboardEvent<HTMLInputElement>) => void;
	inputToUpperCase?: boolean
	noSpecialChar?: boolean
	resetInput?: boolean;
	setResetInput?: (bool: boolean) => void;
	showSvgArrow?: boolean
	msiteAddressPage?: boolean
}

export enum positionENUM{
	right="right",
	left="left",
	// top="top",
}

export enum typeENUM {
	text = "text",
	password = "password",
	email = "email",
	number = "number",
	dir = "auto"
}

export const inputs = {
	type: typeENUM,
};
