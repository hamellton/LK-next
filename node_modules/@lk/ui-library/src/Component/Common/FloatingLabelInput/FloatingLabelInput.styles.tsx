import styled from "styled-components";
import { fontSize } from "./helper";
import { ComponentSizeENUM, TypographyENUM } from "../../../Types/general";
import { positionENUM } from "./FloatingLabelInput.types";


export const InputField = styled.input<{ error: boolean, disabled: boolean, prefixText: boolean; hidePlaceholder?: boolean; storeLocator?: boolean, textCapitalize?: boolean, isRTL?: boolean }>`
	font-size:14px;
	border: 1px solid ${(props) => (props.error ? "#E34934" : "var(--light-purple-10)")};
  	padding: ${(props) => (props.prefixText ? (props.isRTL ? "12px 68px 6px 16px" : "12px 16px 2px 71px") : "12px 16px 0px 16px")};
	${props => props.storeLocator ? "border: 1px solid #99a0a9; padding: 6px 8px" : ""};
	width: 100%;
	font-family: ${TypographyENUM.lkSansRegular};
 	height: ${props => props.storeLocator ? "41px" : "58px" };
	display: block;
	outline: none;
	color: ${props => props.storeLocator ? "#333333" : "var(--text)"};
	cursor: ${(props) => (props.disabled ? "not-allowed" : "auto")};
  	border-radius: ${props => props.storeLocator ? "" : "8px" };
	&::placeholder{
		color:var(--placeholder);
	}
	box-shadow: 0px 1px 2px rgba(16, 24, 40, 0.05);
	text-transform: ${ props => props.textCapitalize ? "uppercase": "" };
	${({ hidePlaceholder }) => `${hidePlaceholder && "&::placeholder { opacity: 0; }"}`};
	direction: ${props => props.isRTL ? "rtl" : ""};
    user-select: initial;
	&::before, &::after {
    	user-select: initial;
	}

	${props => props.isRTL ? "direction: rtl;" : ""};

	${props => props.isRTL ? "padding: 12px 16px 6px 16px" : ""};
`;

export const InputLabel = styled.label<{ error?: boolean,fontSize: string, prefixText: boolean, labelPosition?: positionENUM; hidePlaceholder?: boolean; styleFont?:TypographyENUM, isRTL: boolean }>`
	font-size: ${props => props.fontSize};
	position: absolute;
	top:21px;
	${({ labelPosition, prefixText }) => `${labelPosition}: ${prefixText};`}
	pointer-events: none;
	-webkit-transition: 0.2s ease all;
	transition: 200ms cubic-bezier(0, 0, 0, 1) 0ms;
  margin-bottom: ${({ hidePlaceholder }) => hidePlaceholder ? "0px" : "5px"};
	color: ${(props) => (props.error ? "#E34934" : "var(--text)")};
  //left: ${(props) => (props.prefixText ? "68px" : "16px")};
  //left: ${(props) => (props.isRTL ? "" : "16px")};
  left: ${props => props.prefixText && !props.isRTL ? "71px" : props.isRTL? "": "16px"};
  right: ${props => props.isRTL ? 16 : ""}px;
	${props => `font-family: ${props.styleFont}`};

	${props => props.isRTL ? "right: 16px" : ""};
`;


export const InputContainer = styled.div<{width:string, value:string | undefined, styleSize?: ComponentSizeENUM, styleFont?: TypographyENUM, prefixText:boolean, isRTL?: boolean}>`
	position: relative;
	display: flex;
	height:max-content;
	flex-direction: column;
	flex-grow:1;
	width: ${(props) => props.width};
	position:relative;

	:focus-within ${InputLabel}{
		transform: translate(${(props) => (props.prefixText ? "0,-1.4em" : "0,-1.4em")});
		margin-bottom: 5px;
		left: ${props => props.prefixText && !props.isRTL ? "16px" : props.isRTL? "": "16px"};
		font-size:12px;
		color: #66668e;
		font-weight:var(--fw-regular);
		${props => props.isRTL ? "transform: translate(0,-1.4em)" : "" };
	}

	${props => props.value && `${InputLabel}{
		transform: translate(${(props.prefixText ? "0,-1.4em" : "0,-1.4em")});
		font-size:12px;
		left: ${props.prefixText && !props.isRTL ? "16px" : props.isRTL? "": "16px"};
		margin-bottom: 5px;
		color: #66668e;
		font-weight:var(--fw-regular);
		${ props.isRTL ? "transform: translate(0,-1.4em)" : "" };
	}`}
	${props => props.value && `${PrefixText}{
		top: ${props.prefixText && !props.isRTL ? "23px" : props.isRTL? "16px": "21px"};
	}`}
`;

export const PrefixText = styled.p<{ isRTL?: boolean}>`
	margin:0;
	position:absolute;
	top:21px;
	left: 16px;
	font-size:16px;
	color:var(--dark-grey);
	select{
		font-size:16px;
	}

	${props => props.isRTL ? "direction: ltr;" : ""};
`;

export const ErrorMessage = styled.p`
	color:var(--error);
	margin:0;
	padding-top:var(--pd-5);
	font-size:0.8em;
`;

export const InputWrapper = styled.div<{ styleSize:ComponentSizeENUM, styleFont:TypographyENUM}>`
	font-size: var(${(props) => fontSize[props.styleSize]});
	font-family:${props => props.styleFont};
	width: 100%;
`;

export const ErrorIcon = styled.div`
	position:absolute;
	right:14px;
	top:16px
`;


export const InputFieldOuter = styled.div`
	position relative;
`;

export const Break = styled.span`
	display: inline-block;
		transform: scaleY(1.8);;
    padding-left: 3px;
		overflow: hidden;
`;
