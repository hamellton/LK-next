import React, { ForwardedRef, forwardRef, useEffect } from "react";
import { inputs, InputType, positionENUM } from "./FloatingLabelInput.types";
import { ComponentSizeENUM } from "../../../Types/general";
import { InputContainer, InputField, InputLabel, PrefixText, ErrorIcon,ErrorMessage , Break } from "./FloatingLabelInput.styles";
import { action } from "@storybook/addon-actions";
import PhoneCodeDropdown from "../../V1/PhonecodeDropdown";
import { PhoneCodeDropdownWrapper } from "../../V1/Auth/SignIn/styles";

// eslint-disable-next-line react/display-name
const FormInput = forwardRef((
	{
		placeholder,
		getInputValue,
		children,
		label,
		type = inputs.type.text,
		dir = inputs.type.dir,
		componentSize = ComponentSizeENUM.small,
		id,
		disabled = false,
		hasError = false,
		width = "50",
		readonly = false,
		onValueChange = () => null,
		onKeyUpChange = () => null,
		labelPosition= positionENUM.left,
		countryCodePrefix,
		font,
		labelFontSize="var(--fs-14)",
		isRTL = false,
		handleError = () => null,
		setCurrentPhoneCode = () => null,
		availableCountries,
		hidePlaceholder,
		hasErrorIcon = false,
		errorMessage= "",
		initialValue = "",
		maxLength,
		isNumberOnly,
		isCardExpiryDatefield,
		storeLocator,
		keyPressHandler,
		textCapitalize,
		noSpecialChar = false,
		resetInput,		//> To reset internal state of input field
		setResetInput,	//>	to reset 'resetInput' boolean
		showSvgArrow = false,
		msiteAddressPage=false
	}: InputType,
	ref: ForwardedRef<google.maps.places.Autocomplete | null>
) => {
	const [inputValue, setInputValue] = React.useState(initialValue);
	function updateValue(e: React.ChangeEvent<HTMLInputElement>) {
		setInputValue(e.target.value);
		onValueChange(e);
		action("value change")(e,{ value:e.target.value });
	}

	const onKeyUpChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {
		onKeyUpChange(e);
	};

	useEffect(() => {
		if(resetInput) {
			setInputValue("");
			if(setResetInput) setResetInput(false);
		}
	}, [resetInput]);

	function onChange(e: React.ChangeEvent<HTMLInputElement>){
		const regex = /^[A-Za-z0-9 ]+$/g;
		if(maxLength && e.target.value.length>maxLength && !(maxLength && inputValue.length > maxLength)) return;
		if(isNumberOnly){
			//  e.target.value.replace(/[^0-9.]/g, "").replace(/(\..*)\./g, "$1");
			setInputValue(e.target.value.replace(/[^0-9.]/g, "").replace(/(\..*)\./g, "$1"));
			getInputValue(e.target.value.replace(/[^0-9.]/g, "").replace(/(\..*)\./g, "$1"));
			return;
		}
		if(isCardExpiryDatefield){
			if(e.target.value.length===3 && e.target.value[e.target.value.length-1]!=="/"){
				setInputValue(e.target.value.slice(0,2)+"/"+e.target.value.slice(2));
				getInputValue(e.target.value.slice(0,2)+"/"+e.target.value.slice(2));
				return;
			}
			setInputValue(e.target.value.replace(/[^0-9\\/]/g, "").replace(/(\..*)\./g, "$1"));
			getInputValue(e.target.value.replace(/[^0-9\\/]/g, "").replace(/(\..*)\./g, "$1"));
			return;
		}
		
		if(noSpecialChar && (regex.test(e.target.value) || !e.target.value)) {
			setInputValue(e.target.value);
			getInputValue(e.target.value);
			return;
		}
		if(noSpecialChar && !regex.test(e.target.value)) {
			return;
		}
		setInputValue(e.target.value);
		getInputValue(e.target.value);
	}
	return <InputContainer isRTL = {isRTL} id={id} width={width} styleSize={componentSize} styleFont={font} value={inputValue} prefixText={!!countryCodePrefix}>
		<PrefixText isRTL={isRTL}>{availableCountries ?<PhoneCodeDropdownWrapper top="0"> <PhoneCodeDropdown msiteAddressPage={msiteAddressPage} showSvgArrow = {showSvgArrow} width="52px" availableCountries={availableCountries} currentPhoneCode={countryCodePrefix} onChange={(newPhoneCode: string) => setCurrentPhoneCode(newPhoneCode)} /></PhoneCodeDropdownWrapper> : <>{countryCodePrefix} {isRTL && countryCodePrefix && <Break> | </Break>}</>}</PrefixText>
		{hasErrorIcon && hasError && <ErrorIcon><img src="https://static.lenskart.com/media/desktop/img/DesignStudioIcons/InfoIconRed.svg"></img></ErrorIcon>}
		<InputField
			hidePlaceholder={hidePlaceholder}
			ref={ref as React.RefObject<HTMLInputElement>}
			prefixText={!!countryCodePrefix}
			error={hasError}
			type={type}
			dir={dir}
			onChange={onChange}
			onKeyUp={() => onKeyUpChangeHandler}
			onBlur={(e) => { updateValue(e); handleError(e); }}
			placeholder={placeholder}
			disabled={disabled}
			readOnly={readonly}
			value={inputValue}
			storeLocator={storeLocator}
			onKeyDown={keyPressHandler}
			textCapitalize={textCapitalize}
			isRTL={isRTL}
		/>
		<InputLabel
			hidePlaceholder={hidePlaceholder}
			prefixText={!!countryCodePrefix}
			labelPosition={isRTL ? positionENUM.right : labelPosition}
			fontSize={labelFontSize}
			error={hasError}
			isRTL={isRTL}
			styleFont={font}>
			{label && !placeholder && label}
		</InputLabel>
		{children || null}
		{errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}
	</InputContainer>;
});

export default FormInput;
