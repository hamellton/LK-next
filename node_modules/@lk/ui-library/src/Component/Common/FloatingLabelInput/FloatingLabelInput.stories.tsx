import { ComponentMeta, ComponentStory } from "@storybook/react";
import { FormInput } from "./FloatingLabelInput.component";
import React from "react";
import { inputs, typeENUM } from "./FloatingLabelInput.types";
import { generateArgTypes, generateGeneralArgs } from "../../../StorybookHelper";
import { ComponentSizeENUM, TypographyENUM } from "../../../Types/general";

export default {
	title: "Components/Common/FloatingLabelInput",
	component: FormInput,
	argTypes: {
		...generateGeneralArgs(),
		value: generateArgTypes({
			type: "string",
			required: false,
			description: "Value that will be rendered",
			category: "Component",
			defaultValue: "Lorem Ipsum",
		}),
		placeholder: generateArgTypes({
			type: "string",
			required: false,
			description: "Placeholder that will be rendered",
			category: "Component",
			defaultValue: "Lorem Ipsum placeholder",
		}),
		label: generateArgTypes({
			type: "string",
			required: false,
			description: "Label that will be rendered",
			category: "Component",
			defaultValue: "",
		}),
		type: generateArgTypes({
			type: "string",
			required: true,
			description: "Type of input will be rendered",
			category: "Component",
			defaultValue: typeENUM.text,
			control: "radio",
			options: typeENUM,
		}),
		width: generateArgTypes({
			type: "string",
			required: false,
			description: "To set the specific width of input",
			category: "Component",
			defaultValue: "50",
		}),
		disabled: generateArgTypes({
			type: "boolean",
			required: true,
			description: "Boolean to enable/disable the input",
			category: "Component",
			defaultValue: "false",
		}),
		readonly: generateArgTypes({
			type: "boolean",
			required: true,
			description: "Boolean to set readOnly condition in input",
			category: "Component",
			defaultValue: "false",
		}),
		hasError: generateArgTypes({
			type: "boolean",
			required: false,
			description: "Boolean to set error in input",
			category: "Component",
			defaultValue: "false",
		}),
		errorMessage: generateArgTypes({
			type: "string",
			required: false,
			description: "error message",
			category: "Component",
		}),
		onChange: generateArgTypes({
			type: "function",
			required: false,
			description: "onChange handler for input",
			category: "Events",
		}),
		isRTL: generateArgTypes({
			type: "boolean",
			required: true,
			description: "Show Right to Left",
			category: "Component",
			defaultValue: false
		}),
		getInputValue: generateArgTypes({
			type: "function",
			required: true,
			description: "Provide Input value to parent component",
			category: "Events",
		})
	},
} as ComponentMeta<typeof FormInput>;

const Template: ComponentStory<typeof FormInput> = (args) => <FormInput {...args}/>;

export const FloatingLabelInputWithoutError = Template.bind({});
FloatingLabelInputWithoutError.args = {
	label:"First Name",
	componentSize: ComponentSizeENUM.medium,
	disabled: false,
	readonly: false,
	width: "50%",
	type: inputs.type.text,
	font:TypographyENUM.defaultBook
};

export const FloatingLabelInputWithError = Template.bind({});

FloatingLabelInputWithError.args = {
	...FloatingLabelInputWithoutError.args,
	hasError: true,
	errorMessage:"This is required",
};

export const FloatingLabelInputWithPrefix = Template.bind({});

FloatingLabelInputWithPrefix.args = {
	...FloatingLabelInputWithoutError.args,
	countryCodePrefix:"+91",
	label:"Mobile Number",
	type: inputs.type.number,
};

// export const inputWithButton = Template.bind({});

// inputWithButton.args = {
// 	...inputWithoutError.args,
// 	includeButton: true,
// 	buttonText: "CHANGE",
// 	buttonPosition: positionENUM.right,
// 	buttonOnClick: () => console.log("button clicked"),
// 	countryCodePrefix:"+91",
// 	font:TypographyENUM.defaultBook,
// 	isRTL: false,
// 	label:"Check Pincode",
// };

// export const inputReadOnly = Template.bind({});
// inputReadOnly.args = {
// 	...inputWithoutError.args,
// 	readonly:true,
// };

// export const inputDisabled = Template.bind({});
// inputDisabled.args = {
// 	...inputWithoutError.args,
// 	disabled:true,
// };
