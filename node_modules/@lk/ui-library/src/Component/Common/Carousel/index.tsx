import React, { useState } from "react";
import Slider from "react-slick";
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";
import CarouselSlide from "./CarouselSlide";
import { SliderWrapper, Input } from "./styles";
import { CarouselProps, CarouselType } from "./Carousel.types";
import { IconLeft, IconRight } from "../../../Icons";

const CarouselSkeleton = React.forwardRef(function Carousel(props: CarouselProps, ref: any) {
	const {
		carouselConfig,
		initialSlide = 0,
		slidesToShow = 7,
		responsive,
		wrapperClassName,
		sliderClassName,
		changeCarouselSlide,
		isRTL = false,
		children,
		mobileView,
		hideArrow=false,
		showScrollbar = false,
		numberOfElementsCoursel = 0
	} = props;
	const [currentSlide, setCurrentSlide] = useState<number>(initialSlide);

	let config: any = {
		infinite: false,
		easing: "",
		pauseOnHover: false,
		speed: 500,
		autoplay: false,
		autoplaySpeed: 2000,
		arrows: !hideArrow,
		responsive: responsive,
		slidesToShow,
		initialSlide,
		nextArrow: isRTL ? <IconLeft/> : <IconRight/>,
		prevArrow: isRTL ? <IconRight/> : <IconLeft/>,
		rtl: isRTL,
		dots: false,
		slidesToScroll: 1,
		afterChange: () => setCurrentSlide(state => state + 1),
	};

	if (carouselConfig) {
		config = { ...config, ...carouselConfig };
	}
	const changeSlide = (index: number) => {
		setCurrentSlide(index);
	};

	const onClickChangeSlide = (index: number, imageClick: string) => {
		setCurrentSlide(index);
		if (changeCarouselSlide) {
			changeCarouselSlide(index, imageClick);
		}
	};

	const slickGoTo = (params: number) => {
		ref?.current.slickGoTo(params);
		console.log(ref, "ref");
	};

	return (
		<SliderWrapper isRTL={isRTL} dir="ltr" className={wrapperClassName} mobileView={mobileView}>
			<Slider
				ref={ref}
				beforeChange={(current, next) => changeSlide(next)}
				className={sliderClassName}
				{...config}
			>
				{React.Children.map(children, (child, index) => {
					if (React.isValidElement(child))
						return React.cloneElement(child, { id: index, currentSlide, onClickChangeSlide } as any);
				})}
			</Slider>
			{showScrollbar && <Input
				onChange={(e:any) => slickGoTo(Number(e.target.value))}
				value={currentSlide}
				type="range"
				min={1}
				max={numberOfElementsCoursel}
			/>}
		</SliderWrapper>
	);
});

const Carousel = CarouselSkeleton as CarouselType;

Carousel.Slide = CarouselSlide;

export default Carousel;
