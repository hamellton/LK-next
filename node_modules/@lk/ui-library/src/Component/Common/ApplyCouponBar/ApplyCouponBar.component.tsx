import React, { useEffect, useState } from "react";
import CollapsibleSidebar from "../CollapsibleSideBar/CollapsibleSidebar.component";
import { ApplyCouponType } from "./ApplyCouponBar.types";
import { Flex, ManualApplyCoupon, ApplyButtonNew, ErrorMessage, CouponTitle, ApplyCouponInput, ApplyButton, ManualApplyCouponNew, ApplyButtonNewDesign, InputContainer, ApplyCouponInputNew, LineThroughHeadingContainer, Line, LineHeading, /*Content*/ } from "./ApplyCouponBar.styles";
import Alert from "../../V1/Cart/Alert";
import { AlertColorsENUM, ComponentSizeENUM, TypographyENUM } from "../../../Types/general";
import Coupon from "../../V1/Cart/Coupon";
import FloatingLabelInput from "../../Common/FloatingLabelInput";
import usePrevious from "../../V1/Auth/SignIn/usePrevious";
import NewCouponCard from "../../V1/Cart/CartCard/NewCoupon/NewCouponCard";
// const applyGvHandler = (flag:string,code:string, cb:()=>void) => {
// 	const reqObj: {
// 		code: string;
// 		sessionId: string;
// 		flag: string;
// 	} = {
// 		code: code,
// 		sessionId: sessionId,
// 		flag: flag,
// 	};
// 	dispatch(applyRemoveGv(reqObj));
// 	setTimeout(() => {
// 		if (errMsg === "" && typeof cb === "function") {
// 			cb();
// 		}
// 	},3000);
// };
const ApplyCouponBar = ({ appliedCoupon, mobileView, applyGvHandler, applicableGvs, sorryNoCoupon, showSidebar, isRTL, setShowSidebar, errMsg, setErrorMsg, textCapitalize, hideArrowBackground = false, dataLocale, newCartOfferDesign = false, bestOffers, bankOffers }: ApplyCouponType) => {
	const [coupon, setCoupon] = useState("");
	const [clickedBackdrop, setClickedBackdrop] = useState(false);
	// const [errMsg, setErrorMsg] = useState("");
	const deskHide = isRTL ? -500 : 500;
	const mobileHide = isRTL ? -2000 : 2000;
	const [xPosition, setXPosition] = useState(mobileView ? mobileHide : deskHide);
	const prevAppliedCoupon = usePrevious(appliedCoupon);

	useEffect(() => {
		if (typeof prevAppliedCoupon !== "boolean" && prevAppliedCoupon !== appliedCoupon) {
			setCoupon(appliedCoupon || "");
			setErrorMsg("");
		}
	}, [appliedCoupon]);


	// const prevCoupon = usePrevious(appliedCoupon);

	// useEffect(() => {
	// 	if(prevCoupon && appliedCoupon === "") {
	// 		toggleSideBar();
	// 	}
	// },[appliedCoupon]);

	useEffect(() => {
		// if(showSidebar){
		if (showSidebar) {
			setClickedBackdrop(false);
		}
		if (mobileView) {
			if (!showSidebar) {
				setCoupon("");
				setErrorMsg("");
			}
			setXPosition(showSidebar ? 0 : mobileHide);
		}
		else setXPosition(showSidebar ? 0 : deskHide);
		// }
	}, [showSidebar]);

	const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
		const event = e.target;
		setCoupon(event.value);
		setErrorMsg("");
		const re = /\}/g;
		if (re.test(event.value)) {
			setErrorMsg("Please enter a valid Coupon");
		}
	};
	const toggleSideBar = () => {
		setShowSidebar(!showSidebar);
		// if(!mobileView) {
		// 	setShowSidebar(!showSidebar);
		// 	if (xPosition === 500) {
		// 		setXPosition(0);
		// 		setCoupon("");
		// 	} else {
		// 		setXPosition(500);
		// 		setCoupon("");
		// 	}
		// } else {
		// 	if (xPosition === 1000) {
		// 		setXPosition(0);
		// 		setCoupon("");
		// 	} else {
		// 		setXPosition(1000);
		// 		setCoupon("");
		// 	}
		// }
		// setErrorMsg("");
	};
	const applyCouponHandler = (code: string, flag: string) => {
		applyGvHandler(code, flag);
		if (!mobileView)
			toggleSideBar();
	};

	useEffect(() => {
		if (clickedBackdrop && !prevAppliedCoupon) setCoupon("");
	}, [clickedBackdrop]);


	return (
		<CollapsibleSidebar
			height={100}
			overLay={showSidebar}
			title={dataLocale?.APPLY_COUPON || "Coupons for you"}
			id={"ApplyCoupon"}
			// width={0}
			xPosition={xPosition}
			isRTL={isRTL}
			onClose={toggleSideBar}
			mobileView={mobileView}
			backdropClick={setClickedBackdrop}
			hideArrowBackground={hideArrowBackground}
		>
			{!newCartOfferDesign ? (
				<ManualApplyCoupon font={TypographyENUM.lkSansRegular} id="manual-apply-coupon">
					<Flex isRTL={isRTL} id="flex">
						{!mobileView && <ApplyCouponInput
							name="coupon"
							placeholder={dataLocale?.ENTER_COUPON_CODE || "Enter Coupon Code"}
							type="text"
							value={coupon}
							onChange={(e) => handleChange(e)}
							isRTL={isRTL}
						/>}

						{mobileView && showSidebar && <FloatingLabelInput id="floating-label-input" textCapitalize={textCapitalize} dir={isRTL ? "rtl" : "ltr"} hasError={false} hasErrorIcon={true} isRTL={isRTL} label={dataLocale?.ENTER_COUPON_CODE || "Enter Coupon Code"} width="100%" font={TypographyENUM.lkSansRegular} type="text" getInputValue={setCoupon} onValueChange={(e) => handleChange(e)}></FloatingLabelInput>}
						{!mobileView && <ApplyButton id="apply-button"
							onClick={
								coupon.length && !errMsg.length ? () => applyGvHandler(coupon.toUpperCase(), "apply") : () => { console.log("apply error"); }
							}
							isRTL={isRTL}
							isActive={(coupon.length && !errMsg.length) || false}
						>
							Apply
						</ApplyButton>}
						{mobileView && <ApplyButtonNew id="apply-button-new" isRTL={isRTL}
							onClick={
								coupon.length && !errMsg.length ? () => applyCouponHandler(coupon.toUpperCase(), "apply") : () => { console.log("apply error"); }
							}
						>{dataLocale?.APPLY || "Apply"}</ApplyButtonNew>}
					</Flex>
					{errMsg && <ErrorMessage>{errMsg}</ErrorMessage>}
				</ManualApplyCoupon>
			) : (
				<ManualApplyCouponNew isRTL={isRTL}>
					<InputContainer>
						{!mobileView && <ApplyCouponInputNew
							name="coupon"
							placeholder={dataLocale?.ENTER_COUPON_CODE || "Enter Coupon Code"}
							type="text"
							value={coupon}
							onChange={(e) => handleChange(e)}
						/>}

						{mobileView && showSidebar && <FloatingLabelInput id="floating-label-input" textCapitalize={textCapitalize} dir={isRTL ? "rtl" : "ltr"} hasError={false} hasErrorIcon={true} isRTL={isRTL} label={dataLocale?.ENTER_COUPON_CODE || "Enter Coupon Code"} width="100%" font={TypographyENUM.lkSansRegular} type="text" getInputValue={setCoupon} onValueChange={(e) => handleChange(e)}></FloatingLabelInput>}

					</InputContainer>
					<ApplyButtonNewDesign onClick={
						coupon.length && !errMsg.length ? () => applyCouponHandler(coupon.toUpperCase(), "apply") : () => { console.log("apply error"); }
					}>
						{dataLocale?.APPLY || "Apply"}
					</ApplyButtonNewDesign>

				</ManualApplyCouponNew>
			)}
			{/* <Content>
				<CouponTitle>
					AVAILABLE COUPONS
				</CouponTitle>
				{children}
			</Content> */}
			{!newCartOfferDesign && applicableGvs && applicableGvs.length > 0 && <CouponTitle id="coupon-title">{dataLocale?.AVAILABLE_COUPONS || "AVAILABLE COUPONS"}</CouponTitle>}

			{!newCartOfferDesign && applicableGvs && applicableGvs.length > 0 ? (
				applicableGvs.map((item, key) => {
					return (
						<Coupon
							id={`Coupon-${key}`}
							width="100"
							headText={item.code}
							subText={item.heading}
							descText={item.description}
							termsAndCondition={item.termsAndConditions}
							onClick={() => applyCouponHandler(item.code, "apply")}
							font={TypographyENUM.defaultBook}
							key={key}
							mobileView={mobileView}
							brandImage={item.brandImage}
						/>
					);
				})
			) : (
				(
					newCartOfferDesign ? null : (
						<Alert
							color={AlertColorsENUM.golden}
							componentSize={ComponentSizeENUM.large}
							font={TypographyENUM.lkSansRegular}
							id="Alert"
						>
							<Flex>
								<span>{sorryNoCoupon}</span>
							</Flex>
						</Alert>
					)
				)
			)}

			{errMsg && newCartOfferDesign && <ErrorMessage>{errMsg}</ErrorMessage>}

			{newCartOfferDesign && (bestOffers?.length === 0 && bankOffers?.length === 0) && (
				<Alert
					color={AlertColorsENUM.golden}
					componentSize={ComponentSizeENUM.large}
					font={TypographyENUM.lkSansRegular}
					id="Alert"
				>
					<Flex>
						<span>{sorryNoCoupon}</span>
					</Flex>
				</Alert>
			)}
			{newCartOfferDesign && bestOffers && bestOffers?.length > 0 && (
				<>
					<LineThroughHeadingContainer>
						<Line />
						<LineHeading>{dataLocale?.BEST_OFFERS_FOR_YOU || "Best offers for you"}</LineHeading>
						<Line />
					</LineThroughHeadingContainer>
					{bestOffers?.map((offer, index) => {
						return (
							<NewCouponCard key={`offer-${index}`} offer={offer} onClick={() => applyCouponHandler(offer.code, "apply")} appliedCoupon={appliedCoupon} dataLocale={dataLocale} />
						);
					})}
				</>
			)}

			{newCartOfferDesign && bankOffers && bankOffers?.length > 0 && (
				<>
					<LineThroughHeadingContainer>
						<Line />
						<LineHeading>{dataLocale?.BANK_OFFERS || "Bank Offers"}</LineHeading>
						<Line />
					</LineThroughHeadingContainer>
					{bankOffers?.map((offer, index) => {
						return (
							<NewCouponCard key={`offer-${index}`} offer={offer} onClick={() => applyCouponHandler(offer.code, "apply")} appliedCoupon={appliedCoupon} dataLocale={dataLocale} />
						);
					})}
				</>
			)}
		</CollapsibleSidebar>
	);
};

export default ApplyCouponBar;
