import styled from "styled-components";
import { fontSize } from "./helper";
import { ComponentSizeENUM, TypographyENUM } from "../../../Types/general";
import { positionENUM } from "./Input.types";


export const InputField= styled.input<{error:boolean, disabled:boolean, prefixText:boolean, isRTL?: boolean}>`
	font-size:1em;
	border: none;
	background:none;
	border-bottom: 1px solid ${props => props.error ? "var(--error)" : "var(--serene-gray)"};
	padding: 0.5em 0.6em 0.4em ${props => props.prefixText ? "3em" : "0"};
	width: 100%;
	display: block;
	outline: none;
	color: var(--dark-grey);
	cursor: ${(props) => (props.disabled ? "not-allowed" : "auto")};
	text-align: ${(props) => (props.isRTL ? "right" : "")};
	direction: ${props => props.isRTL ? "rtl" : ""};
	&::placeholder{
		color:var(--placeholder);
	}
	user-select: initial;
	&::before, &::after {
    	user-select: initial;
	}
`;

export const InputLabel= styled.label<{fontSize?:string, prefixText:boolean, labelPosition?: positionENUM}>`
	${props => props.fontSize ? `font-size: ${props.fontSize}` : ""};
	position: absolute;
	bottom: 0.4em;
	${props => props.labelPosition ? `${props.labelPosition}:${props.prefixText ? "2em" : "0"}` : ""};
	pointer-events: none;
	-webkit-transition: 0.2s ease all;
	color: var(--dark-grey);
	transition: 200ms cubic-bezier(0, 0, 0, 1) 0ms;
`;


export const InputContainer = styled.div<{width:string, value:string | undefined, styleSize?: ComponentSizeENUM, styleFont?: TypographyENUM, isRTL?: boolean}>`
	position: relative;
	display: flex;
	height:max-content;
	flex-direction: column;
	flex-grow:1;
	width: ${(props) => props.width};

	:focus-within ${InputLabel}{
		transform: translate(0, -1.75em);
		font-size:0.8em;
		font-weight:var(--fw-regular);
		left: ${props => props.isRTL ? "" : "0"};
		right: ${props => props.isRTL ? "0" : ""};
	}
	${props => props.value && `${InputLabel}{
		transform: translate(0, -1.75em);
		font-size:0.8em;
		font-weight:var(--fw-regular);
		left: ${props.isRTL ? "" : "0"};
		right: ${props.isRTL ? "0" : ""};
	}`}
`;


export const InputButton = styled.button<{buttonPosition?:positionENUM, styleFont:TypographyENUM, isRTL?:boolean}>`
	background:none;
	border:none;
	color:var(--turquoise);
	font-size:0.85em;
	cursor: var(--pointer);
	position:absolute;
	${props => props.buttonPosition ? `${props.buttonPosition}: ${props.isRTL ? "0em" : "0.4em"}` : ""};
	font-family:${props => props.styleFont};
	bottom:0.4em;
`;

export const PrefixText = styled.p<{isRTL?:boolean}>`
	margin:0;
	position:absolute;
	left:${ props => props.isRTL ? "" : "0"};
	bottom:0.4em;
	font-size:1em;
	color:var(--dark-grey);
	right: ${ props => props.isRTL ? "0" : ""};
`;

export const ErrorMessage = styled.p`
	color:var(--error);
	margin:0;
	padding-top:var(--pd-5);
	font-size:0.8em;
`;

export const InputWrapper = styled.div<{ styleSize:ComponentSizeENUM, styleFont:TypographyENUM}>`
	font-size: var(${(props) => fontSize[props.styleSize]});
	font-family:${props => props.styleFont};
	width: 100%;
`;
