import React from "react";
import { ComponentSizeENUM, TypographyENUM } from "../../../Types/general";
import { BreadcrumbsTypes } from "./Breadcrumbs.types";
import {
	BreadcrumbContainer,
	Breadcrumb,
	LI,
	BCSpan,
	AnchorTag,
	HelpLine,
} from "./Breadcrumbs.styles";

const Breadcrumbs = ({
	id,
	productID = "147654",
	contactLensPowerFromUrl = "",
	helplineNo = "",
	dataLocale,
	breadcrumbData,
	font = TypographyENUM.defaultBook,
	componentSize = ComponentSizeENUM.medium,
	isRTL,
	deviceType,
	color,
	subDirectory,
}: BreadcrumbsTypes) => {
	// const isRTL = true;
	const BreadCrumbsDesktop = <Breadcrumb>
		{breadcrumbData &&
			breadcrumbData.map((item, index) => {
				return (
					<LI key={index}>
						{item.link && item.label !== "Mobile" && (
							<BCSpan indexKey={index}>
								<AnchorTag
									deviceType={deviceType}
									href={
										item.link.indexOf("www.lenskart.com") === -1
											? `/${item.link}`
											: subDirectory ? `/${subDirectory}/` : "/"
									}
								>
									{item.label}
								</AnchorTag>
							</BCSpan>
						)}
						{!item.link && item.label !== "Mobile" && (
							<BCSpan indexKey={index}>
								<>
									{productID?.length !== 0 &&
										<span>
											{item.label} - {productID}
										</span>
									}
									{productID?.length === 0 &&
										<span>
											{item.label}
										</span>
									}
								</>
							</BCSpan>
						)}
					</LI>
				);
			})}
		{contactLensPowerFromUrl && <li>{contactLensPowerFromUrl}</li>}
	</Breadcrumb>;

	const BreadCrumbsMsite = <Breadcrumb>
		{breadcrumbData &&
			breadcrumbData.map((item, index) => {
				return (
					<LI key={index}>
						{item.link && item.label !== "Mobile" && (
							<BCSpan indexKey={index}>
								<AnchorTag
									deviceType={deviceType}
									href={
										item.link.indexOf("www.lenskart.com") === -1
											? `/${item.link}`
											: "/"
									}
								>
									{item.label}
								</AnchorTag>
							</BCSpan>
						)}
					</LI>
				);
			})}
		{contactLensPowerFromUrl && <li>{contactLensPowerFromUrl}</li>}
	</Breadcrumb>;
	return (
		<BreadcrumbContainer isRTL={isRTL} styleFont={font} styleSize={componentSize} data-testid="breadcrumbs-test" id={id}>
			{deviceType === "mobilesite" && BreadCrumbsMsite}
			{deviceType === "desktop" && BreadCrumbsDesktop}
			{helplineNo && deviceType === "desktop" && (
				<span>
					{dataLocale.PROBLEM_IN_PLACING_ORDER}
					<HelpLine color={color}>&nbsp;{helplineNo}</HelpLine>
				</span>
			)}
		</BreadcrumbContainer>
	);
};

export default Breadcrumbs;
