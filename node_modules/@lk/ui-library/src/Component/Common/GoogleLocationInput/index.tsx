import React, { useRef } from "react";
import { GoogleLocationInputProps, Libraries } from "./GoogleLocationInput.types";
import FloatingLabelInput from "../FloatingLabelInput";
import { TypographyENUM } from "../../../Types/general";
import { Autocomplete, useLoadScript } from "@react-google-maps/api";

const GOOGLE_MAP_LIBRARIES: Libraries[] = ["places"];

function GoogleLocationInput({ configData, callback, label, initialValue="", disabled, handleError, storeLocator }: GoogleLocationInputProps) {
	const ref = useRef<google.maps.places.Autocomplete | null>(null);
	const googleMapConfig = configData.GOOGLE_MAP_CONFIG && JSON.parse(configData.GOOGLE_MAP_CONFIG as string);
	const { isLoaded } = useLoadScript({
		googleMapsApiKey: configData.GOOGLE_MAP_KEY as string ?? "AIzaSyAgBBoD8hH6dQpesH3FjcVeKgEeAqezDu4",
		libraries: GOOGLE_MAP_LIBRARIES, preventGoogleFontsLoading: googleMapConfig.preventGoogleFontsLoading,
	});

	const changeHandler = () => {
		if (ref && ref.current) {
			const place = ref.current.getPlace();
			if (place) {
				if(!storeLocator) {
					callback(place.formatted_address ?? "");
				} else if(place.formatted_address){
					callback(place.formatted_address);
				}
			}
		}
	};

	const getInputValue = (value: string) => {
		if(storeLocator){
			console.log(value);
		} else {
			callback(value);
		}
	};

	function enterPressCheck(e: React.KeyboardEvent<HTMLInputElement>) {
		if(storeLocator) {
			const code = (e.key ? e.key : e.code);
			if(code == "Enter") {
				e.preventDefault();
				callback((e.target as HTMLInputElement).value);
			}
		}
	}

	return (
		<>
			{
				isLoaded && (
					<Autocomplete
						types={googleMapConfig.types}
						fields={googleMapConfig.fields}
						onLoad={sb => ref.current = sb}
						restrictions={googleMapConfig.restrictions}
						onPlaceChanged={changeHandler}
					>
						<FloatingLabelInput
							ref={ref}
							label={label}
							// labelFontSize={"20px"}
							type="text"
							width="100"
							font={TypographyENUM.lkSansRegular}
							initialValue={initialValue}
							onValueChange={changeHandler}
							getInputValue={getInputValue}
							hidePlaceholder
							disabled={disabled}
							handleError={handleError}
							storeLocator={storeLocator}
							keyPressHandler={enterPressCheck}
						/>
					</Autocomplete>
				)
			}
		</>
	);
}

export default GoogleLocationInput;
