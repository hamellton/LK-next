import React from "react";
import { ComponentSizeENUM, ThemeENUM, TypographyENUM } from "../../../Types/general";
import { FormInput } from "../Input/Input.component";
import { inputs } from "../Input/Input.types";
import PrimaryButton from "../PrimaryButton";
import { UserFormType } from "./OutOfStock.types";
import { HeadingWrapper, InputWrapper, OutOfStockFormContainer, ParagraphWrapper } from "./OutOfStock.styles";
import { getNumberLengthFromCode } from "../../../helpers";

const OutOfStock = ({ id, dataLocale, onKepMePosted, font, isRTL = false, oosSubscription, countryCode, isOOStockSaved }: UserFormType) => {
	const [ formValue, setFormValue ] = React.useState({
		mobile: "",
		email: ""
	});

	// eslint-disable-next-line no-useless-escape
	const mailformat = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;

	const Validate = (email: string, mobile: string) => {
		const len = getNumberLengthFromCode(countryCode);
		// console.log(email,mobile, "email");
		
		if (!email?.match(mailformat)) {
			alert(dataLocale.EMAIL_VALID);
			return false;
		}
		if(mobile?.length !== len || isNaN((Number(mobile)))){
			alert(dataLocale.MOBILE_VALID);
			return false;
		}
		return true;
	};

	const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {
		event.preventDefault();
		const { mobile, email } = formValue;
		const result = Validate(email, mobile);
		if(result) onKepMePosted(mobile, email);
	};

	return (
		<OutOfStockFormContainer id={id} onSubmit={onSubmit} styleFont={font} isRTL={isRTL}>
			<HeadingWrapper>{dataLocale.SORRY_THIS_PRODUCT_OUT_OF_STOCK}</HeadingWrapper>
			<ParagraphWrapper error>
				{dataLocale.PLEASE_PROVIDE_INFORMATION_PRODUCT_STOCK}
			</ParagraphWrapper>
			{!oosSubscription.isError ? Boolean(oosSubscription.data?.message || isOOStockSaved) && <ParagraphWrapper error={false}>
				{dataLocale.THANK_YOU_FOR_SUBMITTING_WILL_INFORM}
			</ParagraphWrapper> : <ParagraphWrapper error={false}>
				{dataLocale.OOPS_SOMETHING_WENT_WRONG}
			</ParagraphWrapper>}

			{(!oosSubscription.data?.message && !isOOStockSaved) && <><InputWrapper>
				<FormInput
					font={font}
					label={dataLocale.EMAIL}
					onValueChange={(e) => setFormValue({ ...formValue, email: e.target.value })}
					width="100%"
					type={inputs.type.text}
					dir={inputs.type.dir}
					componentSize={ComponentSizeENUM.medium}
					isRTL={isRTL}
				/>
			</InputWrapper>
			<InputWrapper>
				<FormInput
					font={font}
					label={dataLocale.MOBILE}
					onValueChange={(e) => setFormValue({ ...formValue, mobile: e.target.value })}
					width="100%"
					type={inputs.type.text}
					componentSize={ComponentSizeENUM.medium}
					isRTL={isRTL}
					dir={inputs.type.dir}
					inputType={inputs.type.number}
				/>
			</InputWrapper>
			<PrimaryButton
				onBtnClick={() => null}
				theme={ThemeENUM.primary}
				font={TypographyENUM.defaultBook}
				componentSize={ComponentSizeENUM.medium}
				id="btn-proceed"
				width="100%"
				height="35px"
				primaryText={dataLocale.KEEP_ME_POSTED}
			/></>}
		</OutOfStockFormContainer>
	);
};

export default OutOfStock;
