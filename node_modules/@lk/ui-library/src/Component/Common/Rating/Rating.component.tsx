import { action } from "@storybook/addon-actions";
import React, { useEffect, useRef, useState } from "react";
import SvgStar from "../../../Icons/Star";
import SvgStarOutlined from "../../../Icons/StarOutlined";
import { RatingTypes } from "./Rating.types";
import { RatingContainer } from "./Rating.styles";
import { ComponentSizeENUM } from "../../../Types/general";
// import { debounce as debouncingFn } from "../../../helpers";
const Rating = ({
	id="star-rating",
	rating,
	maxRating=5,
	componentSize= ComponentSizeENUM.medium,
	isReadOnly=true,
	onStarsChange,
	isRTL,
	color,
}: RatingTypes) => {

	const [showFilledStarArray, setShowFilledStarArray] = useState<boolean[]>([]);
	const [clickedIndex, setClickedIndex] = useState(rating === 0 ? -1 : rating);

	const debounce = useRef<NodeJS.Timeout | undefined>();

	useEffect(()=>{
		setShowFilledStarArray(Array.from({ length: maxRating }, (elem, idx) => (idx < rating) ? true : false));
	},[rating, maxRating]);

	const onMouseOverHandler = (e: React.MouseEvent<SVGSVGElement, MouseEvent>, hoveredIndex: number) => {
		if (!isReadOnly) {
			const newArr = Array.from({ length: maxRating }, (elem, idx) => idx <= hoveredIndex || idx<=clickedIndex ? true : false);
			setShowFilledStarArray(newArr);
		}
		clearTimeout(debounce.current);
	};

	const onMouseClickHandler = (e: React.MouseEvent<SVGSVGElement, MouseEvent>, clickedIndex: number) => {
		if (!isReadOnly) {
			const newArr = Array.from({ length: maxRating }, (elem, idx) => idx <= clickedIndex ? true : false);
			setShowFilledStarArray(newArr);
			setClickedIndex(clickedIndex);
			onStarsChange(clickedIndex+1);
			action("rating selected")(e, { hoveredIndex: clickedIndex, rating:clickedIndex+1 });
		}
	};

	const onMouseOutHandler = (hoveredIndex: number) => {
		// if(hoveredIndex>=clickedIndex && !isReadOnly){
		// 	debounce.current = setTimeout(() => {
		// 		const newArr = Array.from({ length: maxRating }, (elem, idx) => idx <= clickedIndex ? true : false);
		// 		setShowFilledStarArray(newArr);
		// 	// onStarsChange(clickedIndex+1);
		// 	}, 200);
		// }
		console.log(hoveredIndex);
	};

	// const debouncedSearch = useMemo(() => debounce(searchFunction, delay), [searchFunction, delay]);

	const onContainerMouseOut = () => {
		clearTimeout(debounce.current);
		if(!isReadOnly) {
			const newArr = Array.from({ length: maxRating }, (elem, idx) => idx <= clickedIndex ? true : false);
			setShowFilledStarArray(newArr);
			onStarsChange(clickedIndex >= 0 ? clickedIndex+1 : 0);
		}
	};
	return <RatingContainer isRTL={isRTL} id={id} componentSize={componentSize} isReadOnly={isReadOnly} onMouseOut={onContainerMouseOut}>
		{showFilledStarArray.map((star, idx) =>
			star ? <SvgStar fill="var(--tortoiseshell-100)" onMouseOut={() => onMouseOutHandler(idx)} onMouseOver={(e) => onMouseOverHandler(e, idx)} onClick={(e) => onMouseClickHandler(e, idx)} key={idx} />
				: <SvgStarOutlined fill={color ? color : "var(--serene-gray)"} key={idx} onClick={(e) => onMouseClickHandler(e, idx)}/>)}
	</RatingContainer>;
};

export { Rating };
