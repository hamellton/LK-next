import React, { useState, useEffect } from "react";
import { Container, DropContainer, DropContainerHeader, DropButton, ItemCardContainer, AddressContainer, ItemTitle, ReturnOptions, ReturnOptionsTitle, ReturnOptionsSub, ButtonContainer, FlexStartSpaced } from "./ReturnRefundMobile.styles";
import { ReturnRefundMobileTypes } from "./ReturnRefundMobile.types";
// import ReturnItemCard from "../ReturnItemCard/ReturnItemCard.component";
import ReturnAddress from "./ReturnAddress/ReturnAddress";
import ReturnRefundRadio from "./ReturnRefundRadio/ReturnRefundRadio.component";
import { DownArrow } from "../../../../Icons";
// import { Flex } from "../../Footer/FooterAccordion/styles";
// import { FlexCenter } from "../../Auth/SignIn/styles";

const ReturnRefundMobile = ({ defaultValue, notCollapsible, refundOptions, onSubmit, showAddress, changeAddressHandler, children, billingAddress, returnRefundMainText, returnRefundSubText, policyLink }: ReturnRefundMobileTypes) => {

	const [selectedValue, setSelectedValue] = useState(defaultValue || "");
	const [isDisabled, setIsDisabled] = useState(true);
	const [showItem, setShowItem] = useState(false);

	function selectedValueHandler(value: string) {
		setSelectedValue(value);
	}

	function showItemHandler() {
		setShowItem(showItem => !showItem);
	}

	useEffect(() => {
		if(selectedValue === "") {
			setIsDisabled(true);
		} else {
			setIsDisabled(false);
		}
	}, [selectedValue]);
	return (
		<>
			<Container fullHeight={!!refundOptions}>
				<ItemCardContainer>
					{notCollapsible ? children : <>
						<DropContainerHeader>
							<ItemTitle>Products to Exchange/Refund</ItemTitle>
							<DropButton showItem={showItem} onClick={showItemHandler}>1 Item <DownArrow /></DropButton>
						</DropContainerHeader>
						<DropContainer showItem={showItem}>
							{children}
							{/* <ReturnItemCard exchangeOrRefund={true} {...returnItemCardData} /> */}
						</DropContainer></>}
				</ItemCardContainer>
				{showAddress && <AddressContainer>
					Your Address
					<ReturnAddress address1={billingAddress?.addressline1 || ""} address2={billingAddress?.addressline2 || ""} city={billingAddress?.city || ""} pincode={billingAddress?.postcode || ""} state={billingAddress?.state || ""} changeHandler={typeof changeAddressHandler === "function" ? changeAddressHandler: () => null}/>
				</AddressContainer>}
				{refundOptions && <ReturnOptions>
					
					<FlexStartSpaced>
						<div>
							{returnRefundMainText && <ReturnOptionsTitle>{returnRefundMainText}</ReturnOptionsTitle>}
							{returnRefundSubText && <ReturnOptionsSub>{returnRefundSubText}</ReturnOptionsSub>}
						</div>
						{policyLink && <a href={policyLink}>View policy</a>}
					</FlexStartSpaced>
					<ReturnRefundRadio refundOptions={refundOptions} defaultValue={defaultValue} selectedValueHandler={selectedValueHandler}/>
				</ReturnOptions>}
			</Container>
			{refundOptions && <ButtonContainer>
				<button disabled={defaultValue ? false : isDisabled} onClick={() => onSubmit(selectedValue)}>Continue</button>
			</ButtonContainer>}
		</>
	);
};

export default ReturnRefundMobile;
