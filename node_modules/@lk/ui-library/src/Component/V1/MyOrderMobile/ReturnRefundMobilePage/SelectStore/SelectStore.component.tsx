import React, { useState } from "react";
import { SelectStoreTypes } from "./SelectStore.types";
import { Container,
	Label,
	StoreCard,
	StoreInput,
	StoreListContainer,
	Sub,
	Title,
	Loading,
} from "./SelectStore.styles";
import GoogleLocationInput from "../../../../Common/GoogleLocationInput";
import StyledCircularLoader from "../../../CircularLoader/CircularLoader";
import { ExchangeBtnWrapper } from "../../../MyAccount/Mobile/ExchangeReturnDetails/ExchangeReturnDetails.styles";
import PrimaryButton from "../../../../Common/PrimaryButton";
import { ComponentSizeENUM, ThemeENUM, TypographyENUM } from "../../../../../Types/general";
import SelectStoreCard from "./SelectStoreCard.component";

const SelectStore = ({ storesData, configData, callback, loading, onsubmit }: SelectStoreTypes) => {

	const [radioSelected, setRadioSelected] = useState(null);

	return (
		<Container>
			<Title>
				Select Store
			</Title>
			<Sub>
				Pick a nearby store to Exchange/Adjust the fit of your product
			</Sub>
			<StoreInput name="address">
				<GoogleLocationInput callback={callback} label="" configData={configData} storeLocator={true} />
				<Title>Nearby Stores</Title>
			</StoreInput>
			{!loading && <StoreListContainer>
				{storesData ? (storesData?.stores?.map((store: any, key: number) => {
					return(
						<StoreCard key={key}>
							<input type="radio" name="address" id={store?.code} onClick={() => setRadioSelected(store)}/>
							<Label htmlFor={store?.code}>
								<div>
									<SelectStoreCard store={store} />
								</div>
							</Label>
						</StoreCard>
					);
				})) : <StoreCard>No Stores Nearby</StoreCard>}
			</StoreListContainer>}
			{storesData && <ExchangeBtnWrapper>
				<PrimaryButton
					onBtnClick={() => onsubmit(radioSelected)
					}
					theme={ThemeENUM.primary}
					font={TypographyENUM.lkSansBold}
					componentSize={ComponentSizeENUM.medium}
					id="btn-continue"
					width="100%"
					height="40px"
					primaryText= {!radioSelected ? "Select Store And Continue" : "Continue"}
					disabled={!radioSelected}
				/>
			</ExchangeBtnWrapper>}
			{loading && <Loading>
				<StyledCircularLoader />
			</Loading>}
		</Container>
	);
};

export default SelectStore;
