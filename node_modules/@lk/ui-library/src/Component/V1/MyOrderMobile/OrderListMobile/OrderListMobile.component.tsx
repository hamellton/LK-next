import React, { useState, useEffect } from "react";
import {
	Container,
	OrderHeader,
	Span,
	Strong,
	OrderTotal,
	ButtonNeedHelpOrderDetails,
	ButtonOrderDetails,
} from "./OrderListMobile.styles";
import { OrderListingType } from "./OrderListMobile.types";
import CompletePayment from "../../MyAccount/MyOrder/CompleteYourPayment";
import Items from "../../MyAccount/MyOrder/Items";
import CompleteStudioBooking from "../../MyAccount/MyOrder/CompleteStudioBooking";
import { currency } from "../../MyAccount/MyOrder/utils";

const OrderListMobile = ({
	orderList,
	dataLocale,
	onAddPowerClick,
	onPdClick,
	editPowerHandler,
	orderStatusRedis,
	formatDate,
	getPendingStatus,
	filterTrackingStatus,
	confirmOrder,
	handlePayNow,
	returnEligibilityDetails,
	returnConfig,
	returnReason,
	handleManuallprescription,
	handleSendEmail,
	handleUploadprescription,
	handleSavedprescription,
	handleCallBack,
	handleOpenPrescriptionImageModal,
	onOrderDetailClick,
	configData,
	onClickReturnExchange, removeDomainName, subdirectoryPath, country, handleStudioFlowAppointmentClick, addPowerCtaClick, addPowerCtaGA
}: OrderListingType) => {
	const [pendingStatus, setPendingStatus] = useState("");
	const [payNow, setPayNow] = useState(null);
	useEffect(() => {
		const cod = orderList?.payments?.paymentList?.some((payment: any) => payment.method === "cod") && orderList.status.state === "NEW";
		const pendingPayment = orderList?.status?.trackingStatus === "PAYMENT_NOT_INITIATED";
		let payNowFlag: string | undefined = "";
		if (cod) {
			payNowFlag = "cod";
		} else if (pendingPayment) {
			payNowFlag = "pendingPayment";
		}
		if (orderStatusRedis && payNowFlag) {
			const { payNow: payNowConfig } = orderStatusRedis;
			setPayNow(payNowConfig[payNowFlag]);
		} else {
			setPayNow(null);
		}
		setPendingStatus(payNowFlag);
	}, [orderList]);

	const handleCompleteOrder = () => {
		confirmOrder(orderList?.id);
	};
	const handleCompletePayment = () => {
		handlePayNow(orderList);
	};
	// const onNeedHelpClick = (order:any) => {
	// 	onNeedHelp(order);
	// };
	const onOrderDetailClickFn = (order: any) => {
		onOrderDetailClick(order);
	};

	const isStuidoFlow = orderList?.studioFlow || false;
	return (
		<Container>
			<OrderHeader>
				<div>
					<Span>
						<Span>{dataLocale.ORDER_ID}: </Span>
						<Strong>{orderList?.id}</Strong>
					</Span>
					<Span>
						<Span>{dataLocale.ORDER_DATE}: </Span>
						<Strong>{formatDate(orderList.createdAt, "D MMM", "")}</Strong>
					</Span>
				</div>
				<OrderTotal>
					<Span>
						<Span>{dataLocale.TOTAL_PRICE}: </Span>
						<Strong>{currency(orderList?.amount?.currencyCode)} {orderList?.amount?.total}</Strong>
					</Span>
				</OrderTotal>
			</OrderHeader>
			{pendingStatus && <CompletePayment mobileView={true} pendingStatus={pendingStatus} payNow={payNow} dataLocale={dataLocale} handleConfirmOrder={handleCompleteOrder} handleCompletePayment={handleCompletePayment} />}

			{isStuidoFlow && (<CompleteStudioBooking dataLocale={dataLocale} orderData={orderList} handleStudioFlowAppointmentClick={handleStudioFlowAppointmentClick} mobileView={true} />
			)}
			{orderList?.items?.length > 0 && orderList?.items?.map((item: any, index: number) => {
				const returnEligibilityItemDetails: any = returnEligibilityDetails?.items ? returnEligibilityDetails?.items?.find(((rItem: any) => rItem.id === item.id)) : null;
				return (
					<React.Fragment key={item.id}>
						<Items
							country={country} removeDomainName={removeDomainName} subdirectoryPath={subdirectoryPath}
							onClickReturnExchange={() => onClickReturnExchange(item.id)}
							mobileView={true}
							onPdClick={() => onPdClick?.({ order: orderList, item })}
							editPowerHandler={() => editPowerHandler?.({ order: orderList, item })}
							listing={true}
							handleOpenPrescriptionImageModal={handleOpenPrescriptionImageModal}
							order={orderList}
							dataLocale={dataLocale}
							onAddPowerClick={() => {
								onAddPowerClick?.({ order: orderList, item }); addPowerCtaClick?.(true); addPowerCtaGA?.(
									"post-purchase-order-listing",
									"add-power",
									item?.id,
									item?.lensType
								);
							}}
							item={item}
							key={`${orderList?.id}_${index}`}
							orderStatusRedis={orderStatusRedis}
							returnSelection={returnConfig.returnSelection}
							returnExchange={returnConfig.returnExchange}
							returnDetails={returnConfig.returnDetails}
							pendingStatus={pendingStatus}
							paymentList={item.paymentList}
							getPendingStatus={getPendingStatus}
							createdAt={orderList.createdAt}
							filterTrackingStatus={filterTrackingStatus}
							formatDate={formatDate}
							returnEligibilityItem={returnEligibilityItemDetails}
							returnReason={returnReason}
							handleManuallprescription={handleManuallprescription}
							handleSavedprescription={handleSavedprescription}
							handleUploadprescription={handleUploadprescription}
							handleCallBack={handleCallBack}
							handleSendEmail={handleSendEmail}
							updateEmbedVideo={() => console.log("")}
							configData={configData}
							redisCommonData={undefined} />
					</React.Fragment>
				);
			})
			}
			<ButtonNeedHelpOrderDetails>
				{/* <ButtonNeedhelp onClick={() => onNeedHelpClick(orderList)}>{dataLocale.NEED_HELP}</ButtonNeedhelp> */}
				<ButtonOrderDetails noLeftMargin={true} onClick={() => onOrderDetailClickFn(orderList)}>{dataLocale.ORDER_DETAIL}</ButtonOrderDetails>
			</ButtonNeedHelpOrderDetails>
		</Container>
	);
};

export default OrderListMobile;
