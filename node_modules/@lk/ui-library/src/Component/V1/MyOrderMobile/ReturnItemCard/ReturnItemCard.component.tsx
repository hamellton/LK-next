import React, { useState } from "react";
import { Container, ItemCard, Media, DetailsGrid, DataHeader, ProductFeatures, AdditionalFeatures, ProductPrice, DetailsButton, CardHeading } from "./ReturnItemCard.styles";
import { ReturnItemCardTypes } from "./ReturnItemCard.types";
import ReturnPowerTable from "./PowerTable/ReturnPowerTable";
import ReturnCarousel from "./Carousel/ReturnCarousel.component";
import { DownArrow } from "../../../../Icons";

const ReturnItemCard = ({ heading, prescription, exchangeOrRefund, thumbnail,
	itemId,
	productName,
	// packageText,
	frameColour,
	frameType,
	productId,
	frameShape,
	frameSize,
	lensPackage,
	image,
	currencySymbol,
	price, border = true }: ReturnItemCardTypes) => {

	const [showDetails, setShowDetails] = useState(false);
	const [displayTable, setDisplayTable] = useState(false);

	function showDetailsHandler() {
		setShowDetails(showDetails => !showDetails);
		if(!showDetails && displayTable) setDisplayTable(false);
	}

	function displayTableHandler() {
		setDisplayTable(displayTable => !displayTable);
	}

	return (
		<>
			{heading && <CardHeading>{heading}</CardHeading>}
			<Container exchangeOrRefund={exchangeOrRefund} border={border}>
				<ItemCard showDetails={showDetails}>
					<Media>
						{showDetails ? (
							<ReturnCarousel
								image1={image || thumbnail || ""}
								image2={thumbnail || ""}
							/>
						) : (
							<img src={thumbnail || image} alt="product image"/>
						) }
					</Media>
					<div>
						<DetailsGrid showDetails={showDetails}>
							<div>
								<DataHeader showDetails={showDetails}>
									<div>{productId || itemId}</div>
									<div>{productName}</div>
								</DataHeader>
								<ProductFeatures showDetails={showDetails}>
									{frameColour} {frameType?.replace("_", " ")} {frameShape}
									<span>{frameSize}</span>
									{/* Green Violet Cat Eye
									<span> full rim</span> */}
								</ProductFeatures>
								{lensPackage &&
								<AdditionalFeatures>
									+ {lensPackage}
									{/* + Normal Corridor Progressive */}
								</AdditionalFeatures>}
							</div>
							<div>
								<ProductPrice showDetails={showDetails} displayTable={displayTable}>
									{currencySymbol} {(price && Math.round(typeof price === "string" ? parseFloat(price) : price)) || 0}
									{/* â‚¹ 5096 */}
									{showDetails && prescription &&
									<div onClick={displayTableHandler}>
										Power Details
										<DownArrow/>
									</div>
									}
								</ProductPrice>
							</div>
						</DetailsGrid>
						{!exchangeOrRefund && showDetails && <ReturnPowerTable displayTable={displayTable} prescription={prescription} />}
						{ !exchangeOrRefund &&
						<DetailsButton showDetails={showDetails}>
							<div onClick={showDetailsHandler}>
								{showDetails ? "Hide Details" : "View Details"}
							</div>
						</DetailsButton>
						}
					</div>
				</ItemCard>
			</Container>
		</>
	);
};

export default ReturnItemCard;
