import React, { BaseSyntheticEvent, useState } from "react";
import { Container, Heading, Tracking, Stage, CurrentIcon, StageData, Checkpoint, StageTitle, StageName, StageDate, StageSubText, Dropdown, DescriptionContainer, Description, Text, Media, TrackingArrow } from "./OrderTrackingMobile.styles";
import { OrderTrackingMobileTypes } from "./OrderTrackingMobile.types";

const OrderTrackingMobile = ({ itemTracking, updateEmbedVideo }: OrderTrackingMobileTypes) => {
	function formatDate(time: number, pattern: string, year = "") {
		let formattedString = "";
		if (isNaN(time)) return "";
		const days = [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ];
		const months = [
			"January",
			"February",
			"March",
			"April",
			"May",
			"June",
			"July",
			"August",
			"September",
			"October",
			"November",
			"December"
		];
		const date = new Date(time).getDate();
		const day = new Date(time).getDay();
		const month = new Date(time).getMonth();
		formattedString = pattern.replace("EEE", days[day].substr(0, 3));
		formattedString = formattedString.replace("MMM", months[month].substr(0, 3));
		// In case of December, Date will replace on second D other than Dec
		if (month === 11 && pattern.includes("D")) {
			const firstPart = formattedString.substr(0, pattern.indexOf("D"));
			const lastPart = formattedString.substr(pattern.indexOf("D") + 1);
			formattedString = firstPart + date + lastPart;
		} else {
			formattedString = formattedString.replace("D", date as any);
		}
		if (year) {
			formattedString = formattedString.concat(" " + new Date(time).getFullYear());
		}
		return formattedString;
	}

	const [showDescription, setShowDescription] = useState(false);

	function clickHandler(e: BaseSyntheticEvent,history:any) {
		if(e.target.tagName !== "IMG") {
			setShowDescription(!showDescription);
		}
		if(e.target.tagName === "IMG") {
			updateEmbedVideo(history.descriptionLink);
			console.log("Video Function");
		}
	}

	return (
		<Container>
			<Heading>
				Tracking Details
			</Heading>
			<Tracking>
				{
					itemTracking.histories.map((history: any, index: number) => {
						return (history.isVisible && <Stage key={index} onClick={(e)=> history.description ? clickHandler(e,history) : undefined}>
							{
								history.current ? (
									<CurrentIcon>
										<span>
											<img src={history.iconUrl} alt="tracking icon" />
										</span>
									</CurrentIcon>
								) : (
									<Checkpoint>
										<span />
									</Checkpoint>
								)
							}
							<StageData>
								<StageTitle>
									<StageName current={history.current}>
										<span>{history.statusLabel}</span>
									</StageName>
									<StageDate>
										<span>{formatDate(history.createdAt, "D MMM", "")}</span>
									</StageDate>
									{history.description && (<Dropdown showDescription={showDescription}>
										<TrackingArrow />
									</Dropdown>)}
								</StageTitle>
								<StageSubText>
									{/* Payment Pending */}
								</StageSubText>
								{history.description &&
								(<DescriptionContainer showDescription={showDescription}>
									<Description>
										<Text>
											{history.description}
										</Text>
										<Media>
											<img src={history.descriptionImageLink} alt="video img" onClick={(e)=> clickHandler(e,history)} aria-label={`Play ${history.descriptionImageLink} video`} />
										</Media>
									</Description>
								</DescriptionContainer>)
								}
							</StageData>
						</Stage>);
					})
				}
			</Tracking>
		</Container>
	);
};

export default OrderTrackingMobile;
