import React, { useState, useRef } from "react";
import MenuItem from "./MenuItem";
import Menu from "./Menu";
// import "./DropDown.scss";
import { AdvDropDownType } from "./AdvancedDropdown.types";
import { DropCustomSelect, DropdDownIconContainer, DropdDropLabel, DropMainInput, DropMainText, DropSelectMain } from "./styles";
import { DownArrow } from "../../../Icons";
// import { DownArrow } from "../Accordion/styles";

const CustomInputSelect = ({
	placeholder = "Select",
	// selectedValue,
	mainFontColor = "#000",
	mainBackgroundColor = "#fff",
	inputLabel,
	values,
	id,
	font,
	menuItemStyles,
	styles,
	value,
	fullWidth = false,
	className = "",
	disabled,
	onBlur,
	isRTL = false,
	dropMainStyles,
	...props
}: AdvDropDownType) => {
	const [dropdownOpen, setDropdownOpen] = useState(false);
	const dropDownRef = useRef(null);
	const emptyData = !(values && values.length > 0);

	return (
		<DropCustomSelect
			ref={dropDownRef}
			aria-disabled={disabled || emptyData}
			className={className}
			data-testid="dropdown-main"
			fullWidth={fullWidth}
			disabled={disabled || emptyData}
			style={{ ...styles }}
			onBlur={() => onBlur ? onBlur(value) : null}
			contentEditable
			tabIndex={0}
			id={id}
			font={font}
			onClick={() => {
				setDropdownOpen(!emptyData ? !dropdownOpen : false);
			}}
		>
			<DropSelectMain style={{ backgroundColor: disabled ? "#e3e3e3" : mainBackgroundColor }}>
				<DropMainText style={typeof dropMainStyles === "object" && dropMainStyles ? { color: mainFontColor, ...dropMainStyles } : { color: mainFontColor }} disabled={disabled}>
					{(value &&
						values &&
						values?.filter(
							v =>
								(v.value &&
									typeof v.value === "string" &&
									typeof value === "string" &&
									v.value?.toLowerCase() === value?.toLowerCase()) ||
								v.value === value ||
								v.value?.toString() === value?.toString()
						)?.[0]?.display) ||
						(value && <span>{value}</span>) || <span>{placeholder}</span>}
				</DropMainText>
				<DropMainInput
					// required
					aria-hidden="true"
					tabIndex={-1}
					value={value}
					{...props}
				/>
				<DropdDownIconContainer isRTL={isRTL}>
					<DownArrow
						style={{
							transition: "transform 300ms ease-in-out",
							cursor: disabled ? "none" : "pointer",
							// fill: "currentColor",
							width: "1em",
							height: "1em",
							display:  disabled ? "none" : "block",
							fontSize: "15px",
							transitionDelay: "0ms",
							transitionDuration: "200ms",
							transitionProperty: "fill",
							transitionTimingFunction: "cubic-bezier(0.4, 0, 0.2, 1)",
							flexShrink: 0,
							userSelect: "none",
							transform: dropdownOpen ? "rotate(180deg)" : "rotate(0deg)",
							color: "mainFontColor",
						}}
						aria-hidden="true"
						// focusable="true"
						// viewBox="0 0 24 24"
					/>
				</DropdDownIconContainer>
				<DropdDropLabel isRTL={isRTL} disabled={disabled}>{inputLabel}</DropdDropLabel>
			</DropSelectMain>
			{dropdownOpen ? <div data-testid="drop-testop" /> : null}
			{dropdownOpen ? (
				<Menu
					alignWidth={Boolean(true)}
					anchorEl={dropDownRef.current}
					open={dropdownOpen}
					onClose={() => setDropdownOpen(false)}
				>
					{!emptyData &&
						values.map((val, i) => (
							<MenuItem
								key={i}
								displayVal={val.display}
								menuItemStyles={menuItemStyles}
								selectedValue={value}
								value={val.value}
								onChange={val.onChange}
							/>
						))}
				</Menu>
			) : null}
		</DropCustomSelect>
	);
};

export default CustomInputSelect;
