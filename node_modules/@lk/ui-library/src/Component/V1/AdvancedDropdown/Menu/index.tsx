import React, { useEffect, useRef, useState } from "react";
// import "./Menu.scss";
import { MenuType } from "./Menu.types";
import { MenuFullpageCoverage, MenuInnerBox, MenuMenuList, MenuOuterPageContainer } from "./styles";

function getOffset(el: HTMLElement) {
	let _x = 0;
	let _y = 0;
	let width: string | number = "auto";
	let height: string | number = "auto";
	const ele = el.getBoundingClientRect();
	if (ele) {
		_x = ele.left;
		_y = ele.top;
		width = ele.width;
		height = ele.height;
	} else {
		let parentEle: HTMLElement | null = el;
		while (parentEle && !isNaN(parentEle.offsetLeft) && !isNaN(parentEle.offsetTop)) {
			_x += parentEle.offsetLeft - parentEle.scrollLeft;
			_y += parentEle.offsetTop - parentEle.scrollTop;
			parentEle = (parentEle.offsetParent as HTMLElement);
		}
	}
	// const styles = getComputedStyle(el);
	return { left: _x, top: _y, width, height };
}

const Menu = ({ open, onClose, anchorEl, alignWidth = false, children }: MenuType) => {
	const menuRef = useRef<HTMLDivElement>(null);
	const outerPageCover = useRef<HTMLDivElement>(null);
	const PosRef = useRef<HTMLDivElement>(null);
	const [styles, setStyles] = useState<{top: number, left: number, maxHeight: number, maxWidth: number, width: string | number}>();
	useEffect(() => {
		if ((PosRef.current || anchorEl) && outerPageCover.current && open) {
			const { top, left, width } = anchorEl ? getOffset(anchorEl) : (PosRef.current ? getOffset(PosRef.current) : { top: 0, left: 0, width: 0 });
			const { width: screenWidth, height: screenHeight } = getOffset(outerPageCover.current);
			const revisedScreenHeight = typeof screenHeight === "string" ? parseFloat(screenHeight) : screenHeight;
			const revisedScreenWidth = typeof screenWidth === "string" ? parseFloat(screenWidth) : screenWidth;
			const availableRight = revisedScreenWidth - left;
			const availableBottom = revisedScreenHeight - top;
			const { width: menuWidth, height: menuHeight } = menuRef.current ? getOffset(menuRef.current) : { width: 0, height: 0 };
			const revisedMenuHeight = typeof menuHeight === "string" ? parseFloat(menuHeight) : menuHeight;
			const revisedMenuWidth = typeof menuWidth === "string" ? parseFloat(menuWidth) : menuWidth;
			const menuTop = revisedMenuHeight < availableBottom ? top : revisedScreenHeight - revisedMenuHeight;
			const menuLeft = revisedMenuWidth < availableRight ? left : revisedScreenWidth - revisedMenuWidth;
			setStyles({
				top: open ? menuTop : top,
				left: open ? menuLeft : left,
				maxHeight: open ? revisedScreenHeight - menuTop : revisedScreenHeight - top,
				maxWidth: open ? revisedScreenWidth - menuLeft : revisedScreenWidth - left,
				width: alignWidth ? width : "auto",
			});
		}
	}, [PosRef.current, outerPageCover.current, anchorEl, open]);
	useEffect(() => {
		function handleClickOutside(event: any) {
			if (menuRef.current && !menuRef.current.contains(event.target)) {
				onClose();
			}
		}
		document.addEventListener("mousedown", handleClickOutside);
		return () => {
			document.removeEventListener("mousedown", handleClickOutside);
		};
	}, []);
	return (
		<div ref={PosRef}>
			<MenuOuterPageContainer
				ref={outerPageCover}
				data-testid="dropdown-op"
				role="presentation"
				style={{ display: open ? "block" : "none" }}
			>
				<MenuFullpageCoverage
					aria-hidden="true"
					// className="menu-fullpage-coverage"
					style={{
						zIndex: -1,
						position: "fixed",
						inset: "0px",
						backgroundColor: "transparent",
					}}
				></MenuFullpageCoverage>
				<MenuInnerBox
					ref={menuRef}
					// className="menu-inner-box"
					style={styles ? { ...styles, height: "auto" } : { visibility: "hidden" }}
				>
					<MenuMenuList>{children}</MenuMenuList>
				</MenuInnerBox>
			</MenuOuterPageContainer>
		</div>
	);
};

export default Menu;
