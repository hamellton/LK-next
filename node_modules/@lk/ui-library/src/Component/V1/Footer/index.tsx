import React, { Fragment, useEffect, useState } from "react";
import * as Icons from "../../../Icons/index";
import { DeviceTypes, TypographyENUM } from "../../../Types/general";
import { FooterTypes } from "./Footer.types";
import Accordion from "./FooterAccordion";
import FooterDropMenu from "./FooterDropMenu";
import {
	FooterContainer,
	MainSection,
	MainSectionList,
	MainSectionListChildren,
	TopRow,
	MainSectionListTitle,
	DownloadAppSection,
	DownloadAppImages,
	DownloadAppText,
	HorizontalLine,
	BottomRow,
	Links,
	SocialLinks,
	SocialLinkText,
	SocialLinkIcons,
	LinkWrapper,
	FooterPara,
	FooterHead,
	FooterTop,
	FooterDropContainer,
	FooterMobileWrapper,
	DownLoadAppIconWrapper,
	DownLoadIcon,
	IconImage,
	DownLoadTextWarpper,
	TextLink,
	HelpTextWrapper,
	HelpMeSubText,
	HelpText,
	ChatIconTextWrapper,
	ChatIconImage,
	ChatText,
	MoreAboutWrapper,
	AccordionItemWrapper,
	AllResevedTextWrapper,
	AllReservedText,
	LinkMainUrl,
	SocialLink,
	LinkWrapperOuter,
	SocialLinkNew
} from "./styles";
const Footer = ({ productType, subdirectoryPath,footerData, dataLocale, footerTopData, deviceType, footerDataMobile, openChatSprinkular, isRTL, country }: FooterTypes) => {
	const openChat =() => {
		openChatSprinkular();
	};
	// let NEW_FOOTER_TOP_DATA;
	// let NEW_FOOTER_DATA;
	// try {
	// 	NEW_FOOTER_TOP_DATA = footerTopData && typeof footerTopData === "string" ? JSON.parse(footerTopData) : footerTopData;
	// } catch(e) {
	// 	console.log("FOOTER PARSING ERR", e);
	// 	NEW_FOOTER_TOP_DATA = footerTopData;
	// }
	// try {
	// 	NEW_FOOTER_DATA = footerData && typeof footerData === "string" ? JSON.parse(footerData) : footerData;
	// } catch(e) {
	// 	console.log("FOOTER PARSING ERR", e);
	// 	NEW_FOOTER_DATA = footerData;
	// }
	// console.log({ footerTopData, NEW_FOOTER_TOP_DATA }, NEW_FOOTER_TOP_DATA?.head, { footerData, NEW_FOOTER_DATA }, "Footer top ui-lib data");
	const footerDesktop = <FooterContainer id="footerContent">
		<TopRow>
			{footerTopData?.head ?
				<FooterTop>
					<FooterHead>{footerTopData?.head}</FooterHead>
					{footerTopData?.info?.map((p, i) => <FooterPara key={i} dangerouslySetInnerHTML={{ __html: p }} />)}
					{footerTopData?.dropData && <FooterDropContainer>{footerTopData?.dropData?.map(fd => <FooterDropMenu key={fd?.label} {...fd} />)}</FooterDropContainer>}
				</FooterTop> : null}
			<MainSection>
				{footerData?.mainSection?.map((msItem, index) => (
					<MainSectionList key={index}>
						<MainSectionListTitle>
							{msItem?.sectionTitle}
						</MainSectionListTitle>
						<MainSectionListChildren>
							{msItem?.sectionChildren?.map((item, index) => (
								<li key={index}>
									{item?.rel?<LinkWrapper href={item?.redirectUrl} target="_blank" rel="noreferrer">
										{item?.name}
									</LinkWrapper> :
										<LinkWrapper href={item?.redirectUrl} target="_blank">
											{item?.name}
										</LinkWrapper>}
								</li>
							))}
						</MainSectionListChildren>
					</MainSectionList>
				))}
			</MainSection>
			<DownloadAppSection>
				<DownloadAppImages>
					{footerData?.applinks?.map((app, i) =>
						<Fragment key={i}>
							<LinkWrapper href={app?.redirectUrl}>
								<img
									src={app.imgUrl}
									alt={app.name}
								/>
							</LinkWrapper>
						</Fragment>
					)}
				</DownloadAppImages>
				<DownloadAppText>{dataLocale?.DOWNLOAD_LENSKART_APP_BUY}</DownloadAppText>
				<DownloadAppText>
					{dataLocale?.DOWNLOADAPP_PRODUCTTYPE}
				</DownloadAppText>
			</DownloadAppSection>
		</TopRow>
		<HorizontalLine></HorizontalLine>
		<BottomRow>
			<Links>
				{footerData?.bottomRow?.map((item, index) => (
					<li key={index}>
						<LinkWrapper href={item?.redirectUrl} target="_blank">
							{item?.name}
						</LinkWrapper>
					</li>
				))}
			</Links>
			<SocialLinks>
				<SocialLinkText>Version 1.0.0</SocialLinkText>
				<SocialLinkText>||</SocialLinkText>
				<SocialLinkText>{dataLocale?.FOLLOW_US_AT}</SocialLinkText>
				<SocialLinkIcons>
					<LinkWrapperOuter isRTL={isRTL}>
						{footerData?.socialLinks?.map((link, index) => (
							<LinkWrapper key={index} href={link?.redirectUrl} target="_blank">
								{link?.name.toLowerCase() === "facebook" && <SocialLinkNew><Icons.Facebook /></SocialLinkNew>}
								{link?.name.toLowerCase() === "instagram" && <SocialLinkNew><Icons.Instagram /></SocialLinkNew>}
								{link?.name.toLowerCase() === "pinterest" && (
									<SocialLinkNew>
										<Icons.Pinterest />
									</SocialLinkNew>
								)}
								{link?.name.toLowerCase() === "twitter" && <SocialLinkNew><Icons.Twitter /></SocialLinkNew>}
							</LinkWrapper>
						))}
					</LinkWrapperOuter>
				</SocialLinkIcons>
			</SocialLinks>
		</BottomRow>
	</FooterContainer>;

	const [isExpand, setIsExpand] = useState(false);
	const handleExpand = () => {
		setIsExpand(!isExpand);
	};
	const [isAndroid, setIsAndroid] = useState(false);

	useEffect(() => {
		if (typeof window !== "undefined") {
			const ua = window.navigator.userAgent;
			if (/Android/i.test(ua)) {
				setIsAndroid(true);
			} else if (/iPhone/i.test(ua)) {
				setIsAndroid(false);
			}
		}
	}, []);

	const footerMobile = <FooterMobileWrapper id="footer">
		<DownLoadAppIconWrapper>
			<DownLoadIcon>
				<a>
					{isAndroid ? <IconImage src="https://static.lenskart.com/media/mobile/universal/assets/ic_android.png"/> : <IconImage src="https://static.lenskart.com/media/mobile/universal/assets/ic_ios.png" />}
				</a>
			</DownLoadIcon>
			<DownLoadTextWarpper isRTL={isRTL}>
				<TextLink>{productType??dataLocale.DOWNLOADAPP_PRODUCTTYPE}</TextLink>
			</DownLoadTextWarpper>
		</DownLoadAppIconWrapper>
		{country === "in" && <HelpTextWrapper>
			<HelpMeSubText> {dataLocale.CAN_WE??"Can we"}</HelpMeSubText>
			<HelpText>{dataLocale.HELP??"Help"}?</HelpText>
		</HelpTextWrapper>}
		{country === "in" && <ChatIconTextWrapper onClick={() => openChat()}>
			<ChatIconImage src="https://static.lenskart.com/media/mobile/universal/images/orderStatus/chat-with-us.png" width={"18px"}></ChatIconImage>
			<ChatText isRTL={isRTL}>{dataLocale?.CHAT_WITH_US || ""}</ChatText>
		</ChatIconTextWrapper>}
		<MoreAboutWrapper>
			<Accordion deviceSpecificIssue={true} contentPadding={"0px"} borderBottomStyle={true} contentColor={"#18cfa8"} contentBgColor={"#27394e"} iconColor={{ color: "#18cfa8" }} titleFontSize={12} btnText={""} isMaxHeight={true} canCollapse={true} icon={""} expand={isExpand} stylePadding={"10px 10px 10px 0"} handleExpand={handleExpand} showBorderTop={true} font={TypographyENUM.lkSerifNormal} backgroundColor={"#27394e"} color={"#ffff"} title={dataLocale.MORE_ABOUT_LENSKART} isRTL={isRTL}>
				<AccordionItemWrapper isRTL={isRTL}>
					{footerDataMobile?.moreAbout &&
						footerDataMobile?.moreAbout?.map((item: any) => {
							if (item.isNewTab)
								return (
									<a
										key={item.name}
										//className={item.name.toLocaleLowerCase().replace(/ /g, "-")}
										href={item.redirectUrl}
										rel="noreferrer"
										target="_blank"
									>
										{item.name}
									</a>
								);
							return (
								<a
									key={item.name}
									//className={item.name.toLocaleLowerCase().replace(/ /g, "-")}
									href={item.redirectUrl}
								>
									{item.name}
								</a>
							);
						})}
				</AccordionItemWrapper>
			</Accordion>
		</MoreAboutWrapper>
		<MoreAboutWrapper msite={true}>
			<SocialLinkText msite={true}>{dataLocale?.FOLLOW_US_AT?.toLowerCase()}</SocialLinkText>
			<SocialLinkIcons msite={true}>
				{footerDataMobile?.socialLinks?.map((link, index) => (
					<LinkWrapper key={index} href={link?.redirectUrl}>
						{/* <i>{link?.name}</i> */}
						{link?.name.toLowerCase() === "facebook" && <SocialLink><Icons.FacebookNew /></SocialLink>}
						{link?.name.toLowerCase() === "instagram" && <SocialLink><Icons.InstagramNew /></SocialLink>}
						{link?.name.toLowerCase() === "pinterest" && (
							<SocialLink>
								<Icons.Pinterest />
							</SocialLink>
						)}
						{link?.name.toLowerCase() === "twitter" && <SocialLink><Icons.TwitterNew /></SocialLink>}
					</LinkWrapper>
				))}
			</SocialLinkIcons>
		</MoreAboutWrapper>
		<AllResevedTextWrapper>
			<AllReservedText>
				Â© {dataLocale.ALL_RIGHTS_RESERVED??"All Rights Reserved"} -<LinkMainUrl href={`${subdirectoryPath}`}>{`lenskart.${country.toLowerCase() === "sg" ? "sg" : "com"}${subdirectoryPath}`}</LinkMainUrl>
			</AllReservedText>
			<AllReservedText>Version 1.0.0</AllReservedText>
		</AllResevedTextWrapper>
	</FooterMobileWrapper>;

	return (
		<>
			{deviceType === DeviceTypes.DESKTOP && footerDesktop}
			{deviceType === DeviceTypes.MOBILE && footerMobile}
		</>
	);
};

export default Footer;
