import React from "react";
import {
	AppointmentCalendarContainer,
	BookAppointmentCTA,
	BookAppointmentCTAContainer,
	BookAppointmentWrapper,
	BookingDetails,
	ConfirmAppointmentScreen,
	ConfirmHeading,
	DateContainer,
	DateDate,
	DateDay,
	DateHeading,
	DateItem,
	DateSubHeading,
	DateWrapper,
	DatesWrapper,
	ErrorBlock,
	Heading,
	PayNowCTAContainer,
	Row,
	RowItem,
	Section,
	StoreAddress,
	StoreDateSelector,
	StoreIcon,
	StoreName,
	StoreNameContainer,
	StoreTimeSelector,
	SubHeading,
	Time,
	TimeContainer,
	TimeItem,
	TimeValue,
	TimeWrapper,
	DateWrapperInner,
	ChooseDateHeading,
} from "./styles";
import { getAMorPM, getTime, isToday } from "../helpers";
import { AnimatedCheck } from "../../../Auth";
import * as Icons from "../../../../../Icons";
import Spinner from "../../../../Common/Spinner";
import { BookAppointmentStudioFlowType } from "../types";

const BookAppointmentStudioFlow = ({
	localeData,
	showSuccessPage,
	bookingCaptureDate,
	bookedTime,
	bookingInfo,
	altStoreNameCatch,
	addressFull,
	paymentPending,
	handlePayNow,
	handleContinueShopping,
	isReschedule,
	error,
	refinedDateData,
	getMonth,
	selectedDate,
	selectedTime,
	bookSlotLoading,
	handleBookAppointment,
	bookAppointmentData,
	bookSlotData,
	handleSelectedTime,
	handleSelectedDate,
}: BookAppointmentStudioFlowType) => {
	const {
		BOOK_APPOINTMENT,
		CHOOSE_A_DATE,
		WHEN_WILL_YOU_ARRIVE,
		CONFIRM_APPOINTMENT,
		NO_SLOTS_AVAILABLE,
		TODAY,
		CONTINUE_SHOPPING,
		APPOINTMENT_BOOKED_FOR,
		APPOINTMENT_CONFIRMED,
		BOOKED_ON,
		PAYMENT_PENDING,
		BLOCK_THE_PRODUCT,
		PAY_NOW,
		ENCOUNTERED_BOOKING_ERROR
	} = localeData || {};

	const CANCEL = "CANCEL";
	const ACTIVE = "ACTIVE";

	const chip = ({
		type,
		/* mode = "", */ date = { date: "", day: "" },
		time = {
			isAvailable: 0,
			date: "",
			slotId: 0,
			startTime: "",
			endTime: "",
		},
		item = { isAvailable: 0, date: "" },
	}: {
		time?: {
			isAvailable?: number;
			date: any;
			slotId: number;
			startTime: string;
			endTime: string;
		};
		type?: number;
		date?: {
			date: string;
			day: any;
		};
		item?: {
			isAvailable?: number;
			date: any;
		};
		mode?: string;
	}) => {
		// const localmode = item.isAvailable === 0 && CANCEL;
		const isSelected = item?.date === selectedDate?.date && ACTIVE;
		const isTimeSelected =
			selectedTime &&
			time &&
			time.date === selectedDate.date &&
			time.slotId === selectedTime.slotId &&
			ACTIVE;
		const isTimeAvaialble = time?.isAvailable === 1 && CANCEL;
		switch (type) {
		case 1:
			return (
				<DateWrapper
					id="date-wrapper"
					onClick={() => {
						if (item.isAvailable === 0) return;
						handleSelectedDate(item);
						handleSelectedTime(null);
					}}
				>
					<DateItem id="date" isSelected={isSelected}>
						<DateDate id="date-date">
							{new Date(date?.date).getDate()}
						</DateDate>
						<DateDay id="date-day">
							{date?.day?.toString()?.slice(0, 3)}
						</DateDay>
						{isToday(new Date(date.date)) && <div>{TODAY}</div>}
					</DateItem>
				</DateWrapper>
			);
		case 2:
			return (
				<TimeItem
					id="time-item"
					isTimeSelected={isTimeSelected}
					isTimeAvaialble={isTimeAvaialble}
					onClick={() => {
						handleSelectedTime(time);
					}}
				>
					<Time id="time">
						<TimeValue>{getTime(time.startTime)}</TimeValue>
					</Time>
					<div> -</div>
					<Time id="time">
						<TimeValue>{getTime(time.endTime)}</TimeValue>
					</Time>
					<Time>
						<TimeValue className="day">{getAMorPM(time.endTime)}</TimeValue>
					</Time>
				</TimeItem>
			);
		default:
			return <></>;
		}
	};

	return (
		<BookAppointmentWrapper id="book-appointment-wrapper">
			{showSuccessPage && (
				<ConfirmAppointmentScreen>
					<AnimatedCheck />
					<ConfirmHeading>{APPOINTMENT_CONFIRMED}</ConfirmHeading>
					<SubHeading>
						{BOOKED_ON} {bookingCaptureDate?.date} {bookingCaptureDate?.month}{" "}
						{bookingCaptureDate?.year}
					</SubHeading>
					<BookingDetails>
						<Section id="section">
							<Row id="row">
								<RowItem id="row-item">
									<Icons.Slot height="1.5em" width="1.5em" />
									<div>
										<StoreName>
											{APPOINTMENT_BOOKED_FOR} {bookedTime.day},{" "}
											{bookedTime.month.slice(0, 3)} {bookedTime.date}{" "}
											{bookedTime.year}
										</StoreName>
										<StoreAddress>{bookingInfo?.time}</StoreAddress>
									</div>
								</RowItem>
							</Row>
							<Row id="row">
								<RowItem id="row-item">
									<StoreIcon src="https://static1.lenskart.com/media/desktop/img/DesignStudioIcons/Store.svg" />
									<div>
										<StoreName>{altStoreNameCatch} </StoreName>
										<StoreAddress>{addressFull}</StoreAddress>
									</div>
								</RowItem>
							</Row>
							{paymentPending && (
								<Row>
									<RowItem id="row-item">
										<Icons.Dollar height="1.5em" width="1.5em" />
										<div>
											<StoreName alert={true}>{ PAYMENT_PENDING }</StoreName>
											<StoreAddress>
												{ BLOCK_THE_PRODUCT }
											</StoreAddress>
										</div>
									</RowItem>
								</Row>
							)}
						</Section>
					</BookingDetails>
					{paymentPending && (
						<PayNowCTAContainer onClick={() => handlePayNow()} primary={true}>
							<BookAppointmentCTA>{ PAY_NOW }</BookAppointmentCTA>
							<Icons.IconRight />
						</PayNowCTAContainer>
					)}
					<PayNowCTAContainer
						onClick={() => handleContinueShopping()}
						primary={!paymentPending}
					>
						<BookAppointmentCTA>{CONTINUE_SHOPPING}</BookAppointmentCTA>
					</PayNowCTAContainer>
				</ConfirmAppointmentScreen>
			)}
			{!showSuccessPage && (
				<>
					<Heading>
						{!isReschedule
							? BOOK_APPOINTMENT?.toLowerCase()
							: "Reschedule your Appointment"}
					</Heading>
					<AppointmentCalendarContainer>
						{!(error && error?.isError) && (
							<StoreNameContainer>
								<StoreName>
									<StoreIcon src="https://static1.lenskart.com/media/desktop/img/DesignStudioIcons/Store.svg" />
									{altStoreNameCatch}
								</StoreName>
								<StoreAddress>{addressFull}</StoreAddress>
							</StoreNameContainer>
						)}
						{!(error && error?.isError) && (
							<StoreDateSelector>
								<ChooseDateHeading>{CHOOSE_A_DATE}</ChooseDateHeading>
								<DateWrapperInner>
									{refinedDateData &&
										Object.keys(refinedDateData).map(
											(month: string, index: number) => (
												<DatesWrapper key={index} id="dates-wrapper">
													<DateSubHeading>
														{getMonth[parseInt(month)].slice(0, 3)}
													</DateSubHeading>
													<DateContainer id="date-container">
														{refinedDateData &&
															refinedDateData[month].map(
																(date: { date: any; day: any }) => {
																	return chip({
																		type: 1,
																		item: date,
																		date: {
																			date: date.date,
																			day: date.day,
																		},
																	});
																}
															)}
													</DateContainer>
												</DatesWrapper>
											)
										)}
								</DateWrapperInner>
							</StoreDateSelector>
						)}
						{!(error && error?.isError) && (
							<StoreTimeSelector>
								<DateHeading>{WHEN_WILL_YOU_ARRIVE}</DateHeading>
								<DateSubHeading>{altStoreNameCatch}</DateSubHeading>
								<TimeWrapper id="time-wrapper">
									<TimeContainer>
										{selectedDate?.timeSlot?.morning ||
											selectedDate?.timeSlot?.afternoon ||
											selectedDate?.timeSlot?.evening ? (
												<>
													{selectedDate?.timeSlot?.morning?.map(
														(slots: {
														isAvailable?: number | undefined;
														date: any;
														slotId: number;
														startTime: string;
														endTime: string;
													}) => {
															return chip({
																type: 2,
																time: { ...slots, date: selectedDate.date },
															});
														}
													)}
													{selectedDate?.timeSlot?.afternoon?.map(
														(slots: {
														isAvailable?: number | undefined;
														date: any;
														slotId: number;
														startTime: string;
														endTime: string;
													}) => {
															return chip({
																type: 2,
																time: { ...slots, date: selectedDate.date },
															});
														}
													)}
													{selectedDate?.timeSlot?.evening?.map(
														(slots: {
														isAvailable?: number | undefined;
														date: any;
														slotId: number;
														startTime: string;
														endTime: string;
													}) => {
															return chip({
																type: 2,
																time: { ...slots, date: selectedDate.date },
															});
														}
													)}
													{selectedDate?.timeSlot?.night?.map(
														(slots: {
														isAvailable?: number | undefined;
														date: any;
														slotId: number;
														startTime: string;
														endTime: string;
													}) => {
															return chip({
																type: 2,
																time: { ...slots, date: selectedDate.date },
															});
														}
													)}
												</>
											) : (
												<span>{NO_SLOTS_AVAILABLE}</span>
											)}
									</TimeContainer>
								</TimeWrapper>
							</StoreTimeSelector>
						)}
						{error && error?.isError && (
							<ErrorBlock>
								<Icons.Danger height="4em" width="4em" />
								<div>
									{ ENCOUNTERED_BOOKING_ERROR }
								</div>
							</ErrorBlock>
						)}
						{!(error && error?.isError) && (
							<BookAppointmentCTAContainer
								enabled={(selectedDate && selectedTime) || false}
								onClick={handleBookAppointment}
								bookSlotLoading={bookSlotLoading}
							>
								{!bookSlotLoading && (
									<BookAppointmentCTA>
										{selectedTime?.slotId === 0
											? "Select Time"
											: CONFIRM_APPOINTMENT}
									</BookAppointmentCTA>
								)}
								{!bookSlotLoading && <Icons.IconRight />}
								{bookSlotLoading && <Spinner show />}
							</BookAppointmentCTAContainer>
						)}
						{error && error?.isError && (
							<PayNowCTAContainer
								onClick={() => handleContinueShopping()}
								primary={true}
							>
								<BookAppointmentCTA>{ CONTINUE_SHOPPING }</BookAppointmentCTA>
								<Icons.IconRight />
							</PayNowCTAContainer>
						)}
						{bookAppointmentData &&
							bookAppointmentData.error &&
							bookAppointmentData?.error?.isError && (
							<ErrorBlock>
								<Icons.Danger height="2em" width="2em" />
								<div>{bookAppointmentData?.error?.message}</div>
							</ErrorBlock>
						)}
						{bookSlotData &&
							bookSlotData.error &&
							bookSlotData?.error?.isError && (
							<ErrorBlock>
								<Icons.Danger height="2em" width="2em" />
								<div>{bookSlotData?.error?.message}</div>
							</ErrorBlock>
						)}
					</AppointmentCalendarContainer>
				</>
			)}
		</BookAppointmentWrapper>
	);
};

export default BookAppointmentStudioFlow;
