
export const groupBy = (data = [], key: string) => {
	return (
		data?.reduce(function (r, a) {
			r[a[key]] = r[a[key]] || [];
			r[a[key]].push(a);
			return r;
		}, Object.create(null)) || {}
	);
};


export const getRefinedData = (inputArr: any) => {
	const arr = inputArr;
	const result: {[key: number]: any} = {};
	arr &&
		arr?.forEach((item: any) => {
			const temp = new Date(item.date);
			const slots = { ...item };
			slots.timeSlot = groupBy(slots?.timeSlot || [], "slotGroup");
			if (temp.getMonth() in result) {
				result[temp.getMonth()] = [...result[temp.getMonth()], slots];
			} else {
				result[temp.getMonth()] = [slots];
			}
		});
	return result;
};

export const isToday = (someDate: Date) => {
	const today = new Date();
	return (
		someDate.getDate() === today.getDate() &&
		someDate.getMonth() === today.getMonth() &&
		someDate.getFullYear() === today.getFullYear()
	);
};

export const getAMorPM = (timeStamp: string) => {
	if (!timeStamp) return "";
	const curHr = parseInt(timeStamp.split(":")[0], 10);
	if (curHr < 12) {
		return "AM";
	}
	return "PM";
};

export const getTime = (time: string) => {
	try {
		if (!time) return "";
		const temp = time.split(":");
		return `${parseInt(temp[0], 10) % 12 === 0 ? 12 : parseInt(temp[0], 10) % 12
		}${temp[1] && parseInt(temp[1]) ? ":" + temp[1] : ""}`;
	} catch (err) {
		return time;
	}
};