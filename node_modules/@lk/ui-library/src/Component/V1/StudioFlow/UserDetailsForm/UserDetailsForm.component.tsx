import React, { ForwardedRef, forwardRef } from "react";
import useForm from "../../../hooks/useForm";
// import FormField from "../FormField/FormField";
import GenderRadio from "../GenderRadio/GenderRadio.component";
import { ButtonWrapper, FieldGroup, FormWrapper, Heading, NoteContent, NoteFooter, NoteHeadingWrapper } from "./UserDetailsForm.styles";
import { UserDetailsFormPropsType } from "./UserDetailsForm.types";
import { Note } from "../Note/Note.component";
import Button from "../../Button";
import { ComponentSizeENUM, TypographyENUM } from "../../../../Types/general";
import { typeENUM } from "../../Button/Button.types";
import * as Icons from "../../../../Icons";
import FloatingLabelInput from "../../../Common/FloatingLabelInput";
import { getNumberLengthFromCode, studioFlowValidations } from "../../../../helpers";

// eslint-disable-next-line react/display-name
const UserDetailsForm = forwardRef(({ submitCallback, initialFormState, localeData, isRTL,genderConfig }: UserDetailsFormPropsType, ref: ForwardedRef<HTMLButtonElement>) => {

	const {
		data: formData,
		setValue,
		errors,
		// isFormValid,
		// validate,
		// validateAll,
		setTouched,
		touched,
		onSubmit
	} = useForm(initialFormState, studioFlowValidations(initialFormState));

	return (
		<FormWrapper onSubmit={onSubmit(submitCallback)}>
			<FieldGroup>
				<FloatingLabelInput
					noSpecialChar
					isRTL={isRTL}
					disabled={false}
					label={localeData.FIRST_NAME as string + "*"}
					type="text"
					width="100%"
					font={TypographyENUM.lkSansRegular}
					initialValue={formData.firstName}
					getInputValue={(val) => setValue("firstName", val)}
					handleError={() => setTouched("firstName", true)}
					errorMessage={touched.firstName ? errors?.firstName : ""}
				/>
				{/* <FormField
					value={formData.firstName}
					onChange={(e) => setValue("firstName", e.target.value)}
					onBlur={() => setTouched("firstName", true)}
					isRTL={isRTL}
					placeholder={localeData.FIRST_NAME as string + "*"}
					error={touched.firstName ? errors?.firstName : ""}
					isError={Boolean(touched.firstName && errors?.firstName)}
					isFullWidth={true}
				/> */}
				<FloatingLabelInput
					noSpecialChar
					isRTL={isRTL}
					disabled={false}
					label={localeData.LAST_NAME as string + "*"}
					type="text"
					width="100%"
					font={TypographyENUM.lkSansRegular}
					initialValue={formData.lastName}
					getInputValue={(val) => setValue("lastName", val)}
					handleError={() => setTouched("lastName", true)}
					errorMessage={touched.lastName ? errors?.lastName : ""}
				/>
				{/* <FormField
					value={formData.lastName}
					onChange={(e) => setValue("lastName", e.target.value)}
					onBlur={() => setTouched("lastName", true)}
					isRTL={isRTL}
					placeholder={localeData.LAST_NAME as string + "*"}
					error={touched.lastName ? errors?.lastName : ""}
					isError={Boolean(touched.lastName && errors?.lastName)}
					isFullWidth={true}
				/> */}
			</FieldGroup>
			<FieldGroup>
				<FloatingLabelInput
					isNumberOnly
					isRTL={isRTL}
					disabled={false}
					label={localeData.PHONE_NUMBER as string + "*"}
					type="tel"
					width="100%"
					font={TypographyENUM.lkSansRegular}
					initialValue={formData.phone}
					getInputValue={(val) => {
						if ((val.charCodeAt(val.length - 1) > 47 &&
								val.charCodeAt(val.length - 1) < 58 && val.length <= 8) || (val === "" && formData.phone !== "")) {
							setValue("phone", val);
						}
					}}
					handleError={() => setTouched("phone", true)}
					errorMessage={touched.phone ? errors?.phone : ""}
					countryCodePrefix={formData.phoneCode}
					maxLength={getNumberLengthFromCode(formData.phoneCode)}
				/>
				{/* <FormField
					value={formData.phone}
					onChange={(e) => {
						if ((e.target.value.charCodeAt(e.target.value.length - 1) > 47 &&
							e.target.value.charCodeAt(e.target.value.length - 1) < 58 && e.target.value.length <= 8) || (e.target.value === "" && formData.phone !== ""))
							setValue("phone", e.target.value);
					}}
					onBlur={() => setTouched("phone", true)}
					isRTL={isRTL}
					placeholder={localeData.PHONE_NUMBER as string + "*"}
					error={touched.phone ? errors?.phone : ""}
					isError={Boolean(touched.phone && errors?.phone)}
					isFullWidth={true}
				>
					<div>{formData.phoneCode}</div>
				</FormField> */}
				<FloatingLabelInput
					isRTL={isRTL}
					disabled={false}
					label={localeData.EMAIL_ADDRESS as string + "*"}
					type="email"
					width="100%"
					font={TypographyENUM.lkSansRegular}
					initialValue={formData.email}
					getInputValue={(val) => setValue("email", val)}
					handleError={() => setTouched("email", true)}
					errorMessage={touched.email ? errors?.email : ""}
				/>
				{/* <FormField
					value={formData.email}
					onChange={(e) => setValue("email", e.target.value)}
					onBlur={() => setTouched("email", true)}
					isRTL={isRTL}
					placeholder={localeData.EMAIL_ADDRESS as string}
					error={touched.email ? errors?.email : ""}
					isError={Boolean(touched.email && errors?.email)}
					isFullWidth={true}
				/> */}
			</FieldGroup>
			<FieldGroup>
				<GenderRadio
					row={1}
					column={12}
					value={formData.gender}
					onChange={(gender: string) => setValue("gender", gender)}
					onBlur={() => setTouched("gender", true)}
					error={errors?.gender}
					touched={touched?.gender as boolean}
					localeData={localeData}
					genderConfig={genderConfig}
				/>
			</FieldGroup>
			<Note>
				<NoteHeadingWrapper>
					<Icons.Warning />
					<Heading>{localeData.PLEASE_NOTE as string}</Heading>
				</NoteHeadingWrapper>
				<NoteContent>
					{localeData.USER_DETAILS_FORM_NOTE_1 as string}
					<div>
						<strong>{localeData.USER_DETAILS_FORM_NOTE_2 as string}</strong>
					</div>
				</NoteContent>
				<NoteFooter>{localeData.USER_DETAILS_FORM_NOTE_3 as string}</NoteFooter>
			</Note>
			<ButtonWrapper>
				<Button
					ref={ref}
					width="100"
					id="submit-store"
					font={TypographyENUM.lkSansRegular}
					buttonType={typeENUM.submit}
					componentSize={ComponentSizeENUM.medium}
					rightIcon={<Icons.ChevronRight />}
					showRightIcon={true}
					text={localeData.SELECT_STORE as string}
				/>
			</ButtonWrapper>
		</FormWrapper>
	);
});

export { UserDetailsForm };
