import React, { ForwardedRef, forwardRef } from "react";
import useForm from "../../../hooks/useForm";
import MsiteGenderRadio from "../MsiteGenderRadio/MsiteGenderRadio.component";
import { ButtonWrapper, FormWrapper } from "../UserDetailsForm/UserDetailsForm.styles";
import { UserDetailsFormPropsType } from "../UserDetailsForm/UserDetailsForm.types";
import { getNumberLengthFromCode, studioFlowValidations } from "../../../../helpers";
import { CLCheckboxContainer, CLCheckboxIcon, CLCheckboxInfo, TAndC, MsiteFieldGroup, FieldContainer } from "./MsiteUserDetailsForm.styles";
import SvgCheckboxFilled from "../../../../Icons/CheckboxFilled";
import Button from "../../Button";
import { ComponentSizeENUM, TypographyENUM } from "../../../../Types/general";
import { typeENUM } from "../../Button/Button.types";
import FloatingLabelInput from "../../../Common/FloatingLabelInput";
import * as Icons from "../../../../Icons";
import { FloatingInputWrapper } from "../../CheckoutMobile/AddAddressForm/AddAddressForm.styles";

// eslint-disable-next-line react/display-name, @typescript-eslint/no-unused-vars
const MsiteUserDetailsForm = forwardRef(({
	submitCallback,
	initialFormState,
	isCLProduct,
	localeData,
	tNCLink,
	isRTL,
	genderConfig
}: UserDetailsFormPropsType, ref: ForwardedRef<HTMLButtonElement>) => {
	const {
		data: formData,
		setValue,
		errors,
		// isFormValid,
		// validate,
		// validateAll,
		setTouched,
		touched,
		onSubmit
	} = useForm(initialFormState, studioFlowValidations(initialFormState)); // Note: Include CL checkbox in initial state if CL product in cart.
	return (
		<FormWrapper onSubmit={onSubmit(submitCallback)}>
			<FieldContainer>
				<FloatingInputWrapper>
					<FloatingLabelInput
						noSpecialChar
						isRTL={isRTL}
						disabled={false}
						label={localeData.FIRSTNAME as string + "*"}
						type="text"
						width="100%"
						font={TypographyENUM.lkSansRegular}
						initialValue={formData.firstName}
						getInputValue={(val) => setValue("firstName", val)}
						handleError={() => setTouched("firstName", true)}
						errorMessage={touched.firstName ? errors?.firstName : ""}
					/>
				</FloatingInputWrapper>
			</FieldContainer>
			<FieldContainer>
				<FloatingInputWrapper>
					<FloatingLabelInput
						noSpecialChar
						isRTL={isRTL}
						disabled={false}
						label={localeData.LAST_NAME as string + "*"}
						type="text"
						width="100%"
						font={TypographyENUM.lkSansRegular}
						initialValue={formData.lastName}
						getInputValue={(val) => setValue("lastName", val)}
						handleError={() => setTouched("lastName", true)}
						errorMessage={touched.lastName ? errors?.lastName : ""}
					/>
				</FloatingInputWrapper>
			</FieldContainer>
			<FieldContainer>
				<FloatingInputWrapper>
					<FloatingLabelInput
						isNumberOnly
						isRTL={isRTL}
						disabled={false}
						label={localeData.MOBILE_NUMBER as string + "*"}
						type="tel"
						width="100%"
						font={TypographyENUM.lkSansRegular}
						initialValue={formData.phone}
						getInputValue={(val) => {
							if ((val.charCodeAt(val.length - 1) > 47 &&
								val.charCodeAt(val.length - 1) < 58 && val.length <= 8) || (val === "" && formData.phone !== "")) {
								setValue("phone", val);
							}
						}}
						handleError={() => setTouched("phone", true)}
						errorMessage={touched.phone ? errors?.phone : ""}
						countryCodePrefix={formData.phoneCode}
						maxLength={getNumberLengthFromCode(formData.phoneCode)}
					/>
				</FloatingInputWrapper>
			</FieldContainer>
			<FieldContainer>
				<FloatingInputWrapper>
					<FloatingLabelInput
						isRTL={isRTL}
						disabled={false}
						label={localeData.EMAIL_ID as string + "*"}
						type="email"
						width="100%"
						font={TypographyENUM.lkSansRegular}
						initialValue={formData.email}
						getInputValue={(val) => setValue("email", val)}
						handleError={() => setTouched("email", true)}
						errorMessage={touched.email ? errors?.email : ""}
					/>
				</FloatingInputWrapper>
			</FieldContainer>
			<MsiteFieldGroup>
				<MsiteGenderRadio
					row={1}
					column={12}
					value={formData.gender}
					onChange={(gender: string) => setValue("gender", gender)}
					onBlur={() => setTouched("gender", true)}
					error={errors?.gender}
					touched={touched?.gender as boolean}
					localeData={localeData}
					genderConfig={genderConfig}
				/>
			</MsiteFieldGroup>
			{isCLProduct && (
				<CLCheckboxContainer onClick={() => setValue("contactLensChecked", !formData.contactLensChecked)}>
					<CLCheckboxIcon isChecked={formData?.contactLensChecked}><SvgCheckboxFilled /></CLCheckboxIcon>
					<CLCheckboxInfo>
						{localeData.CL_CHECK_TEXT_1 as string} <TAndC href={tNCLink} target={"_blank"}>
							{
              localeData.TERMS_AND_CONDITIONS as string
							}
						</TAndC> {localeData.CL_CHECK_TEXT_2 as string}
					</CLCheckboxInfo>
				</CLCheckboxContainer>
			)}
			<ButtonWrapper>
				<Button
					ref={ref}
					width="100"
					id="submit-store"
					font={TypographyENUM.lkSansRegular}
					buttonType={typeENUM.submit}
					componentSize={ComponentSizeENUM.medium}
					rightIcon={<Icons.ChevronRight />}
					showRightIcon={true}
					text={localeData.CONFIRM_DETAILS as string}
				/>
			</ButtonWrapper>
		</FormWrapper>
	);
});

export { MsiteUserDetailsForm };