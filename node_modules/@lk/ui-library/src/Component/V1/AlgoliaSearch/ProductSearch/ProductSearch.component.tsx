import React from "react";
import { Icons } from "../../../..";
import { Highlight } from "../Highlight";
import TypingLoader from "../Loader";
import {
	SearchProductCard,
	ImageWithLabelWrapper,
	CardImageWrapper,
	ImageLabelContainer,
	ImageLabel,
	ProductContentWrapper,
	ProductContent,
	ProductBrand,
	ProductDetail,
	ViewSimilarBtn,
	FillUpIcon,
	CardItemSeperator,
} from "./styles";

interface ProductSearchComponentTypes{
  inStock:boolean,
	isAvailableStore:boolean,
	isViewSimilar:boolean,
 item: {
    imageUrl?: string;
    __autocomplete_id?: string;
    brand_name?: string;
    searchProductName?: string;
    productId?: string;
    _highlightResult?: {
      productId?: {
        value?: string;
      };
    };
  },
	selected:number,
}

const ProductSearchComponent = ({
	inStock,
	isAvailableStore,
	isViewSimilar,
	item,
	selected,
}: ProductSearchComponentTypes) => {
	return (
		<>
			<SearchProductCard
				inStock={inStock}
				isAvailableStore={isAvailableStore}
				isViewSimilar={isViewSimilar}
				className="aa-ItemLink"
			>
				<ImageWithLabelWrapper>
					<CardImageWrapper
						src={item?.imageUrl??"https://static1.lenskart.com/media/desktop/img/jul23/result/nores_svg.svg"}
						onError={(e: React.SyntheticEvent<HTMLImageElement, Event>) => {
							const target = e.target as HTMLImageElement;
							target.style.content =
                "url('https://static1.lenskart.com/media/desktop/img/jul23/result/nores_svg.svg')";
						}}
						height={40}
						width={40}
						enableBorder={false}
						selected={selected == Number(item.__autocomplete_id)}
					></CardImageWrapper>
					{
						<ImageLabelContainer>
							<ImageLabel>
								{inStock
									? "Only at store"
									: isAvailableStore
										? isViewSimilar
											? "Out of Stock"
											: "Only at store"
										: "Out of Stock"}
							</ImageLabel>
						</ImageLabelContainer>
					}
				</ImageWithLabelWrapper>

				<div className="aa-ItemContent">
					<ProductContentWrapper>
						<ProductContent>
							<Highlight hit={item} attribute="productId" />
							<ProductBrand>{item?.brand_name}</ProductBrand>
							<ProductDetail>{item?.searchProductName}</ProductDetail>
						</ProductContent>
						<ViewSimilarBtn>
							{selected != Number(item.__autocomplete_id) && (
								<>
									<div>{"View Similar"}</div>
									<Icons.Polygon height={8} width={8} />
								</>
							)}
							<TypingLoader show={selected == Number(item.__autocomplete_id)} />
						</ViewSimilarBtn>
					</ProductContentWrapper>
				</div>
				<FillUpIcon>
					<div className="aa-fill-up-icon">
						{selected != Number(item.__autocomplete_id) && (
							<Icons.FillUp height={"12"} width={"12"} />
						)}
						<TypingLoader show={selected == Number(item.__autocomplete_id)} />
					</div>
				</FillUpIcon>
			</SearchProductCard>
			<CardItemSeperator className="aa-item-seperator" />
		</>
	);
};

export default ProductSearchComponent;
