import React from "react";
import { ComponentSizeENUM, ThemeENUM, TypographyENUM } from "../../../../../Types/general";
import Pricing from "../../../../Common/Price/Price.component";
import PrimaryButton from "../../../../Common/PrimaryButton";
import { AnchorTag } from "../../../ProductCard/styles";
import { CancellationReason, ChangedMind, CopyCode, RefundAmount, RefundAmountPrice, RefundAmountWrapper, RefundBtnWrapper, RefundCancalation as RefundCancelation, RefundCodeHead, RefundCodeText, RefundCompleteWrapper, RefundHead, RefundInfoText, RefundInfoWrapper, RefundInputCode, RefundMethod, RefundStoreCode, RefundStoreCredit, RefundStoreCreditAmount, SuccessImage, UseStoreCredit } from "./RefundDetails.styles";
import { RefundDetailsType } from "./RefundDetails.type";

const RefundDetails = ({
	id,
	font,
	UrlImage,
	dataLocale,
	price,
	isRTL = false,
}: RefundDetailsType) => {

	function clickContinue(): void {
		throw new Error("Function not implemented.");
	}

	return (
		<RefundInfoWrapper id={id} styleFont={font}>
			<RefundCompleteWrapper>
				<SuccessImage><img src={UrlImage} alt="success icon" /></SuccessImage>
				<RefundHead>{dataLocale.REFUND_HEADING}</RefundHead>
				<RefundInfoText>{dataLocale.REFUND_TEXT}</RefundInfoText>
			</RefundCompleteWrapper>
			<RefundAmountWrapper>
				<RefundMethod>{dataLocale.REFUND_METHOD}</RefundMethod>
				<RefundAmount>{dataLocale.REFUND_AMOUNT}</RefundAmount>
			</RefundAmountWrapper>
			<RefundStoreCredit>
				<RefundStoreCreditAmount>{dataLocale.REFUND_CREDIT_AMOUNT}</RefundStoreCreditAmount>
				<RefundAmountPrice>
					<Pricing id="price"
						isDiscountPriceBigger={true}
						finalPriceColor="var(--black)"
						actualPrice={price.basePrice}
						finalPrice={price.lkPrice}
						isMobileView={true}
						hasSpecialPrice={(price.lkPrice === 0 || price.lkPrice === price.basePrice) ? false : true}
						componentSize={ComponentSizeENUM.large}
						font={font}
						strikeThroughColor="var(--serene-gray)"
						actualPriceColor="var(--serene-gray)"
						styleTheme={ThemeENUM.primary}
						currencyCode={price.symbol}
						isRTL={isRTL}
						isGridView={false}
					></Pricing>
				</RefundAmountPrice>
			</RefundStoreCredit>
			<RefundStoreCode>
				<RefundCodeHead>{dataLocale.REFUND_CODE_HEAD_TEXT}</RefundCodeHead>
				<RefundCodeText>{dataLocale.REFUND_CODE_TEXT}</RefundCodeText>
				<RefundInputCode>
					<input readOnly type="text" value="8916-IEADT-JJKH" />
					<CopyCode>{dataLocale.COPY_CODE_TEXT}</CopyCode>
					<UseStoreCredit>
						<AnchorTag href="https://www.lenskart.com/how-to-use-your-store-credit">{dataLocale.HOW_TO_USE_STORE_CREDIT}</AnchorTag></UseStoreCredit>
				</RefundInputCode>
			</RefundStoreCode>
			<RefundCancelation>
				<CancellationReason>
					{dataLocale.cancellationReasonText}
				</CancellationReason>
				<ChangedMind>
					{dataLocale.changedMindText}
				</ChangedMind>
			</RefundCancelation>
			<RefundBtnWrapper>
				<PrimaryButton
					primaryText={dataLocale.CONTINUE_SHOPPING}
					font={TypographyENUM.lkSansBold}
					componentSize={ComponentSizeENUM.medium}
					onBtnClick={() => clickContinue()}
					id="btn-primary-cl"
					width={"100%"}
					height="46px"
					theme={ThemeENUM.primary}
				/>
			</RefundBtnWrapper>
		</RefundInfoWrapper>
	);
};

export { RefundDetails };
