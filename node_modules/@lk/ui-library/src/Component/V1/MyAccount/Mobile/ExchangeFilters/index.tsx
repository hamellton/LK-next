import React from "react";
import { ExchangeFilterGroupTypes, FilterTypes, OptionTypes, filterTypeENUM, handleClickAttrs } from "./ExchangeFilter.types";
import Accordion from "./ExchangeFilter";
import { ComponentSizeENUM, ThemeENUM, TypographyENUM } from "../../../../../Types/general";
import { CheckBoxLabel, ExchangeFilterInner, ExchangeFilterWrapper, FilterHeading, FilterItemsWrapper, Label, ReasonTitle, TextareaWrapper as TextareaWrapper } from "./styles";
import FormTextarea from "../../../../Common/Textarea";
import { ExchangeBtnWrapper } from "../ExchangeReturnDetails/ExchangeReturnDetails.styles";
import PrimaryButton from "../../../../Common/PrimaryButton";

const ExchangeFilter = ({ selectedMainOptionId, selectedSecondaryOptionId, id, FilterTitle, PrimaryText, AdditionComment, filters, font, onChange, onSubmit, /* filterSelected, */ isRTL = false, /* defaultExpand = 0, */ padding = false, type=filterTypeENUM.CHECKBOX, canCollapse, showBorderTop }: ExchangeFilterGroupTypes) => {
	// const [expandIndex, setExpandIndex] = useState(defaultExpand);
	const handleExpand = (itemId: string) => {
		// if (index === expandIndex) {
		// 	setExpandIndex(0);
		// } else 
		// setExpandIndex(index);
		onChange({ mainOptionId: itemId, secondaryOptionId: undefined });
	};

	const handleClick = ({ mainOptionId, secondaryOptionId }: handleClickAttrs) => {
		// const targetValue: string = event.target.value;
		onChange({ mainOptionId, secondaryOptionId });
		// return null;
	};

	return (
		<ExchangeFilterWrapper>
			<FilterHeading>{FilterTitle}</FilterHeading>
			<ExchangeFilterInner>
				{filters.map((item: FilterTypes) => {
					return (
						<Accordion
							font={font}
							title={item.reason}
							expand={canCollapse ? selectedMainOptionId === item?.id : true}
							handleExpand={() => handleExpand(item?.id)}
							key={item?.id}
							id={id}
							canCollapse={!!canCollapse}
							showBorderTop={!!showBorderTop}
							isMaxHeight={type === filterTypeENUM.CHECKBOX}
							isComponent={type === filterTypeENUM.COMPONENT}
							padding={padding}
							height={item?.height}
						>
							{type === filterTypeENUM.COMPONENT && item?.component && <>{item?.component()}</>}
							{type !== filterTypeENUM.COMPONENT &&
								<FilterItemsWrapper column={type === filterTypeENUM.CHECKBOX} isRTL={false}>
									{item.secondaryReasons && item.secondaryReasons.map((item2: OptionTypes, index: number) => (
										<FilterItemsWrapper key={item2?.id} isRTL={false}>
											<Label>
												{type === filterTypeENUM.CHECKBOX && (
													<>
														<input
															type="radio"
															name="radio"
															value={item2.id}
															id={`${item2.id}-${index.toString()}`}
															onChange={() => handleClick({ mainOptionId: item?.id, secondaryOptionId: item2?.id })}
															checked={(item.id === selectedMainOptionId) && (item2.id === selectedSecondaryOptionId)}
														/>

														<CheckBoxLabel isRTL={isRTL}>
															<ReasonTitle>{item2.reason}</ReasonTitle>
														</CheckBoxLabel>

													</>
												)}

											</Label>
										</FilterItemsWrapper>
									)
									)}
								</FilterItemsWrapper>
							}
						</Accordion>
					);
				})}
			</ExchangeFilterInner>
			<FilterHeading className="margin-top10">{AdditionComment}</FilterHeading>
			<TextareaWrapper>
				<FormTextarea value={""} width={""} label={""} placeholder="Write here" isRTL={false} />
			</TextareaWrapper>

			<ExchangeBtnWrapper>
				<PrimaryButton
					onBtnClick={onSubmit}
					theme={ThemeENUM.primary}
					font={TypographyENUM.lkSansBold}
					componentSize={ComponentSizeENUM.medium}
					id="btn-continue"
					width="100%"
					height="40px"
					primaryText={!selectedMainOptionId || !selectedSecondaryOptionId ? PrimaryText.disable : PrimaryText.enable}
					disabled={!selectedMainOptionId || !selectedSecondaryOptionId}
				/>
			</ExchangeBtnWrapper>
		</ExchangeFilterWrapper>
	);
};

export default ExchangeFilter;
