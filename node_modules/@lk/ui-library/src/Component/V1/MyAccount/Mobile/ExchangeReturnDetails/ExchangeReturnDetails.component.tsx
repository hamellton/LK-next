/* eslint-disable react/jsx-no-duplicate-props */
import React from "react";
// import Call from "../../../../../Icons/Call";
// import Direction from "../../../../../Icons/Direction";
import { ComponentSizeENUM, ThemeENUM, TypographyENUM } from "../../../../../Types/general";
import Pricing from "../../../../Common/Price/Price.component";
import PrimaryButton from "../../../../Common/PrimaryButton";
import { ExchangeCurrentStatus } from "../ExchangeCurrentStatus/ExchangeCurrentStatus.component";
import { ProductTexTitle, ProductTextDes, ReturnTitle, ExchangeInfoWrapper, ExchangeProductInfo, ExchangeProductImage, ExchangeProductDes, ExchangeBtnWrapper, NeedHelpWrapper, NeedHelp, ProductReturnWrapper, ChatWithUs, NeedAddress, ProductSku, ExchangePrice, CancelledImage, CancelledWrapper, CancelledTitle, StoreddressText, StoreNameText, P, CompleteStoreAddress, AddressStoreWrapper, CompleteStoreAddressWrapper, StoreCallAction, /*DirectionBtn, CallActionBtn,*/ StoreTimings, NeedHeading } from "./ExchangeReturnDetails.styles";
import { ExchangeReturnDetailsType } from "./ExchangeReturnDetails.type";

const ExchangeReturnDetails = (
	props: ExchangeReturnDetailsType) => {
	const {
		id,
		font,
		dataLocale,
		PRODUCT_IMAGE,
		TICK_TEXT,
		NEED_HELP,
		CROSS_ICON,
		storeAddress,
		shippingAddress,
		price,
		status,
		isCurrent,
		isCancelled,
		isRTL = false,
	} = props;
	return (
		<ExchangeInfoWrapper id={id} styleFont={font}>
			{isCancelled!== "cancelled" ? (
				<NeedHelpWrapper>
					<img src={TICK_TEXT} />
					<NeedHelp>{NEED_HELP}</NeedHelp>
					<ChatWithUs>
						<PrimaryButton
							onBtnClick={() => null}
							theme={ThemeENUM.primary}
							font={TypographyENUM.lkSansBold}
							componentSize={ComponentSizeENUM.medium}
							id="need-help-btn"
							width="105px"
							height="32px"
							backgroundColor="inherit"
							primaryText={dataLocale.TextChat}
						/>
					</ChatWithUs>
				</NeedHelpWrapper>
			) : <CancelledWrapper>
				<CancelledImage>
					<img src={CROSS_ICON} alt="close" />
				</CancelledImage>
				<CancelledTitle>{dataLocale.CANCELLED_TITLE}</CancelledTitle>
			</CancelledWrapper>
			}
			{isCurrent == "current" && (
				<ProductReturnWrapper>
					<ExchangeCurrentStatus componentSize={ComponentSizeENUM.large} font={font} id={id} status={status} dataLocale={dataLocale} PrimaryText={""} TITLE={dataLocale.PRODUCT_STATUS} />
				</ProductReturnWrapper>
			)}
			<ProductReturnWrapper>
				<ReturnTitle>
					{dataLocale.TITLE}
				</ReturnTitle>
				<ExchangeProductInfo>
					<ExchangeProductImage>
						<img src={PRODUCT_IMAGE} />
					</ExchangeProductImage>
					<ExchangeProductDes>
						<ProductSku>{dataLocale.SKU}</ProductSku>
						<ProductTexTitle>{dataLocale.PRODUCT_TITLE}</ProductTexTitle>
						<ProductTextDes>{dataLocale.PRODUCT_DESCRIPTION}</ProductTextDes>
						<ProductTextDes>{dataLocale.LENS_DESCRIPTION}</ProductTextDes>
						<ExchangePrice>
							<Pricing id="price"
								isDiscountPriceBigger={true}
								finalPriceColor="var(--black)"
								actualPrice={price.basePrice}
								finalPrice={price.lkPrice}
								isMobileView={true}
								hasSpecialPrice={(price.lkPrice === 0 || price.lkPrice === price.basePrice) ? false : true}
								componentSize={ComponentSizeENUM.large}
								isGridView={false}
								strikeThroughColor="var(--serene-gray)"
								actualPriceColor="var(--serene-gray)"
								styleTheme={ThemeENUM.primary}
								font={TypographyENUM.lkSansBold}
								currencyCode={price.symbol}
								isRTL={isRTL}
							></Pricing>
						</ExchangePrice>
					</ExchangeProductDes>
				</ExchangeProductInfo>
				<NeedAddress>
					{isCancelled == "cancelled" ? (
						<AddressStoreWrapper>
							<StoreddressText>{storeAddress.STORE_ADDRESS}</StoreddressText>
							<CompleteStoreAddressWrapper>
								<CompleteStoreAddress>
									<StoreNameText>{shippingAddress.storeName}</StoreNameText>
									{shippingAddress.addressline1 ? <P>{shippingAddress.addressline1},</P> : ""}
									{shippingAddress.addressline2 ? <P>{shippingAddress.addressline2},</P> : ""}
									<StoreTimings>
										<strong>{storeAddress.TIMINGS}</strong><span>{storeAddress.SYMBOL_COLON}</span><span>{storeAddress.WORKING_HOURS}</span>
									</StoreTimings>
								</CompleteStoreAddress>
								<StoreCallAction>
									{/* <DirectionBtn><i><Call /></i>Direction</DirectionBtn> */}
									{/* <CallActionBtn><i><Direction /></i>Call Store</CallActionBtn> */}
								</StoreCallAction>
							</CompleteStoreAddressWrapper>
						</AddressStoreWrapper>
					) : <NeedHeading>{dataLocale.WE_NEED_YOUR_ADDRESS_TO_PROCEED}</NeedHeading>}
				</NeedAddress>
				<ExchangeBtnWrapper>
					<PrimaryButton
						onBtnClick={() => null}
						theme={ThemeENUM.primary}
						font={TypographyENUM.lkSansBold}
						componentSize={ComponentSizeENUM.medium}
						id="btn-continue"
						width="100%"
						height="40px"
						primaryText={dataLocale.PrimaryText}
					/>
				</ExchangeBtnWrapper>
			</ProductReturnWrapper>
		</ExchangeInfoWrapper>
	);
};

export { ExchangeReturnDetails };
