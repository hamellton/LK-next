import React, { useState } from "react";
import { ComponentSizeENUM, ThemeENUM, TypographyENUM } from "../../../../../Types/general";
import PrimaryButton from "../../../../Common/PrimaryButton";
import { Rating } from "../../../../Common/Rating/Rating.component";
import { InputFieldWrapper, ReviewInfoWrapper, ReviewProductInfo, ReviewSubTitle, ReviewWrapper, ShareFeedbackWrapper, ReviewProductImage, ReviewProductDes, ProductTexTitle, ProductTextDes, ReviewBtnWrapper, ValidateError, FieldWrapper } from "./productReview.styles";
import { ProductDetailsType } from "./ProductReview.type";
import { validateEmail, isName } from "../../../../../helpers";
import { FormInput } from "../../../../Common/Input/Input.component";

const ProductReview = (props: ProductDetailsType) => {
	const {
		id="product-review-info",
		font = TypographyENUM.lkSansRegular,
		isReadOnly = false,
		maxRating = 5,
		componentSize = ComponentSizeENUM.small,
		isRTL = false,
		dataLocale,
		productImage,
		productTitle,
		productDec,
		fullName,
		email,
		submitFunction,
	} = props;

	const [stars, setStars] = useState(0);
	const [title, setTitle] = useState("");
	const [review, setReview] = useState("");
	const [emailValue, setEmailValue] = useState(email ?? "");
	const [userName, setUserName] = useState(fullName ?? "");

	const [titleError, setTitleError] = useState(false);
	const [reviewError, setReviewError] = useState(false);
	const [nameError, setNameError] = useState("");
	const [emailError, setEmailError] = useState("");
	const [starError, setStarError] = useState(false);
	const flags = [false, false, false, false, false];

	function starsHandler(starNum: number) { setStars(starNum); }
	function titleHandler(e: React.ChangeEvent<HTMLInputElement>) { setTitle(e.target.value); setTitleError(false); }
	function revieweHandler(e: React.ChangeEvent<HTMLInputElement>) { setReview(e.target.value); setReviewError(false); }
	function emailHandler(e: React.ChangeEvent<HTMLInputElement>) { setEmailValue(e.target.value); }
	function userNameHandler(e: React.ChangeEvent<HTMLInputElement>) {
		setUserName(e.target.value);
		// const pattern = /^[a-zA-Z ]*$/;
		// if(!pattern.test(e.target.value)) {
		// 	setNameError("Only alphabets and spaces are allowed");
		// }
		// else {
		// 	setNameError("");
		// }
		setNameError(isName(e.target.value));
	}

	function emailValidate() {
		if(emailValue === "") {
			setEmailError(dataLocale.ERRORMESSAGE);
			flags[0] = true;
		} else {
			const emailValidate = validateEmail(emailValue);
			if(emailValidate === "") {
				setEmailError(emailValidate);
				flags[0] = false;
			} else {
				setEmailError(emailValidate);
				flags[0] = true;
			}
		}
		// const pattern = /^[\w-\\.]+@([\w-]+\.)+[\w-]{2,4}$/;
		// if(emailValue === "") {
		// 	setEmailError(dataLocale.ERRORMESSAGE);
		// 	flags[0] = true;
		// }
		// else if(!pattern.test(emailValue)) {
		// 	setEmailError("Please enter a valid Email");
		// 	flags[0] = true;
		// }
		// else {
		// 	setEmailError("");
		// 	flags[0] = false;
		// }
	}
	function nameValidate() {
		// if(userName === "") {
		// 	setNameError(dataLocale.ERRORMESSAGE);
		// 	flags[1] = true;
		// } else flags[1] = false;
		const isNameValidate = isName(userName);
		if(isNameValidate === "") flags[1] = false;
		else {
			setNameError(isNameValidate);
			flags[1] = true;
		}
	}
	function titleValidate() {
		if(title === "") {
			setTitleError(true);
			flags[2] = true;
		} else flags[2] = false;
	}
	function reviewValidate() {
		if(review === "") {
			setReviewError(true);
			flags[3] = true;
		} else flags[3] = false;
	}
	function starValidate() {
		if(stars === 0) {
			setStarError(true);
			flags[4] = true;
		} else {
			setStarError(false);
			flags[4] = false;
		}
	}

	function submitHandler() {
		titleValidate();
		reviewValidate();
		nameValidate();
		emailValidate();
		starValidate();
		const foundError = flags.find((flag) => {
			if(flag) return flag;
		});

		if(!(foundError || nameError)) {
			submitFunction({
				noOfStars: stars,
				reviewDetail: review,
				reviewTitle: title,
				reviewee: userName,
				reviewerType: "verified_buyer",
			}, emailValue);
		} else {
			console.log("not submitting", flags);
		}
	}

	return (
		<ReviewInfoWrapper id={id} styleFont={font}>
			<ShareFeedbackWrapper>
				{dataLocale.SHARE_YOUR_FEEDBACK}
			</ShareFeedbackWrapper>
			<ReviewProductInfo>
				<ReviewProductImage>
					<img src={productImage} />
				</ReviewProductImage>
				<ReviewProductDes>
					<ProductTexTitle>{productTitle}</ProductTexTitle>
					<ProductTextDes>{productDec}</ProductTextDes>
				</ReviewProductDes>
			</ReviewProductInfo>
			<ReviewWrapper>
				<ReviewSubTitle className="margin-top10">
					{dataLocale.RATING}
				</ReviewSubTitle>
				<Rating
					color={"var(--tortoiseshell-100)"}
					rating={stars}
					isReadOnly={isReadOnly}
					id="ratings"
					componentSize={componentSize}
					onStarsChange={starsHandler}
					maxRating={maxRating}
					isRTL={isRTL}
				/>
				{starError && <ValidateError>{dataLocale.ERRORMESSAGE}</ValidateError>}
				<ReviewSubTitle>
					{dataLocale.REVIEW}
				</ReviewSubTitle>
			</ReviewWrapper>
			<InputFieldWrapper>
				<FieldWrapper>
					<FormInput
						font={TypographyENUM.lkSansRegular}
						label={`${dataLocale.TITLE}*`}
						type="text"
						width="100%"
						onChange={titleHandler}
						onBlur={titleValidate}
						isRTL={isRTL}
						hasError={titleError}
						errorMessage={dataLocale?.ERRORMESSAGE}
					/>
				</FieldWrapper>
				<FieldWrapper>
					<FormInput
						font={TypographyENUM.lkSansRegular}
						label={`${dataLocale.REVIEW}*`}
						type="text"
						width="100%"
						onChange={revieweHandler}
						onBlur={reviewValidate}
						isRTL={isRTL}
						hasError={reviewError}
						errorMessage={dataLocale?.ERRORMESSAGE}
					/>
				</FieldWrapper>
				<ReviewSubTitle>
					{dataLocale.PERSONAL_DATA}
				</ReviewSubTitle>
				<FieldWrapper>
					<FormInput
						font={TypographyENUM.lkSansRegular}
						label={`${dataLocale.EMAIL}*`}
						type="text"
						width="100%"
						onChange={emailHandler}
						onBlur={emailValidate}
						isRTL={isRTL}
						hasError={!!emailError}
						errorMessage={emailError}
					/>
				</FieldWrapper>
				<FieldWrapper>
					<FormInput
						font={TypographyENUM.lkSansRegular}
						label={`${dataLocale.YOUR_NAME}*`}
						type="text"
						width="100%"
						onChange={userNameHandler}
						onBlur={nameValidate}
						isRTL={isRTL}
						hasError={!!nameError}
						errorMessage={nameError}
					/>
				</FieldWrapper>
			</InputFieldWrapper>
			<ReviewBtnWrapper>
				<PrimaryButton
					onBtnClick={submitHandler}
					theme={ThemeENUM.primary}
					font={TypographyENUM.defaultBook}
					componentSize={ComponentSizeENUM.medium}
					id="btn-review"
					width="100%"
					height="40px"
					primaryText={dataLocale.POST}
				/>
			</ReviewBtnWrapper>
		</ReviewInfoWrapper>
	);
};

export default ProductReview;
