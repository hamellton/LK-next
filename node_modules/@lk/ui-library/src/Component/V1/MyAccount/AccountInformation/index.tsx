import React from "react";
import { useEffect } from "react";
import { useState } from "react";
import AdvancedDropdown from "../../AdvancedDropdown";
import { ThemeENUM, TypographyENUM } from "../../../../Types/general";
import PrimaryButton from "../../../Common/PrimaryButton";
import { AccountInformationDataType, positionENUM } from "./AccountInformation.types";
import { HeaderWrapper, SubHeading, Heading, FirstNameWrapper, InputField, InputLabel, NameWrapper, LastNameWrapper, GenderWrapper, DropdownLabel, ChangePassowrdBox, PassowrdWrapper, CurrentPassowrdWrapper, PasswordInputWrapper, NewPassowrdWrapper, ConfirmPassowrdWrapper, ErrorMessage, ButtonWrapper, EmailWrapper, EmailInputField, Border, Toast, ToastMessageTitle } from "./styles";
import { InlineLoader } from "../../SignInForm/styles";

const AccountInformation = ({
	firstName,
	lastName,
	gender,
	customerEmail,
	currentPassword,
	newPassword,
	confirmNewPassword,
	dataLocale,
	countryCodePrefix = false,
	isRTL = false,
	disabled = false,
	options,
	onSaveInformation,
	myAccountInfo,
	resetAccountStateFunc
}: AccountInformationDataType) => {

	const [inputValue, setInputValue] = useState({ firstName: firstName, lastName: lastName, gender: gender, currentPassword: currentPassword, newPassword: newPassword, confirmNewPassword: confirmNewPassword });
	const [btnDisabled, setBtnDisabled] = useState(true);
	const [genderError, setGenderError] = useState(false);
	const [lastNameError, setLastNameError] = useState(false);
	const [firstNameError, setFirstNameError] = useState(false);
	const [currentPassError, setCurrentPassError] = useState(false);
	const [newPassError, setNewPassError] = useState(false);
	const [cnfNewPassError, setCnfPassError] = useState(false);
	const [passwordMatchError, setPassWordmatchError] = useState(false);
	const [showToast, setShowToast] = useState({ state: "", message: "" });
	const [checkbox, setCheckbox] = useState(false);

	useEffect(() => {
		if (myAccountInfo?.data && Object.keys(myAccountInfo.data).length) {
			resetAccountStateFunc();
		}
	}, [myAccountInfo]);

	useEffect(() => {
		if ((!inputValue.currentPassword || !inputValue.newPassword || !inputValue.confirmNewPassword) || inputValue.newPassword !== inputValue.confirmNewPassword) {
			setBtnDisabled(true);
		} else {
			setBtnDisabled(false);
		}
	}, [inputValue]);

	useEffect(() => {
		if (myAccountInfo.status === 400) {
			setShowToast({ ...showToast, state: "error", message: myAccountInfo.errorMessage });
			setInputValue({ ...inputValue, currentPassword: "", newPassword: "", confirmNewPassword: "" });
			setTimeout(() => {
				setShowToast({ ...showToast, state: "", message: "" });
			}, 3000);
		} else if (myAccountInfo.status === null && myAccountInfo.data?.status === 200) {
			setShowToast({ ...showToast, state: "success", message: "Password has been successfully updated" });
			setInputValue({ ...inputValue, currentPassword: "", newPassword: "", confirmNewPassword: "" });
			setTimeout(() => {
				setShowToast({ ...showToast, state: "", message: "" });
			}, 3000);
		}
		else {
			setInputValue({ ...inputValue, currentPassword: "", newPassword: "", confirmNewPassword: "" });
			onSaveInformation({ ...inputValue, changePassword: false });
			setBtnDisabled(false);
		}
	}, [myAccountInfo]);

	useEffect(() => {
		if (firstName && lastName && gender) {
			setInputValue({ ...inputValue, firstName: firstName, lastName: lastName, gender: gender });
		}
	}, [firstName, lastName, gender]);

	const onChangeFirtsName = (e: React.ChangeEvent<HTMLInputElement>) => {
		if (e.target.value === "") {
			setFirstNameError(true);
		} else {
			setFirstNameError(false);
		}
		setInputValue({ ...inputValue, firstName: e.target.value });
	};

	const onChangeLastName = (e: React.ChangeEvent<HTMLInputElement>) => {
		if (e.target.value === "") {
			setLastNameError(true);
		} else {
			setLastNameError(false);
		}
		setInputValue({ ...inputValue, lastName: e.target.value });
	};

	const onChangeGender = (e: any) => {
		setInputValue(inputValue => ({ ...inputValue, gender: e.target.value }));
		if (e.target.value === "") {
			setGenderError(true);
		}
	};
	const onChangeCurrentPassowrd = (e: React.ChangeEvent<HTMLInputElement>) => {
		setInputValue({ ...inputValue, currentPassword: e.target.value });
		setCurrentPassError(false);
		if (e.target.value === "") {
			setCurrentPassError(true);
		}
	};

	const onChangeNewPassowrd = (e: React.ChangeEvent<HTMLInputElement>) => {
		setInputValue({ ...inputValue, newPassword: e.target.value });
		setNewPassError(false);
		if (e.target.value === "") {
			setNewPassError(true);
		}
	};

	const onChangeConfirmNewPassowrd = (e: React.ChangeEvent<HTMLInputElement>) => {
		setInputValue({ ...inputValue, confirmNewPassword: e.target.value });

		if (inputValue.newPassword !== e.target.value) {
			setPassWordmatchError(true);
			setCnfPassError(false);
		}
		if (e.target.value === "") {
			setCnfPassError(true);
			setPassWordmatchError(false);
		}
		if (inputValue.newPassword === e.target.value) {
			setPassWordmatchError(false);
			setCnfPassError(false);
		}
	};

	const onBtnClick = () => {
		onSaveInformation({ ...inputValue, changePassword: checkbox });
		setBtnDisabled(true);
	};

	return (
		<>
			<HeaderWrapper>
				<Heading>{dataLocale.EDIT_ACCOUNT_INFORMATION}</Heading>
				<SubHeading>{dataLocale.ACCOUNT_INFORMATION}</SubHeading>
				{showToast.state && <Toast state={showToast.state}> <ToastMessageTitle>{showToast.state}</ToastMessageTitle>  {showToast.message}</Toast>}
			</HeaderWrapper>
			{myAccountInfo.isLoading ? <InlineLoader alt="Loading..." src="//static.lenskart.com/skin/frontend/base/default/images/loader2.gif" /> :
				<>
					<NameWrapper>
						<FirstNameWrapper isRTL={isRTL}>
							<InputLabel
								prefixText={countryCodePrefix ? true : false}
								labelPosition={isRTL ? positionENUM.right : positionENUM.left}
								error={firstNameError}
							>
								{dataLocale.FIRSTNAME}
							</InputLabel>
							<InputField width={"100"} onChange={e => onChangeFirtsName(e)} type="text" disabled={disabled} isRTL={isRTL} prefixText={false} value={inputValue.firstName} error={firstNameError} />
							{firstNameError && <ErrorMessage>{dataLocale.ERRORMESSAGE}</ErrorMessage>}
						</FirstNameWrapper>
						<LastNameWrapper>
							<InputLabel
								prefixText={countryCodePrefix ? true : false}
								labelPosition={isRTL ? positionENUM.right : positionENUM.left}
								error={lastNameError}
							>
								{dataLocale.LASTNAME}
							</InputLabel>
							<InputField error={lastNameError} width={"100"} onChange={e => onChangeLastName(e)} type="text" disabled={disabled} isRTL={isRTL} prefixText={false} value={inputValue.lastName} />
							{lastNameError && <ErrorMessage>{dataLocale.ERRORMESSAGE}</ErrorMessage>}
						</LastNameWrapper>
					</NameWrapper>
					<EmailWrapper>
						<InputLabel
							prefixText={countryCodePrefix ? true : false}
							labelPosition={isRTL ? positionENUM.right : positionENUM.left}
							error={false}
						>
							{dataLocale.EMAIL}
						</InputLabel>
						<EmailInputField width={"100"} type="text" disabled={disabled} isRTL={isRTL} prefixText={false} value={customerEmail} />
					</EmailWrapper>
					<GenderWrapper>
						<DropdownLabel error={genderError}>{dataLocale.GENDER}</DropdownLabel>
						{/* <SelectBox error={genderError} onChange={(e) => onChangeGender(e)} value={inputValue.gender}>
							{options.map((item:{value: string, key: string}, index) => (
								<Option key={index} value={item.value}>
									{item.key}
								</Option>
							))}
						</SelectBox> */}
						<div style={{ width: "21%" }}>
							<AdvancedDropdown
								id="state-options"
								value={inputValue.gender}
								font={TypographyENUM.lkSansRegular}
								fullWidth={true}
								// onBlur={(val: string) => errorHandler("state", validateRequired, val)}
								placeholder="Select gender"
								dropMainStyles={{ padding: "6px 12px", borderRadius: "5px", height: "auto" }}
								selectedValue={inputValue.gender}
								mainFontColor="#000"
								mainBackgroundColor="#fff"
								inputLabel=""
								values={options.map(data => ({
									display: data.key,
									value: data.value,
									onChange: (e: any) => onChangeGender(e),
								}))}
								styles={{ minHeight: "auto" }}
								disabled={false}
								isRTL={isRTL}
							/>
						</div>
						{genderError && <ErrorMessage>{dataLocale.ERRORMESSAGE}</ErrorMessage>}
					</GenderWrapper>
					<ChangePassowrdBox>
						<InputField name="changePassword" id="changePassword" error={false} width={""} onClick={() => setCheckbox(!checkbox)} type="checkbox" disabled={disabled} isRTL={isRTL} prefixText={false} checked={checkbox} />
						<InputLabel htmlFor="changePassword" error={false} prefixText={countryCodePrefix ? true : false}
							labelPosition={isRTL ? positionENUM.right : positionENUM.left}
						>{dataLocale.CHANGE_PASSWORD}</InputLabel>
					</ChangePassowrdBox>
					{
						checkbox && <PassowrdWrapper>
							<CurrentPassowrdWrapper>
								<InputLabel
									error={currentPassError}
									prefixText={countryCodePrefix ? true : false}
									labelPosition={isRTL ? positionENUM.right : positionENUM.left}
								>
									{dataLocale.CURRENT_PASSWORD}
								</InputLabel>
								<PasswordInputWrapper>
									<InputField required error={currentPassError} width={"25"} onChange={e => onChangeCurrentPassowrd(e)} type="password" disabled={disabled} isRTL={isRTL} prefixText={false} value={inputValue.currentPassword} />
									{currentPassError && <ErrorMessage>{dataLocale.ERRORMESSAGE}</ErrorMessage>}
								</PasswordInputWrapper>
							</CurrentPassowrdWrapper>
							<NewPassowrdWrapper>
								<InputLabel
									error={newPassError}
									prefixText={countryCodePrefix ? true : false}
									labelPosition={isRTL ? positionENUM.right : positionENUM.left}
								>
									{dataLocale.NEW_PASSOWRD}
								</InputLabel>
								<PasswordInputWrapper>
									<InputField error={newPassError} width={"25"} onChange={e => onChangeNewPassowrd(e)} type="password" disabled={disabled} isRTL={isRTL} prefixText={false} value={inputValue.newPassword} />
									{newPassError && <ErrorMessage>{dataLocale.ERRORMESSAGE}</ErrorMessage>}
								</PasswordInputWrapper>
							</NewPassowrdWrapper>
							<ConfirmPassowrdWrapper>
								<InputLabel
									error={cnfNewPassError || passwordMatchError}
									prefixText={countryCodePrefix ? true : false}
									labelPosition={isRTL ? positionENUM.right : positionENUM.left}
								>
									{dataLocale.CONFIRM_NEW_PASSWORD}
								</InputLabel>
								<PasswordInputWrapper>
									<InputField error={cnfNewPassError || passwordMatchError} width={"25"} onChange={e => onChangeConfirmNewPassowrd(e)} type="password" disabled={disabled} isRTL={isRTL} prefixText={false} value={inputValue.confirmNewPassword} />
									{cnfNewPassError && <ErrorMessage>{dataLocale.ERRORMESSAGE}</ErrorMessage>}
									{
										passwordMatchError && <ErrorMessage>{dataLocale.MATCH_PASSWORD}</ErrorMessage>
									}
								</PasswordInputWrapper>
							</ConfirmPassowrdWrapper>
						</PassowrdWrapper>
					}
					<Border id="divider" />
					<ButtonWrapper>
						<PrimaryButton color={"#fff"} backgroundColor={btnDisabled ? "#5a5a5a" : "#f18132"} borderColor={btnDisabled ? "#5a5a5a" : "#ef721a"} disabled={btnDisabled} primaryText="Save & Continue" onBtnClick={onBtnClick} id={"primary-button"} width={"20%"} height="46px" theme={ThemeENUM.secondary} font={TypographyENUM.defaultBook}></PrimaryButton>
					</ButtonWrapper>
				</>}
		</>
	);
};

export default AccountInformation;
