import React, { useState } from "react";
import { ThemeENUM, TypographyENUM } from "../../../../Types/general";
import Pagination from "../../../Common/Pagination";
import PrimaryButton from "../../../Common/PrimaryButton";
import Snackbar from "../../../Common/SnackBar";
import { positionENUM, StoreCreditType } from "./StoreCredit.types";
import { ButtonWrapper, DividerWrapper, ErrorMessage, Heading, InputField, InputLabel, InputWrapper, OrderListingWrapper, P, Span, StoreCreditWrap, StoreCreditWrapper, Table, TableBody, TableData, TableHead, TableHeading, TableRow, UserName, Heading4, Border, StoreCreditHeading, HeaderWrapper } from "./styles";
const StoreCredit = ({ dataLocale, storeCreditList, firstName, isRTL = false, onCheckStoreCredit, onClickStoreCreditOrderID, onClickStoreCreditCodeBySms, totalOrderCount = 300, itemsPerPage=10, clickOnPage, sendSmsStoreCredit, getStoreCreditCodeBySmsCode }: StoreCreditType) => {
	const [inputCreditCode, setInputCreditCode] = useState("");
	const [hasError, sethasError] = useState(false);
	const [btnDisabled, setBtnDisabled] = useState(false);
	const [activePage, setActivePage] = useState(0);
	const onChangeStoreCreditCode = (e:any) => {
		setBtnDisabled(false);
		setInputCreditCode(e.target.value);
	};
	const onCheckStoreCreditBalance = () => {
		if (!inputCreditCode) sethasError(true);
		onCheckStoreCredit(inputCreditCode);
		setBtnDisabled(true);
	};
	const onClickStoreCreditOrderHistory = (params:any) => {
		onClickStoreCreditOrderID({ query: params });
	};
	return (<>
		<UserName>
			<Heading4>{dataLocale.HELLO}<span>, {firstName}!</span></Heading4>
		</UserName>
		{Boolean(sendSmsStoreCredit && getStoreCreditCodeBySmsCode === 200) && <Snackbar message={dataLocale.WE_HAVE_SENT_STORE_CREDIT_CODE} state={"success"} />}
		{Boolean(sendSmsStoreCredit && getStoreCreditCodeBySmsCode !== 200) && <Snackbar message={dataLocale.PLEASE_TRY_AGAIN} state="error" />}
		<DividerWrapper>
			<Border id="divider" />
		</DividerWrapper>
		<HeaderWrapper>
			<Heading>{dataLocale.MY_ORDERS}</Heading>
		</HeaderWrapper>
		<StoreCreditWrap>
			<P>{dataLocale.ORDERS_PAGE}: {activePage + 1}</P>
			<Pagination
				totalOrderCount={totalOrderCount}
				itemsPerPage={itemsPerPage}
				// dataLocale={dataLocale}
				clickOnPage={clickOnPage}
				setActivePage={setActivePage}
				activePage={activePage}
			/>
		</StoreCreditWrap>
		<StoreCreditWrapper>
			<OrderListingWrapper>
				<Table>
					<TableHead>
						<TableRow>
							<TableHeading scope="col">{dataLocale.ORDER} #</TableHeading>
							<TableHeading scope="col">{dataLocale.DATE}</TableHeading>
							<TableHeading scope="col">{dataLocale.SHIP_TO}</TableHeading>
							<TableHeading scope="col" colSpan={3}>{dataLocale.ORDER_TOTAL}</TableHeading>
						</TableRow>
					</TableHead>
					<TableBody>
						{
							storeCreditList.map((item:any) => {
								return <TableRow key={`StoreCredit-${item.id}`}>
									<TableData className="text-link text-weight" scope="row" onClick={() => onClickStoreCreditOrderHistory(item.id)}><Span>{item.id}</Span> </TableData>
									<TableData>{new Date(item.createdAt).toString().slice(0, 15)}</TableData>
									<TableData>{item.shippingAddress.firstName} {item.shippingAddress.lastName}</TableData>
									<TableData>{item.amount.total}</TableData>
									<TableData>{item.status.orderTrackingStatusCheckpoint}</TableData>
									<TableData className="text-link" onClick={() => onClickStoreCreditCodeBySms(item.id)}>{dataLocale.SEND_CREDIT_CODE}</TableData>
								</TableRow>;
							})
						}
					</TableBody>
				</Table>
			</OrderListingWrapper>
			<Border id="divider" />
			<HeaderWrapper className="balanceHeading">
				<StoreCreditHeading >{dataLocale.CHECK_STORE_CREDIT_BALANCE}</StoreCreditHeading>
			</HeaderWrapper>
			<InputWrapper>
				<InputLabel
					prefixText={false}
					labelPosition={isRTL ? positionENUM.right : positionENUM.left}
					error={hasError}   
				>
					{dataLocale.ENTER_YOUR_STORE_CREDIT_CODE}
				</InputLabel>
				<InputField width={"40"} onChange={(e:any) => onChangeStoreCreditCode(e)} type="text" disabled={false} error={hasError} isRTL={isRTL} prefixText={false} value={inputCreditCode} />
				{hasError && <ErrorMessage>{dataLocale.ERRORMESSAGE}</ErrorMessage>}
			</InputWrapper>
			<Border id="divider" />
			<ButtonWrapper>
				<PrimaryButton color={"#fff"} backgroundColor={"#f18132"} borderColor={"#ef721a"} disabled={btnDisabled} primaryText={dataLocale.CHECK_BALANCE} onBtnClick={onCheckStoreCreditBalance} id={"primary-button"} width={"20%"} height="46px" theme={ThemeENUM.secondary} font={TypographyENUM.defaultBook}></PrimaryButton>
			</ButtonWrapper>
		</StoreCreditWrapper>
	</>);
};

export default StoreCredit;