import React, { useEffect, useRef, useState } from "react";
import Items from "../Items";
import { OrderDetailType } from "./OrderDetail.types";
import { OrderBox, OrderWrapper, OrderIdDate, Span, Strong, OrderTotal, Orderheader, OrderItems, ButtonNeedHelpOrderDetails, ButtonNeedhelp, MyOrderWapper, BackButtonAndlogOutWrapper, BackButton, Icon, LogOutContainer, LogOutButton, PriceSpan } from "../styles";
import CompletePayment from "../CompleteYourPayment";
import CommonLoader from "../../../../Common/Loader";
import { Address, AddressAndPriceWrapper, AmountDetails, MobileContainer } from "./styles";
import DeliveryAddress from "../DeliveryAddress";
import PriceBreakUpOD from "../PricebreakUp";
// import { Icons, NewPriceBreakup } from "../../../../..";
import OrderAddress from "../../../MyOrderMobile/OrderAddress/OrderAddress.component";
import TotalPriceCard from "../../../MyOrderMobile/TotalPriceCard/TotalPriceCard.component";
// import { TypographyENUM } from "../../../../../Types/general";
import { OrderHeader, ButtonContent, ButtonOuter } from "../../../MyOrderMobile/OrderListMobile/OrderListMobile.styles";
import * as Icons from "../../../../../Icons";
import Button from "../../../Button";
import { TypographyENUM } from "../../../../../Types/general";
import CompleteStudioBooking from "../CompleteStudioBooking";
import { currency } from "../utils";


const OrderDetail = ({ isRTL = false, country, dataLocale, order, formatDate, orderStatusRedis, getPendingStatus, filterTrackingStatus, confirmOrder, onNeedHelp, handlePayNow, handleManuallprescription, handleSavedprescription, handleUploadprescription, handleCallBack, handleSendEmail, handleOpenPrescriptionImageModal, showingLoader, updateEmbedVideo, configData, mobileView, returnConfig, returnReason, returnEligibilityDetails, onAddPowerClick, onPdClick, editPowerHandler, onClickReturnExchange, logOutHandler, backRoute, removeDomainName, subdirectoryPath, redirectToHome, handleStudioFlowAppointmentClick, addPowerCtaClick, setEditAddress, addPowerCtaGA }: OrderDetailType) => {
	const [payNow, setPayNow] = useState(null);
	const [pendingStatus, setPendingStatus] = useState("");
	const { shippingAddress } = order;
	const priceBreakupRef = useRef<HTMLDivElement | null>(null);
	useEffect(() => {
		const cod = order?.payments?.paymentList?.some((payment: any) => payment.method === "cod") && order.status.state === "NEW";
		const pendingPayment = order?.status?.trackingStatus === "PAYMENT_NOT_INITIATED";
		let payNowFlag: string | undefined = "";
		if (cod) {
			payNowFlag = "cod";
		} else if (pendingPayment) {
			payNowFlag = "pendingPayment";
		}
		if (orderStatusRedis && payNowFlag) {
			const { payNow: payNowConfig } = orderStatusRedis;
			setPayNow(payNowConfig[payNowFlag]);
		} else {
			setPayNow(null);
		}
		setPendingStatus(payNowFlag);
	}, [order]);

	const handleCompleteOrder = () => {
		confirmOrder(order?.id);
	};
	const handleCompletePayment = () => {
		handlePayNow(order);
	};
	const onNeedHelpClick = (order: any) => {
		onNeedHelp(order);
	};
	const handlelogOut = () => {
		if (logOutHandler) {
			logOutHandler();
		}
	};
	const handleBackRoute = () => {
		if (backRoute) {
			backRoute();
		}
	};

	const isStuidoFlow = order?.studioFlow || false;

	return <MyOrderWapper mobileView={mobileView}>
		{!mobileView && (<BackButtonAndlogOutWrapper>
			<BackButton onClick={() => handleBackRoute()} >
				<Icon>{isRTL ? (<Icons.IconRight path="#00bac6" />) : (<Icons.IconLeft path="#00bac6" />)}</Icon>{dataLocale.BACK}
			</BackButton>
			<LogOutContainer>
				<LogOutButton onClick={() => handlelogOut()}>{dataLocale.LOGOUT}</LogOutButton>
			</LogOutContainer>
		</BackButtonAndlogOutWrapper>)}
		{
			showingLoader && <OrderWrapper><CommonLoader show={true} overlayClassName="no-overlay" wrapperClassName="loader" /></OrderWrapper>
		}
		{mobileView ? <MobileContainer>
			<OrderHeader>
				<div>
					<Span mobileView>
						<Span mobileView>{dataLocale.ORDER_ID}: </Span>
						<Strong mobileView>{order?.id}</Strong>
					</Span>
					<Span mobileView>
						<Span mobileView>{dataLocale.ORDER_DATE}: </Span>
						<Strong mobileView>{formatDate(order.createdAt, "D MMM", "")}</Strong>
					</Span>
				</div>
				<OrderTotal mobileView>
					<Span mobileView>
						<Span mobileView>{dataLocale.TOTAL_PRICE}: </Span>
						<Strong mobileView>{currency(order?.amount?.currencyCode)} {order?.amount?.total}</Strong>
					</Span>
				</OrderTotal>
			</OrderHeader>
			{pendingStatus && <CompletePayment mobileView={true} pendingStatus={pendingStatus} payNow={payNow} dataLocale={dataLocale} handleConfirmOrder={handleCompleteOrder} handleCompletePayment={handleCompletePayment} />}

			{isStuidoFlow && (<CompleteStudioBooking dataLocale={dataLocale} handleStudioFlowAppointmentClick={handleStudioFlowAppointmentClick} mobileView={mobileView} orderData={order} />
			)}
			{order?.items?.length > 0 && order?.items?.map((item: any, index: number) => {
				const returnEligibilityItemDetails: any = returnEligibilityDetails?.items ? returnEligibilityDetails?.items?.find(((rItem: any) => rItem.id === item.id)) : null;
				return (
					// <Items
					// 	mobileView={true}
					// 	listing={true}
					// 	handleOpenPrescriptionImageModal={handleOpenPrescriptionImageModal}
					// 	order={orderList}
					// 	dataLocale={dataLocale}
					// 	item={item}
					// 	key={`${orderList?.id}_${index}`}
					// 	orderStatusRedis={orderStatusRedis}
					// 	returnSelection={returnConfig.returnSelection}
					// 	returnExchange={returnConfig.returnExchange}
					// 	returnDetails={returnConfig.returnDetails}
					// 	pendingStatus={pendingStatus}
					// 	paymentList={item.paymentList}
					// 	getPendingStatus={getPendingStatus}
					// 	createdAt={orderList.createdAt}
					// 	filterTrackingStatus={filterTrackingStatus}
					// 	formatDate={formatDate}
					// 	returnEligibilityItem={returnEligibilityItemDetails}
					// 	returnReason={returnReason}
					// 	handleManuallprescription={handleManuallprescription}
					// 	handleSavedprescription={handleSavedprescription}
					// 	handleUploadprescription={handleUploadprescription}
					// 	handleCallBack={handleCallBack}
					// 	handleSendEmail={handleSendEmail}
					// 	updateEmbedVideo={() => console.log("")}
					// 	configData={configData}
					// 	redisCommonData={undefined} />
					<React.Fragment key={item.id}>
						<Items country={country} removeDomainName={removeDomainName} subdirectoryPath={subdirectoryPath} onClickReturnExchange={() => onClickReturnExchange(item.id)} returnReason={returnReason} returnSelection={returnConfig.returnSelection} returnExchange={returnConfig.returnExchange} returnDetails={returnConfig.returnDetails} listing={false} updateEmbedVideo={updateEmbedVideo} orderStatusRedis={orderStatusRedis} handleOpenPrescriptionImageModal={handleOpenPrescriptionImageModal} order={order} dataLocale={dataLocale} item={item} key={`${order?.id}_${index}`} pendingStatus={pendingStatus} paymentList={item.paymentList} getPendingStatus={getPendingStatus} createdAt={order.createdAt} filterTrackingStatus={filterTrackingStatus} formatDate={formatDate} returnEligibilityItem={returnEligibilityItemDetails} handleManuallprescription={handleManuallprescription} handleSavedprescription={handleSavedprescription} handleUploadprescription={handleUploadprescription} handleCallBack={handleCallBack} handleSendEmail={handleSendEmail} configData={configData} mobileView={mobileView} onAddPowerClick={() => {
							onAddPowerClick?.({ order, item }); addPowerCtaClick?.(false); addPowerCtaGA?.(
								"post-purchase-order-detail",
								"add-power",
								item?.id,
								item?.lensType
							);
						}} onPdClick={() => onPdClick?.({ order, item })} editPowerHandler={() => editPowerHandler?.({ order, item })} />
					</React.Fragment>
				);
			})
			}
			{configData?.NEED_HELP_BUTTON && (<ButtonNeedHelpOrderDetails mobileView>
				<ButtonNeedhelp onClick={() => onNeedHelpClick(order)}>{dataLocale.NEED_HELP}</ButtonNeedhelp>
			</ButtonNeedHelpOrderDetails>)}
		</MobileContainer> : <OrderWrapper showNeedHelp={country === "sa"}>
			<OrderBox>
				<Orderheader>
					<OrderIdDate>
						<Span>
							<Span>{dataLocale.ORDER_ID}:</Span>
							<Strong>{order?.id}</Strong>
						</Span>
						<Span>
							<Span>{dataLocale.ORDER_DATE}: </Span>
							<Strong>{formatDate(order.createdAt, "D MMM", "")}</Strong>
						</Span>
					</OrderIdDate>
					<OrderTotal>
						<Span>
							<Span>{dataLocale?.TOTAL_PRICE}:</Span>
							<Strong>
								<PriceSpan>{currency(order?.amount?.currencyCode)}</PriceSpan> {order?.amount?.total}
							</Strong>
						</Span>
					</OrderTotal>
				</Orderheader>
				{/* <OrderHeader>
					<div>
						<Span>
							<Span>{dataLocale.ORDER_ID}: </Span>
							<Strong>{order?.id}</Strong>
						</Span>
						<Span>
							<Span>{dataLocale.DATE}: </Span>
							<Strong>{formatDate(order.createdAt, "D MMM", "")}</Strong>
						</Span>
					</div>
					<OrderTotal>
						<Span>
							<Span>Total Price: </Span>
							<Strong>{dataLocale.CURRENCY_SYMBOL} {order?.amount?.total}</Strong>
						</Span>
					</OrderTotal>
				</OrderHeader> */}
				{pendingStatus && <CompletePayment mobileView={mobileView} pendingStatus={pendingStatus} payNow={payNow} dataLocale={dataLocale} handleConfirmOrder={handleCompleteOrder} handleCompletePayment={handleCompletePayment} />}
				{isStuidoFlow && (<CompleteStudioBooking dataLocale={dataLocale} orderData={order} handleStudioFlowAppointmentClick={handleStudioFlowAppointmentClick} mobileView={mobileView} />
				)}
				<OrderItems>
					{order?.items?.length > 0 && order?.items?.map((item: any, index: number) => {
						return (
							<Items country={country} removeDomainName={removeDomainName} subdirectoryPath={subdirectoryPath} onClickReturnExchange={() => onClickReturnExchange(item.id)} listing={false} updateEmbedVideo={updateEmbedVideo} orderStatusRedis={orderStatusRedis} handleOpenPrescriptionImageModal={handleOpenPrescriptionImageModal} order={order} dataLocale={dataLocale} item={item} key={`${order?.id}_${index}`} pendingStatus={pendingStatus} paymentList={item.paymentList} getPendingStatus={getPendingStatus} createdAt={order.createdAt} filterTrackingStatus={filterTrackingStatus} formatDate={formatDate} returnEligibilityItem={{}} returnReason={[]} handleManuallprescription={handleManuallprescription} handleSavedprescription={handleSavedprescription} handleUploadprescription={handleUploadprescription} handleCallBack={handleCallBack} handleSendEmail={handleSendEmail} configData={configData} mobileView={mobileView} onAddPowerClick={() => {
								onAddPowerClick?.({ order, item }); addPowerCtaClick?.(false); addPowerCtaGA?.(
									"post-purchase-order-detail",
									"add-power",
									item?.id,
									item?.lensType
								);
							}} onPdClick={() => onPdClick?.({ order, item })} editPowerHandler={() => editPowerHandler?.({ order, item })} />
						);
					})
					}
				</OrderItems>
			</OrderBox>
			{configData?.NEED_HELP_BUTTON && <ButtonNeedHelpOrderDetails>
				<ButtonNeedhelp onClick={() => onNeedHelpClick(order)}>{dataLocale.NEED_HELP}</ButtonNeedhelp>
			</ButtonNeedHelpOrderDetails>}
		</OrderWrapper>}
		{mobileView ? <>
			<OrderAddress canUpdateAddress={order?.flags?.canUpdateAddress} setEditAddress={setEditAddress} dataLocale={dataLocale} customerName={`${shippingAddress.firstName} ${shippingAddress.lastName}`} address1={shippingAddress.addressline1} address2={shippingAddress.addressline2} city={shippingAddress.city} pincode={shippingAddress.postcode} state={shippingAddress.state} country={shippingAddress.country} email={shippingAddress.email} phoneNumber={shippingAddress.phone} countryCode={shippingAddress.phoneCode} />
			<div ref={priceBreakupRef}>
				<PriceBreakUpOD isRTL={isRTL} mobileView amount={order?.amount} dataLocale={dataLocale} />
			</div>
			{/* <AmountDetails>
				<>{console.log("PriceBreakup", order?.amount)}</>
			</AmountDetails> */}
		</> : <AddressAndPriceWrapper>
			<Address>{shippingAddress && <DeliveryAddress isRTL={isRTL} shippingAddress={shippingAddress} dataLocale={dataLocale} />}</Address>
			<AmountDetails>
				<PriceBreakUpOD isRTL={isRTL} amount={order?.amount} dataLocale={dataLocale} />
			</AmountDetails>
		</AddressAndPriceWrapper>}

		{mobileView && <ButtonOuter><Button
			id="button"
			showChildren={true}
			width="100"
			font={TypographyENUM.lkSansBold}
			onClick={redirectToHome}
		>
			<ButtonContent styledFont={TypographyENUM.lkSansBold}>
				{dataLocale?.CONTINUE_SHOPPING} {isRTL ? <Icons.IconLeft /> : <Icons.IconRight />}
			</ButtonContent>
		</Button></ButtonOuter>}
		{/* <NewPriceBreakup
			id="1"
			font={TypographyENUM.lkSansRegular}
			onShowCartBtnClick={() => null}
			currencyCode={"₹"}
			isMobileView
			width="100"
			dataLocale={dataLocale}
			priceData={order.amount}
		/> */}

		{mobileView && country !== "sa" && configData?.SHOW_GST && (<TotalPriceCard showGST={country === "in"} totalPrice={order.amount.total} currency={currency(order.amount.currencyCode)} viewPriceBreakupHandler={() => priceBreakupRef?.current?.scrollIntoView()} />)}
		{/* <AddressAndPriceWrapper>
			<Address>{shippingAddress && <DeliveryAddress shippingAddress={shippingAddress} dataLocale={dataLocale} /> }</Address>
			<AmountDetails>
				<PriceBreakUp amount={order?.amount} dataLocale={dataLocale} />
			</AmountDetails>
		</AddressAndPriceWrapper>}
		<NewPriceBreakup
			id="1"
			font={TypographyENUM.lkSansRegular}
			onShowCartBtnClick={() => null}
			currencyCode={"₹"}
			isMobileView
			width="100"
			dataLocale={dataLocale}
			priceData={order.amount}
		/>
		<TotalPriceCard totalPrice={order.amount.total} currency={order.amount.currencyCode} viewPriceBreakupHandler={() => null} />
		{/* <AddressAndPriceWrapper>
			<Address>{shippingAddress && <DeliveryAddress shippingAddress={shippingAddress} dataLocale={dataLocale} /> }</Address>
			<AmountDetails>
				<PriceBreakUp amount={order?.amount} dataLocale={dataLocale} />
			</AmountDetails>
		</AddressAndPriceWrapper> */}
		{/* <OrderAddress /> */}
	</MyOrderWapper>;
};

export default OrderDetail;
