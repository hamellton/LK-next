import React, { useEffect, useState } from "react";
import CompletePayment from "././CompleteYourPayment";
import Items from "./Items";
import { OrderListingType } from "./MyOrder.types";
import { OrderBox, OrderListWrapper, OrderWrapper, OrderIdDate, Span, Strong, OrderTotal, Orderheader, OrderItems, ButtonNeedHelpOrderDetails, ButtonNeedhelp, ButtonOrderDetails, PriceSpan, OrderPriceSpan, OrderIdSpan, OrderDateSpan } from "./styles";
import Refund from "../../MyOrderMobile/RefundComponent/Refund.component";
import CompleteStudioBooking from "./CompleteStudioBooking";
import { currency } from "./utils";

const OrderListing = ({ country, removeDomainName, subdirectoryPath, orderList, dataLocale, orderStatusRedis, formatDate, getPendingStatus, filterTrackingStatus, confirmOrder, onNeedHelp, handlePayNow, returnEligibiliyDetails, returnReason, handleManuallprescription, handleSendEmail, handleUploadprescription, handleSavedprescription, handleCallBack, handleOpenPrescriptionImageModal, onOrderDetailClick, configData, onAddPowerClick, onPdClick, editPowerHandler, mobileView, onClickReturnExchange, handleStudioFlowAppointmentClick, addGAEvent, addPowerCtaGA }: OrderListingType) => {
	const [payNow, setPayNow] = useState(null);
	const [pendingStatus, setPendingStatus] = useState("");
	// const [cancelRefundDetails, setCancelRefundDetails] = useState(null);
	useEffect(() => {
		const cod = orderList?.payments?.paymentList?.some((payment: any) => payment.method === "cod") && orderList.status.state === "NEW";
		const pendingPayment = orderList?.status?.trackingStatus === "PAYMENT_NOT_INITIATED";
		let payNowFlag: string | undefined = "";
		if (cod) {
			payNowFlag = "cod";
		} else if (pendingPayment) {
			payNowFlag = "pendingPayment";
		}
		if (orderStatusRedis && payNowFlag) {
			const { payNow: payNowConfig } = orderStatusRedis;
			setPayNow(payNowConfig[payNowFlag]);
		} else {
			setPayNow(null);
		}
		setPendingStatus(payNowFlag);
	}, [orderList]);

	const handleCompleteOrder = () => {
		confirmOrder(orderList?.id);
	};
	const handleCompletePayment = () => {
		handlePayNow(orderList);
	};
	const onNeedHelpClick = (order: any) => {
		onNeedHelp(order);
	};
	const onOrderDetailClickFn = (order: any) => {
		onOrderDetailClick(order);
	};
	const cancelRefundDetails = orderList?.refundDetails?.status ? orderList.refundDetails : null;

	const isStuidoFlow = orderList?.studioFlow || false;


	return (
		<OrderListWrapper>
			<OrderWrapper>
				<OrderBox>
					<Orderheader>
						<OrderIdDate>
							<OrderIdSpan>
								<Span>{dataLocale.ORDER_ID} : </Span>
								<Strong>{orderList?.id}</Strong>
							</OrderIdSpan>
							<OrderDateSpan>
								<Span>{dataLocale.DATE} : </Span>
								<Strong>{formatDate(orderList.createdAt, "D MMM", "")}</Strong>
							</OrderDateSpan>
						</OrderIdDate>
						<OrderTotal>
							<OrderPriceSpan>
								<Span>{dataLocale?.TOTAL_PRICE} : </Span>
								<Strong>
									<PriceSpan>{currency(orderList?.amount?.currencyCode)}</PriceSpan> {orderList?.amount?.total}
								</Strong>
							</OrderPriceSpan>
						</OrderTotal>
					</Orderheader>
					{/* {pendingStatus === "cod" && (
						<ConfirmCOD
							codConfirmation={codConfirmation}
							dataLocale={dataLocale}
							listing={listing}
							loading={loader}
						/>
					)} */}
					{pendingStatus && <CompletePayment pendingStatus={pendingStatus} payNow={payNow} dataLocale={dataLocale} handleConfirmOrder={handleCompleteOrder} handleCompletePayment={handleCompletePayment} />}

					{isStuidoFlow && (<CompleteStudioBooking dataLocale={dataLocale} handleStudioFlowAppointmentClick={handleStudioFlowAppointmentClick} orderData={orderList} />
					)}
					{/* {order.studioFlow && <BookAppointmentTab order={order} />} */}
					{cancelRefundDetails && (
						// <OrderCancellationRefundDetails
						// 	cancelRefundDetails={cancelRefundDetails}
						// 	currencyMark={dataLocale.CURRENCY_SYMBOL}
						// 	dataLocale={dataLocale}
						// 	order={orderList}
						// />
						<Refund
							viewDetailsHandler={() => null}
						/>
					)}
					<OrderItems>
						{orderList?.items?.length > 0 && orderList?.items?.map((item: any, index: number) => {
							const returnEligibilityItemDetails: any = returnEligibiliyDetails?.items ? returnEligibiliyDetails?.items?.find(((rItem: any) => rItem.id === item.id)) : null;
							return (
								<Items country={country} removeDomainName={removeDomainName} subdirectoryPath={subdirectoryPath} mobileView={mobileView} onClickReturnExchange={() => onClickReturnExchange(item.id)} listing={true} handleOpenPrescriptionImageModal={handleOpenPrescriptionImageModal} order={orderList} dataLocale={dataLocale} item={item} key={`${orderList?.id}_${index}`} pendingStatus={pendingStatus} paymentList={item.paymentList} getPendingStatus={getPendingStatus} createdAt={orderList.createdAt} filterTrackingStatus={filterTrackingStatus} formatDate={formatDate} returnEligibilityItem={returnEligibilityItemDetails} returnReason={returnReason} handleManuallprescription={handleManuallprescription} handleSavedprescription={handleSavedprescription} handleUploadprescription={handleUploadprescription} handleCallBack={handleCallBack} handleSendEmail={handleSendEmail} updateEmbedVideo={() => console.log("")} orderStatusRedis={orderStatusRedis} configData={configData} onAddPowerClick={() => {
									onAddPowerClick?.({ order: orderList, item }); addGAEvent?.(true); addPowerCtaGA?.(
										"post-purchase-order-listing",
										"add-power",
										item?.id,
										item?.lensType
									);
								}} onPdClick={() => onPdClick?.({ order: orderList, item })} editPowerHandler={() => editPowerHandler?.({ order: orderList, item })} />
							);
						})
						}
					</OrderItems>
				</OrderBox>
				<ButtonNeedHelpOrderDetails>
					{configData?.NEED_HELP_BUTTON && <ButtonNeedhelp onClick={() => onNeedHelpClick(orderList)}>{dataLocale.NEED_HELP}</ButtonNeedhelp>}
					<ButtonOrderDetails onClick={() => onOrderDetailClickFn(orderList)}>{dataLocale.ORDER_DETAIL}</ButtonOrderDetails>
				</ButtonNeedHelpOrderDetails>
			</OrderWrapper>
		</OrderListWrapper>
	);
};

export default OrderListing;
