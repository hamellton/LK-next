import React, { useCallback, useEffect } from "react";
import { useState } from "react";
// import { TypographyENUM } from "../../../../../Types/general";
import PowerDetails from "../../../Cart/CartCard/PowerDetail";
// import NextHead from "react";
import PowerDetailMobile from "../../../Cart/CartCard/PowerDetailMobile/PowerDetailMobile.component";
// import Accordion from "../Accordion";
// import AddPower from "../AddPower";
import { ItemWrapper, ItemHeader, Item, A, ProductImageDescription, ProductImageWrapper, ProductImage, ProductDescriptionContainer, ProductName, ProductInfo, ProductPrice, PriceSymbol, PowerTable, ReviewLink, ItemReviewContainer, ProductOptions } from "./styles";
import ItemStatus from "../itemStatus";
import { itemType } from "./Items.types";
import PendingStatus from "../PendingStatus";
import ReturnExchange from "../ReturnExchangeCta";
// import ReturnExchangeMobile from "../ReturnExchangeMobile/ReturnExchangeMobile.component";
import { Div } from "../styles";
import TrackingTimeLine from "../TrackingTimeLine";
import Reorder from "./components/Reorder";
import OrderTrackingMobile from "../../../MyOrderMobile/OrderTrackingMobile/OrderTrackingMobile.component";
import AddPrescriptionCtas from "./components/AddPrescriptionCtas";
import { currency } from "../utils";

function getProductName(brandName:string, productTypeValue:string, modelName:string) {
	let productName:string = brandName;
	if (["Eyeglasses", "Sunglasses"].includes(productTypeValue))
		productName = `${brandName} ${productTypeValue}`;
	else if (productTypeValue === "Contact Lens") productName = modelName;
	return productName;
}

const Items = ({ country, order, item, dataLocale, orderStatusRedis, /*redisCommonData,*/ pendingStatus, paymentList, getPendingStatus, createdAt, filterTrackingStatus, returnEligibilityItem, returnReason,
//  handleManuallprescription, handleSavedprescription, handleUploadprescription, handleCallBack, handleSendEmail,
	handleOpenPrescriptionImageModal, updateEmbedVideo, listing, mobileView, configData, returnSelection, returnExchange, returnDetails, onPdClick, onAddPowerClick, editPowerHandler, onClickReturnExchange, removeDomainName, subdirectoryPath } : itemType) => {
	const { flags: { canUpdatePrescription, showTrackingHistory }, powerRequired, prescriptionView, itemTracking, deliveryDate, id, revisedEta, lensType } = item;
	// const [ expand, setExpand ] = useState(false);
	const [pendingPowerPaymentStatus, setPendingPaymentStatus] = useState<any>({});
	const [showPower, showPowerDetails] = useState(true);
	const [ itemStatus, setItemStatus ] = useState<any>({});
	useEffect(() => {
		const isSeamless = paymentList?.some((payment:any) => payment?.method === "sm");
		if (item?.itemTracking?.status === "ORDER_PLACED") setPendingPaymentStatus(getPendingStatus(pendingStatus, item?.powerRequired, dataLocale, createdAt, isSeamless));
		setItemStatus(filterTrackingStatus(item, dataLocale?.EARLY));
	}, [pendingStatus, item.powerRequired]);
	// const handleExpand= ()=> {
	// 	setExpand(!expand);
	// };
	const showPowerDetailsFn = useCallback((section:any) => {
		if (["CONTACT_FOR_POWER", "POWER_UPLOAD"].includes(section) && itemTracking?.status === "CANCELLED")
			showPowerDetails(false);
	}, []);

	function getDispatchDays(dispatchDate: number) {
		return Math.floor((new Date().getTime() - dispatchDate) / (24 * 60 * 60 * 1000));
	}
	const deliveryETA = orderStatusRedis?.deliveredETA || 20;
	const dispatchDays = getDispatchDays(order?.dispatchDate);

	const fetchUrl = () => {
		const link = removeDomainName(item?.productUrl, subdirectoryPath, country, subdirectoryPath);
		window.location.href = subdirectoryPath + link;
	};
	// const showPowerDetailsFn = useCallback((section:any) => {
	// 	if (["CONTACT_FOR_POWER", "POWER_UPLOAD"].includes(section) && itemTracking?.status === "CANCELLED")
	// 		showPowerDetails(false);
	// }, []);
	return <ItemWrapper mobileView={mobileView}>
		{pendingPowerPaymentStatus && Object.keys(pendingPowerPaymentStatus).length > 0 ? <PendingStatus mobileView={mobileView} pendingOrderStatus={pendingStatus} dataLocale={dataLocale} pendingPowerPaymentStatus={pendingPowerPaymentStatus} />
			: (itemStatus?.currentStatus?.statusLabel && <ItemStatus mobileView={mobileView} dataLocale={dataLocale} itemStatus={itemStatus} deliveryDate={item?.deliveryDate} revisedETA={item?.revisedEta} />) }
		<ItemHeader mobileView={mobileView}>
			{item?.itemTracking?.status === "DELIVERED" || dispatchDays > deliveryETA && mobileView && (
				<ItemReviewContainer mobileView={mobileView}>
					<span>How&apos;s the product</span>
					<ReviewLink
						aria-label="Click here for write a review"
						className="text-color_link_blue"
						href={`/customer-feedback?pId=${item.productId}`}
					>
					Write a review
					</ReviewLink>
				</ItemReviewContainer>)}
			<Item>
				<Div mobileView={mobileView}>
					<A onClick={() => fetchUrl()} mobileView={mobileView}>
						<ProductImageDescription>
							<ProductImageWrapper>
								<ProductImage alt="product-img" src={item?.thumbnail} mobileView={mobileView} />
							</ProductImageWrapper>
							<ProductDescriptionContainer>
								<ProductName mobileView={mobileView}>{getProductName(item?.brandName, item?.productTypeValue, item?.modelName)}</ProductName>
								{item?.options && <ProductOptions>
									{item.options.map((option: any) => {
										return(
											<span key={option.oid}>
												{"+ "+option.name+" "}
											</span>
										);
									})}
								</ProductOptions> }
								{mobileView && <ProductInfo mobileView={mobileView}>{item.sellerLabel}</ProductInfo>}
								<ProductPrice>
									<PriceSymbol>{currency(item?.amount?.currencyCode)}</PriceSymbol> {item?.amount?.total}
								</ProductPrice>
							</ProductDescriptionContainer>
						</ProductImageDescription>
					</A>
				</Div>
				{/* {returnEligibilityItem && !mobileView && <ReturnExchange classification={item?.classification} returnReason={returnReason} dataLocale={dataLocale} returnEligibilityItem={returnEligibilityItem} />}
				{returnEligibilityItem && mobileView && <ReturnExchangeMobile />} */}
				{returnEligibilityItem && !mobileView && <ReturnExchange onClickReturnExchange={onClickReturnExchange} classification={item?.classification} returnReason={returnReason} dataLocale={dataLocale} returnEligibilityItem={returnEligibilityItem} returnId={item?.returnId} isReturnCancelled={itemTracking?.status === "RETURN_CANCELLED"} />}
			</Item>
		</ItemHeader>
		{item?.eligibleForReorder && item?.productUrl && (
			<Reorder
				dataLocale={dataLocale}
				item={item}
			// localeInfo={localeInfo}
			// userInfo={userInfo}
			// view="mobile"
			/>
		)}
		{powerRequired === "POWER_SUBMITTED" &&
        prescriptionView &&
        prescriptionView.showPd === true && (
			<AddPrescriptionCtas
				// isOnlyPd={isOnlyPd}
				text={dataLocale?.SUBMIT_PD_TO_COMPLETE_ORDER}
				btnText={dataLocale?.ADD_PD}
				listing={listing}
				// setSheet={setSheet}
				onClick={onPdClick}
				// userInfo={userInfo}
			/>
		)}
		{canUpdatePrescription && powerRequired === "POWER_REQUIRED" && !mobileView && !(configData?.DEACTIVATE_PROGRESSIVE_ADD_POWER && lensType==="BIFOCAL") &&
			// <AccordionConatiner>
			// 	<Accordion icon={""} isRTL={false} font={TypographyENUM.defaultHeavy} canCollapse={true} isComponent={false} isMaxHeight={false} expand={expand} handleExpand={handleExpand} btnText="ADD Power" title="Submit POWER to complete order" showBorderTop={false}>
			// 		<ContentWrapper>
			// 			<AddPower order={order} item={item} dataLocale={dataLocale} handleManuallprescription={handleManuallprescription} handleSavedprescription={handleSavedprescription} handleUploadprescription={handleUploadprescription} handleCallBack={handleCallBack} handleSendEmail={handleSendEmail} />
			// 		</ContentWrapper>
			// 	</Accordion>
			// </AccordionConatiner>
			<AddPrescriptionCtas
				text={dataLocale.SUBMIT_POWER_TO_COMPLETE_ORDER || "Submit POWER to complete order"}
				btnText={dataLocale.ADD_POWER}
				// isOnlyPd={isOnlyPd}
				listing={listing}
				// setSheet={setSheet}
				onClick={onAddPowerClick}
			// userInfo={userInfo}
			/>
		}
		{canUpdatePrescription && powerRequired === "POWER_REQUIRED" && mobileView && !(configData?.DEACTIVATE_PROGRESSIVE_ADD_POWER && lensType==="BIFOCAL") &&
			<AddPrescriptionCtas
				text={dataLocale.SUBMIT_POWER_TO_COMPLETE_ORDER || "Submit POWER to complete order"}
				btnText={dataLocale.ADD_POWER}
				// isOnlyPd={isOnlyPd}
				listing={listing}
				// setSheet={setSheet}
				onClick={onAddPowerClick}
			// userInfo={userInfo}
			/>
		}
		{
			powerRequired === "POWER_SUBMITTED" && prescriptionView && showPower &&
				(mobileView ?
					(<PowerTable mobileView={mobileView}>
						<PowerDetailMobile mobileView flags={item?.flags || {}} prescription={prescriptionView} editPowerHandler={editPowerHandler} dataLocale={dataLocale} redisCommonData={configData} showPowerDetailsFn={showPowerDetailsFn} handleOpenPrescriptionImageModal={handleOpenPrescriptionImageModal} />
					</PowerTable>) :
					(<PowerTable>
						<PowerDetails dataLocale={dataLocale} redisCommonData={configData} showPowerDetailsFn={showPowerDetailsFn} handleOpenPrescriptionImageModal={handleOpenPrescriptionImageModal} prescription={prescriptionView}/>
					</PowerTable>)
				)
		}
		{
			!listing && showTrackingHistory ? (mobileView ? <OrderTrackingMobile itemTracking={itemTracking} updateEmbedVideo={updateEmbedVideo}/> : <TrackingTimeLine updateEmbedVideo={updateEmbedVideo} revisedEta={revisedEta} itemId={id} orderId={order.id} deliveryDate={deliveryDate} itemTracking={itemTracking} dataLocale={dataLocale} />) : null
		}
		{
			mobileView && <ReturnExchange onClickReturnExchange={onClickReturnExchange} mobileView={mobileView} classification={item?.classification} returnReason={returnReason} dataLocale={dataLocale} returnEligibilityItem={returnEligibilityItem} returnSelection={returnSelection} returnExchange={returnExchange} returnDetails={returnDetails} returnId={item?.returnId} isReturnCancelled={itemTracking?.status === "RETURN_CANCELLED"} />
		}
	</ItemWrapper>;
};

export default Items;
