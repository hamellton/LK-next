import React, { useEffect, useState } from "react";
import CommonLoader from "../../../Common/Loader";
import Pagination from "../../../Common/Pagination";
// import ToggleButton from "../../../Common/ToggleButton";
import GetUpdates from "../../MyOrderMobile/GetUpdates/GetUpdates.component";
import { AlertMessage } from "../SavedCards/styles";
import { MyOrderType } from "./MyOrder.types";
import OrderListing from "./OrderListing";
import {
	MyOrderContainer,
	WhatsAppAndLogoutWrapper,
	WhatsAppLabel,
	// WhatsAppLogo,
	// Image,
	// WhatsAppText,
	SwitchContainer,
	LogOutContainer,
	LogOutButton,
	OrderPageWithPagination,
	OrderPage,
	OrderListWrapper,
} from "./styles";

const MyOrder = ({ removeDomainName, subdirectoryPath, country, dataLocale, redisCommonData, totalOrderCount = 200, itemsPerPage = 5, onClickWhatsappToggle, whatsAppActive=false, clickOnPage,logOutHandler, orderList, formatDate, orderStatusRedis, getPendingStatus, filterTrackingStatus, confirmOrder, showingLoader, onNeedHelp, handlePayNow, returnEligibilityDetailsArr, returnReason, handleManuallprescription, handleSavedprescription, handleUploadprescription, handleCallBack, handleSendEmail, handleOpenPrescriptionImageModal, onOrderDetailClick, configData, onAddPowerClick, onPdClick, editPowerHandler, mobileView, onClickReturnExchange, setActivePage, activePage, handleStudioFlowAppointmentClick, addGAEvent, addPowerCtaGA }: MyOrderType) => {
	// const [activePage, setActivePage] = useState(pageNumber);
	const clickedOnWhatsappToggle = () => {
		onClickWhatsappToggle();
	};
	const handlelogOut = () => {
		logOutHandler();
	};
	const onOrderDetailClickFn = (order:any) => {
		onOrderDetailClick(order);
	};

	const [loader,setLoader] = useState(false);

	useEffect(()=>{
		showingLoader ? setLoader(true) : setLoader(false);
	},[showingLoader]);

	return (
		<MyOrderContainer>
			<WhatsAppAndLogoutWrapper>
				{!redisCommonData.HIDE_WHATSAPP ?
					<WhatsAppLabel>
						{/* <WhatsAppLogo>
						<Image
							alt="whatsAppImage"
							src="https://static.lenskart.com/media/desktop/img/25-July-19/whatsapp.png"
						/>
					</WhatsAppLogo>
					<WhatsAppText>{dataLocale.GET_ORDER_UPDATES_ON_WHATSAPP}</WhatsAppText> */}
						<SwitchContainer>
							{/* <ToggleButton
							text={""}
							checked={whatsAppActive}
							clickOnToggle={clickedOnWhatsappToggle}
							innerHeight={17}
							innerWidth={17}
							outerWidth={44}
							outerHeight={22}
							innerColor={""}
							outerColor={"#8e9bad"}
						/> */}
							<GetUpdates
								active={whatsAppActive}
								onChange={clickedOnWhatsappToggle}
								disabled={false}
							/>
						</SwitchContainer>
					</WhatsAppLabel>
					: <div></div>}
				<LogOutContainer>
					<LogOutButton onClick={() => handlelogOut()}>{dataLocale.LOGOUT}</LogOutButton>
				</LogOutContainer>
			</WhatsAppAndLogoutWrapper>
			{showingLoader && <CommonLoader show={true} overlayClassName="no-overlay" wrapperClassName="loader" />}
			{orderList?.length === 0 && !loader ? <AlertMessage>{dataLocale.YOU_HAVE_NO_ORDER_IN_ACCOUNT}</AlertMessage> : <>
				<OrderPageWithPagination>
					<OrderPage>{dataLocale.ORDER_PAGE}: {activePage + 1}</OrderPage>
					<Pagination
						totalOrderCount={totalOrderCount}
						itemsPerPage={itemsPerPage}
						// dataLocale={dataLocale}
						clickOnPage={clickOnPage}
						setActivePage={setActivePage}
						activePage={activePage}
					/>
				</OrderPageWithPagination>
				{
					showingLoader && <OrderListWrapper><CommonLoader show={true} overlayClassName="no-overlay" wrapperClassName="loader" /></OrderListWrapper>
				}
				{orderList && orderList.map((order:any) => {
					const returnEligibiliyDetails:any = returnEligibilityDetailsArr ? returnEligibilityDetailsArr.find((rItem:any) => rItem.id === order.id) : null;
					return (
						<OrderListing addPowerCtaGA={addPowerCtaGA} addGAEvent={addGAEvent} removeDomainName={removeDomainName} subdirectoryPath={subdirectoryPath} country={country} mobileView={mobileView} onClickReturnExchange={onClickReturnExchange} configData={configData} orderList={order} dataLocale={dataLocale} redisCommonData={redisCommonData} key={`${order.id}`} formatDate={formatDate} orderStatusRedis={orderStatusRedis} getPendingStatus={getPendingStatus} filterTrackingStatus={filterTrackingStatus} confirmOrder={confirmOrder} onNeedHelp={onNeedHelp} handlePayNow={handlePayNow} returnEligibiliyDetails={returnEligibiliyDetails} returnReason={returnReason} handleManuallprescription={handleManuallprescription} handleSavedprescription={handleSavedprescription} handleUploadprescription={handleUploadprescription} handleCallBack={handleCallBack} handleSendEmail={handleSendEmail} handleOpenPrescriptionImageModal={handleOpenPrescriptionImageModal} onOrderDetailClick={onOrderDetailClickFn} onAddPowerClick={onAddPowerClick} onPdClick={onPdClick} editPowerHandler={editPowerHandler} handleStudioFlowAppointmentClick={handleStudioFlowAppointmentClick} />
					);
				})}
				<OrderPageWithPagination>
					<OrderPage>{dataLocale.ORDER_PAGE}: {activePage + 1}</OrderPage>
					<Pagination
						totalOrderCount={totalOrderCount}
						itemsPerPage={itemsPerPage}
						// dataLocale={dataLocale}
						clickOnPage={clickOnPage}
						setActivePage={setActivePage}
						activePage={activePage}
					/>
				</OrderPageWithPagination>
			</>}
		</MyOrderContainer>
	);
};

export default MyOrder;
