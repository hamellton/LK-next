import React from "react";
import { PriceBreakUpType } from "./PricebreakUp.types";
import { PriceBreakUpContainer, PriceBreakUpText, SubTotalText, Price, DiscountConatiner, TaxWrapper, NetAmount, GSTCollected, PrePaidDiscount, OldorderDiscount, StoreCreditDiscount, ConvinceFess, TotalAmount, NetAmountSpan, TotalSpan, TotalPriceSpan, NetAmountPriceSpan, Span } from "./styles";
const _discountType:any = ["gv", "sc", "prepaid", "coupon", "lenskart", "lenskartplus"];

function getNetAmount(subTotal:number, preTaxDiscount:number) {
	const amount:any = subTotal - preTaxDiscount;
	if (!Number.isInteger(amount)) {
		return amount.toFixed(2);
	}
	return amount;
}

const PriceBreakUpOD = ({ amount, dataLocale, mobileView, isRTL }: PriceBreakUpType) => {
	const { subTotal, total, totalTax, shipping, discounts = [] } = amount;
	const {
		CONVENIENCE_FEES,
		NET_AMOUNT,
		STORE_CREDIT,
		TOTAL,
		OLD_PRODUCT_EXCHANGE_VALUE,
		GST_COLLECTED,
		PREPAID_DISCOUNT,
		PRICE_BREAKUP,
		VOUCHER_DISCOUNT,
		SUBTOTAL,
		LK_CASH,
		LK_CASH_PLUS,
		COUPON_DISCOUNT,
		AUTO_DISCOUNT,
		CURRENCY_SYMBOL,
		FREE
	} = dataLocale;
	let oldOrderDiscount:any = 0;
	let scDiscount:any = 0;
	let preTaxDiscount:any = 0;
	let prepaidDiscount:any = 0;
	const voucherType:any = {
		gv: VOUCHER_DISCOUNT,
		coupon: COUPON_DISCOUNT,
		lenskart: LK_CASH,
		lenskartplus: LK_CASH_PLUS,
	};
	const discountstag:any = discounts.map((discount:any, index:number) => {
		const { type, amount } = discount;
		if (amount > 0) {
			if (type === "sc") {
				scDiscount = amount;
				return null;
			} else if (type === "prepaid") {
				prepaidDiscount = amount;
				return null;
			} else if (type === "exchange") {
				oldOrderDiscount = amount;
				return null;
			}
			preTaxDiscount += amount;
			return (
				<DiscountConatiner mobileView={mobileView} key={`discount_${index}`}>
					<Span mobileView={mobileView}>
						{
							voucherType[type]
						}
						{!_discountType.includes(type) && AUTO_DISCOUNT}
						<Price mobileView={mobileView} isRTL={isRTL}>- {CURRENCY_SYMBOL} {amount}</Price>
					</Span>
				</DiscountConatiner>
			);
		}
		return null;
	});
	return <PriceBreakUpContainer mobileView={mobileView}>
		<PriceBreakUpText mobileView={mobileView}>{PRICE_BREAKUP}: </PriceBreakUpText>
		<SubTotalText mobileView={mobileView}>
			<Span mobileView={mobileView}>{SUBTOTAL}</Span>
			<Price mobileView={mobileView} isRTL={isRTL}>
				{CURRENCY_SYMBOL} {subTotal}
			</Price>
			{discountstag}
		</SubTotalText>
		<TaxWrapper>
			<NetAmount mobileView={mobileView}>
				<NetAmountSpan>{NET_AMOUNT}</NetAmountSpan>
				<NetAmountPriceSpan isRTL={isRTL}>{CURRENCY_SYMBOL} {getNetAmount(subTotal, preTaxDiscount)}</NetAmountPriceSpan>
			</NetAmount>
			{
				totalTax > 0 && <GSTCollected mobileView={mobileView}>
					<Span mobileView={mobileView}>{GST_COLLECTED}</Span>
					<Price mobileView={mobileView} isRTL={isRTL}>{totalTax > 0 ? "+" : ""} {CURRENCY_SYMBOL} {totalTax}</Price>
				</GSTCollected>
			}
			{
				prepaidDiscount > 0 && <PrePaidDiscount mobileView={mobileView}>
					<Span mobileView={mobileView}>{PREPAID_DISCOUNT}</Span>
					<Price mobileView={mobileView} isRTL={isRTL}>{CURRENCY_SYMBOL} {prepaidDiscount}</Price>
				</PrePaidDiscount>
			}
			{ oldOrderDiscount > 0 && <OldorderDiscount mobileView={mobileView}>
				<Span mobileView={mobileView}>{OLD_PRODUCT_EXCHANGE_VALUE}</Span>
				<Price mobileView={mobileView} isRTL={isRTL}>{CURRENCY_SYMBOL} {oldOrderDiscount}</Price>
			</OldorderDiscount>
			}
			{
				scDiscount > 0 && <StoreCreditDiscount mobileView={mobileView}>
					<Span mobileView={mobileView}>{STORE_CREDIT}</Span>
					<Price mobileView={mobileView} isRTL={isRTL}>{CURRENCY_SYMBOL} {scDiscount}</Price>
				</StoreCreditDiscount>
			}
			<ConvinceFess mobileView={mobileView}>
				<Span mobileView={mobileView}>{CONVENIENCE_FEES}</Span>
				<Price mobileView={mobileView} isRTL={isRTL}>{shipping > 0 ? (
					<Span mobileView={mobileView}>
                + {CURRENCY_SYMBOL} {shipping}
					</Span>
				) : (
					FREE
				)}</Price>
			</ConvinceFess>
		</TaxWrapper>
		<TotalAmount mobileView={mobileView}>
			<TotalSpan>{TOTAL}</TotalSpan>
			<TotalPriceSpan mobileView={mobileView} isRTL={isRTL}>{CURRENCY_SYMBOL} {total}</TotalPriceSpan>
		</TotalAmount>
	</PriceBreakUpContainer>;
};

export default PriceBreakUpOD;
