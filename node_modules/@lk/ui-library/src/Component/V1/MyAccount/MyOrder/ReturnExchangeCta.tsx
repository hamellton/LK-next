import React from "react";
// import { getFormattedDate } from "../../../../helper";
import { formatDateWithPattern, honorFlags } from "../../../../helpers";
// import { TypographyENUM } from "../../../../Types/general";
// import Dropdown from "../../../Common/Dropdown/Dropdown.component";
import { ReturnExchangeType } from "./MyOrder.types";
import { DetailDateText, DetailInfoText, DetailTextContainer, Image, MobileCta, ReturnExchangeButton, ReturnExchangeContainer, ReturnExchangeSection, ReturnExchangeWrapper } from "./styles";


const ReturnExchange = ({ classification, returnReason, returnEligibilityItem, mobileView, returnSelection, returnExchange, returnDetails, returnId, isReturnCancelled, onClickReturnExchange }: ReturnExchangeType) => {
	const options: any = returnReason && returnReason[classification]?.map((reason: any) => { return { key: reason.reason, value: reason.id }; });
	// const handleChange = (e:any) => {
	// 	console.log(e);
	// };
	// const { returnExchange, returnDetails } = returnConfig;
	const { returnable, isExchangeable, isRefundable, refundMethodRequest, returnEligibleTillDate } =
		returnEligibilityItem || {};
	// const maxDaysTs = MAX_DAYS * 86400000;
	const isValidReturnId = returnId && !isReturnCancelled;
	const todayDateTs = new Date().getTime();
	let returnAllowedDate = "";
	let returnAllowedDateTs;
	let returnState = null;
	const itemReturnState = returnSelection?.itemReturnState || null;
	if (!isValidReturnId && returnEligibleTillDate) {
		returnAllowedDateTs = new Date(returnEligibleTillDate).getTime();
		returnAllowedDate = formatDateWithPattern(returnAllowedDateTs, "D MMM", "year");
	}
	if (
		returnDetails === "ON" &&
		isValidReturnId &&
		(!refundMethodRequest || refundMethodRequest === "exchange")
	) {
		const returnStateKey = honorFlags(true, isExchangeable, isRefundable, true);
		if (returnStateKey) {
			returnState = itemReturnState?.[returnStateKey];
		}
	} else if (returnExchange === "ON" && returnAllowedDateTs && returnAllowedDateTs > todayDateTs) {
		const returnStateKey = honorFlags(returnable, isExchangeable, isRefundable);
		if (returnStateKey) {
			returnState = itemReturnState?.[returnStateKey];
		}
	} else if (returnExchange === "ON" && returnAllowedDateTs && returnAllowedDateTs < todayDateTs) {
		returnState = itemReturnState?.data_nonrefundable_nonexchangeable;
		if (returnState) {
			returnState.innerBoxTitle = "" + returnState?.innerBoxTitleDateExpired;
			returnState.innerBoxSubText = "";
		}
	}
	const { title, subText, returnCTA, innerBoxTitle } = returnState || {};
	console.log({ ...returnState }, returnEligibilityItem, returnSelection, returnExchange, returnDetails, returnReason, "returnState");
	// const returnEligibleTillDate = returnEligibilityItem.returnEligibleTillDate || null;
	// const returnAllowedDate = returnEligibleTillDate ? formatDateWithPattern(new Date(returnEligibleTillDate).getTime(), "D MMM", "year") : null;
	return <>
		{title ? (!mobileView ? <ReturnExchangeWrapper>
			{returnEligibilityItem && options && <><ReturnExchangeButton>Return/Exchnage
				<Image alt="arrow-down" className="margin-l5" src="	https://preprod.lenskart.com/ArrowDropDown/ArrowDropDown-a7b2d252401f1ffa233f9b376f037c40.svg" />
			</ReturnExchangeButton>
			{/* <Dropdown id="returnreason-dropdown" value="it was true" font={TypographyENUM.serif} isRTL={false} handleChange={handleChange} options={options} dataLocale={dataLocale} isLabel={false}></Dropdown> */}
			</>}
		</ReturnExchangeWrapper> :
			<ReturnExchangeSection>
				<ReturnExchangeContainer>
					<DetailTextContainer>
						<DetailInfoText>{title}</DetailInfoText>
						<DetailDateText>{returnAllowedDate && (
							<span className="mr-t5 block">{subText.replace("%date", returnAllowedDate)}</span>
						)}</DetailDateText>
					</DetailTextContainer>
					<MobileCta onClick={onClickReturnExchange}>
						{returnCTA}
					</MobileCta>
				</ReturnExchangeContainer>
			</ReturnExchangeSection>) : null}
		{innerBoxTitle ? <ReturnExchangeSection>
			<ReturnExchangeContainer>
				<span>{innerBoxTitle.replace("%date", returnAllowedDate)}</span>
				<MobileCta onClick={() => window.location.href = returnSelection?.viewPolicyLink ? returnSelection?.viewPolicyLink : null}>
					{returnSelection?.viewPolicyText}
				</MobileCta>
			</ReturnExchangeContainer>
		</ReturnExchangeSection> : null}
	</>;
};

export default ReturnExchange;