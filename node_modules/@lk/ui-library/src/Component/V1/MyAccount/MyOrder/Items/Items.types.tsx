import { DataType } from "../../../../../Types/general";

export interface itemType {
    order:any;
    item: any,
    dataLocale: any;
    redisCommonData?: any;
    onClickReturnExchange: () => void;
    pendingStatus: any;
    orderStatusRedis: DataType;
    paymentList: any;
    createdAt: number;
    returnEligibilityItem: any;
    getPendingStatus: (pendingOrderStatus: string,
    powerRequired: string,
    dataLocale: any,
    createdAt: number,
    isSeamless: boolean) => any;
    onAddPowerClick?: () => void;
    filterTrackingStatus: (item:any, early:string) => any;
    formatDate: (createdAt:string, pattern:string, year:string) => string;
    returnReason: any;
    handleManuallprescription?: (id:string | number, powerType: string, item:any) => void;
    handleSavedprescription?: (item:any, order:any) => void;
    handleUploadprescription?: (params:any) => void;
    handleCallBack?: (params:any) => void;
    handleSendEmail?: (params:any) => void;
    handleOpenPrescriptionImageModal?: (imageFileName: string) => void;
    updateEmbedVideo: () => void;
    listing: boolean;
	mobileView?: boolean;
    configData: DataType;
    returnSelection?: {itemReturnState: {data_nonrefundable_nonexchangeable: {innerBoxTitle: string, innerBoxTitleDateExpired: string, innerBoxSubText: string}, [key: string]: any}, [key: string]: any},
    returnExchange?: string,
    returnDetails?: string,
    onPdClick?: () => void
    editPowerHandler?: () => void
    removeDomainName: (a:string, b:string, c:string, d:string) => string;
    subdirectoryPath: string
    country: string
}
