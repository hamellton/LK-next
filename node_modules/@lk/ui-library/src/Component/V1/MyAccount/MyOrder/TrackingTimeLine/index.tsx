import React, { useCallback } from "react";
import { useState } from "react";
import Carousel from "../../../../Common/Carousel";
import { formatDate } from "../utils";
import { Date, DeliveryWrapper, Image, ProcessBar, RoundIcon, SatatusIcon, ShowToolTip, StatusInfo, StatusLabel, TrackingDataContainer, TrackingIcon, TrackingTimeLineWrapper, ViewDetails, WatchVideo, WatchVideoImage } from "./styles";
import { TrackingTimeLineType } from "./TrackingTimeLine.types";
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";
import ExpextedDelivery from "../ExpectedDelivery";
import { IconLeft, IconRight } from "../../../../../Icons";

const MAX_SLIDES = 5;
const carouselConfig = {
	autoplay: false,
	infinite: false,
	slidesToScroll: 1,
	nextArrow: (
		<CustomNavButton>
			<IconRight />
		</CustomNavButton>
	),
	prevArrow: (
		<CustomNavButton>
			<IconLeft />
		</CustomNavButton>
	),
};

function CustomNavButton({ children, ...props }: any) {
	return <button {...props}>{children}</button>;
}

function openVideo(updateEmbedVideo:any, evt: any) {
	console.log(evt);
	window.history.pushState({ embedVideo: true }, "Embed YouTube Video", null);
	updateEmbedVideo({ embedVideo: "MR-ZnDoZx1A" });
}

function showTooltip(ev:any) {
	const el = ev.target;
	const title = el.textContent;
	const overflowed = el.scrollWidth > el.clientWidth;
	el.title = overflowed ? title : "";
}

function getTrackingData(histories:any, deliveryDate:any,
	embedVideoFunc:any,
	revisedEta:any,
	dataLocale:any,
	orderId:any,
	itemId:any
) {
	console.log(orderId, itemId);
	const { WATCH_VIDEO, TRACKING_ICON, VIDEO_PLAY_ICON, VIEW_DETAILS } = dataLocale || {};
	const trackingData:any = [];
	let initialSlide:any = 0;
	for (let i = 0, len = histories.length; i < len; i++) {
		const {
			isVisible,
			createdAt,
			current,
			iconUrl,
			statusLabel,
			status,
			descriptionLink,
			subTitle,
			showReturnDetails,
		} = histories[i];
		if (isVisible) {
			trackingData.push(
				<TrackingDataContainer key={`tracking_${i}`}>
					<StatusInfo>
						<SatatusIcon>
							{current ? <TrackingIcon>
								<Image src={iconUrl} alt={TRACKING_ICON} />
							</TrackingIcon> : <RoundIcon>
							</RoundIcon>
							}
						</SatatusIcon>
						{trackingData.length > 0 && <ProcessBar></ProcessBar>}
					</StatusInfo>
					<StatusLabel current={current}>
						{statusLabel}
					</StatusLabel>
					{createdAt && (
						<Date>
							{formatDate(createdAt, "D MMM")}
						</Date>
					)}
					{showReturnDetails && <ViewDetails>
						{VIEW_DETAILS}
					</ViewDetails>
					}
					{ ["DELIVERED_AT_STORE", "DELIVERED_TO_CUSTOMER"].includes(status) && deliveryDate && !createdAt && 
						<DeliveryWrapper>
							<ExpextedDelivery dataLocale={dataLocale} revisedETA={revisedEta} deliveryDate={deliveryDate} />
						</DeliveryWrapper>
					}
					{descriptionLink && <WatchVideo onClick={() => embedVideoFunc()}>{WATCH_VIDEO}
						<WatchVideoImage src="https://static.lenskart.com/media/desktop/img/video-player-icon.svg" alt={VIDEO_PLAY_ICON} />
					</WatchVideo>
					}
					{subTitle && <ShowToolTip onFocus={showTooltip}
						onMouseOver={showTooltip}>
						{subTitle}
					</ShowToolTip>
					}
				</TrackingDataContainer>
			);
			if (current) {
				initialSlide = Math.max(0, trackingData.length - MAX_SLIDES);
			}
		}
	}
	const slidesToShow:any = Math.min(trackingData.length, MAX_SLIDES);
	if (trackingData.length > 0 && trackingData.length < 2) {
		trackingData.unshift(
			<TrackingDataContainer key={trackingData.length} />
		);
		trackingData.push(
			<TrackingDataContainer key={trackingData.length + 1} />
		);
	}
	const config:any = Object.assign(carouselConfig, {
		slidesToShow,
		initialSlide,
	});
	return {
		data: trackingData,
		config
	};
}

const TrackingTimeLine = ({ dataLocale, itemTracking, deliveryDate, orderId, itemId, revisedEta, updateEmbedVideo }: TrackingTimeLineType) => {

	const embedVideoFunc = useCallback(openVideo.bind(null, updateEmbedVideo), []);
	const { histories = [] } = itemTracking;
	const [ trakingData ] = useState(getTrackingData(
		histories,
		deliveryDate,
		embedVideoFunc,
		revisedEta,
		dataLocale,
		orderId,
		itemId
	));
	const { data, config } = trakingData;
	return (
		<TrackingTimeLineWrapper>
			<Carousel carouselConfig={config} >
				{data.map((htmlData:any) => (
					<>
						{htmlData}
					</>
				))}
			</Carousel>
		</TrackingTimeLineWrapper>
	);
};

export default TrackingTimeLine;