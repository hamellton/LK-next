import { DataType } from "../../../../../Types/general";

export interface OrderDetailType {
    dataLocale: any;
    onAddPowerClick?: ({ order, item } : {order: {[key: string]: unknown}, item: {[key: string]: unknown}}) => void;
    onPdClick?: ({ order, item } : {order: {[key: string]: unknown}, item: {[key: string]: unknown}}) => void;
    editPowerHandler?: ({ order, item } : {order: {[key: string]: unknown}, item: {[key: string]: unknown}}) => void;
    order: any;
    returnConfig: {[key: string]: any};
    returnReason: {[key: string]: unknown};
    onClickReturnExchange: (itemId: number) => void;
    returnEligibilityDetails: {items: {id: string}[]}
    formatDate: (createdAt: string, pattern:string, year:string) => string;
    orderStatusRedis: any;
    getPendingStatus: (pendingOrderStatus: string,
        powerRequired: string,
        dataLocale: any,
        createdAt: number,
        isSeamless: boolean) => any;
    filterTrackingStatus: (item:any, early:string) => any;
    confirmOrder: (params:any) => void;
    onNeedHelp: (params:any) => void;
    handlePayNow: (params:any) => void;
    handleManuallprescription: (id:string | number, powerType: string, item:any) => void;
    handleSavedprescription: (item:any, order:any) => void;
    handleUploadprescription: (params:any) => void;
    handleCallBack: (params:any) => void;
    handleSendEmail: (params:any) => void;
    handleOpenPrescriptionImageModal: (imageFileName: string) => void;
    logOutHandler?: () => void;
    showingLoader: boolean;
    backRoute?: () => void;
    updateEmbedVideo: () => void;
    configData: DataType;
    mobileView?: boolean;
    country: string;
    isRTL?: boolean
    removeDomainName: (a:string, b:string, c:string, d:string) => string;
    subdirectoryPath: string
    redirectToHome?: () => void,
    handleStudioFlowAppointmentClick: () => void
    addPowerCtaClick?: (val:boolean) => void
    setEditAddress: (props: boolean) => void;
    addPowerCtaGA?: (a:string,b:string,c:any,d:any) => void
}