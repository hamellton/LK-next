import { DataType } from "../../../../Types/general";

export interface MyOrderType {
    dataLocale: any;
    redisCommonData: any;
    onAddPowerClick?: ({ order, item } : {order: {[key: string]: unknown}, item: {[key: string]: unknown}}) => void;
    onPdClick?: ({ order, item } : {order: {[key: string]: unknown}, item: {[key: string]: unknown}}) => void;
    editPowerHandler?: ({ order, item } : {order: {[key: string]: unknown}, item: {[key: string]: unknown}}) => void;
    totalOrderCount: number;
    itemsPerPage: number;
    onClickReturnExchange: () => void;
    onClickWhatsappToggle: () => void
    whatsAppActive: boolean;
    clickOnPage: (params:any) => void;
    pageNumber?: number;
    logOutHandler: () => void;
    orderList: any;
    formatDate: (createdAt: string, pattern:string, year:string) => string;
	orderStatusRedis: any;
    filterTrackingStatus: (item:any, early:string) => any;
    confirmOrder: (params:any) => void;
    handlePayNow: (params:any) => void;
    showingLoader: boolean
    onNeedHelp: (params:any) => void;
    returnEligibilityDetailsArr: any;
    returnReason: any;
    getPendingStatus: (pendingOrderStatus: string,
        powerRequired: string,
        dataLocale: any,
        createdAt: number,
        isSeamless: boolean) => any;
    handleManuallprescription: (id:string | number, powerType: string, item:any) => void;
    handleSavedprescription: (item:any, order:any) => void;
    handleUploadprescription: (params:any) => void;
    handleCallBack: (params:any) => void;
    handleSendEmail: (params:any) => void;
    handleOpenPrescriptionImageModal: (imageFileName: string) => void;
    onOrderDetailClick: (order:any) => void;
    configData: DataType;
    mobileView: boolean;
    country: string
    setActivePage: (props: number) => void;
    activePage: number;
    removeDomainName: (a:string, b:string, c:string) => string;
    subdirectoryPath: string,
    handleStudioFlowAppointmentClick: () => void
    addGAEvent?: () => void,
    addPowerCtaGA?:() => void;
}

export interface OrderListingType {
    orderList: any;
    dataLocale: any;
    onAddPowerClick?: ({ order, item } : {order: {[key: string]: unknown}, item: {[key: string]: unknown}}) => void;
    onPdClick?: ({ order, item } : {order: {[key: string]: unknown}, item: {[key: string]: unknown}}) => void;
    editPowerHandler?: ({ item, order }: {item: DataType, order: DataType}) => void;
    configData: DataType;
    redisCommonData: any;
    formatDate: (createdAt:string, pattern:string, year:string) => string;
    orderStatusRedis: any;
    onClickReturnExchange: (itemId: number) => void;
    getPendingStatus: (pendingOrderStatus: string,
        powerRequired: string,
        dataLocale: any,
        createdAt: number,
        isSeamless: boolean) => any;
    filterTrackingStatus: (item:any, early:string) => any;
    onNeedHelp: (params:any) => void
    confirmOrder: (params:any) => void;
    handlePayNow: (params:any) => void;
    returnEligibiliyDetails: any;
    returnReason: any;
    handleManuallprescription: (id:string | number, powerType: string, item:any) => void;
    handleSavedprescription: (item:any, order:any) => void;
    handleUploadprescription: (item:any) => void;
    handleCallBack: (params:any) => void;
    handleSendEmail: (params:any) => void;
    handleOpenPrescriptionImageModal: (imageFileName: string) => void;
    onOrderDetailClick: (order:any) => void;
    mobileView: boolean;
    country: string
    removeDomainName: (a:string, b:string, c:string) => string;
    subdirectoryPath: string,
    handleStudioFlowAppointmentClick: () => void
    addGAEvent?: (boolean:any) => void
    addPowerCtaGA?: (a:string,b:string,c:any,d:string) => void
}


export interface pendingStatusType {
    dataLocale: any;
    pendingOrderStatus: string;
    pendingPowerPaymentStatus: any;
	mobileView?: boolean;
}

export interface itemStatusType {
    dataLocale: any
    itemStatus: any;
    revisedETA: number;
    deliveryDate: number;
	mobileView?: boolean;
}

export interface ReturnExchangeType {
    classification: string;
    returnReason: any;
    dataLocale: any;
    returnEligibilityItem: any;
    mobileView?: boolean;
    returnSelection?: {itemReturnState: {data_nonrefundable_nonexchangeable: {innerBoxTitle: string, innerBoxTitleDateExpired: string, innerBoxSubText: string}, [key: string]: any}, [key: string]: any},
    returnExchange?: string,
    returnDetails?: string,
    returnId: string,
    isReturnCancelled: boolean;
    onClickReturnExchange: () => void;
}
