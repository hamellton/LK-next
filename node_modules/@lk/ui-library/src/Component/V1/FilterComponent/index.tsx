import React, { useEffect, useState } from "react";
import { animated, useTransition } from "react-spring";
import * as Icons from "../../../Icons/index";
import { FilterComponentTypes } from "./FilterComponent.types";

import {
	FilterApplyBtnWrapper,
	FilterBtn,
	FilterCount,
	FilterHeader,
	FilterHeaderIcon,
	FilterHeaderText,
	FilterHeaderWrapper,
	FilterIndicator,
	FilterOptionCheckbox,
	FilterOptions,
	FilterOptionsWrapper,
	FilterOptionTitle,
	FilterType,
	FilterTypes,
	FilterTypesWrapper,
	FilterWrapper,
	Root,
} from "./styles";

const initialProps = {
	opacity: 0,
	transform: "translateY(40px)"
};

const finalProps = {
	opacity: 1,
	transform: "translateY(0px)"
};

const AnimatedRoot = animated(Root);
const FilterComponent = ({ closeFilter= () => null, allFiltersData,selectedFilterData,initialType,onFilterClick=()=>null,showClickFilter=()=>null,defaultSelection=initialType, options, dataLocale, fetFilterDataMsite, show=true }:FilterComponentTypes) => {

	const transitions = useTransition(show, {
		from: initialProps,
		enter: finalProps,
		leave: initialProps
	});


	const [selectedFilter, setselectedFilter] = useState<any>({});

	useEffect(() => {
		if(selectedFilterData && Object.keys(selectedFilterData).length && show){
			Object.keys(selectedFilterData).map((data) => {
				setselectedFilter((prevSelectedFilter: { [x: string]: { selectedOption: any; }; }) => ({
					...prevSelectedFilter,
					[data]: {
						id: data,
						selectedOption: selectedFilterData[data]
					}
				}));});
		} else {
			setselectedFilter({});
		}
	}, [show]);

	useEffect(() => {
		if(selectedFilter && Object.keys(selectedFilter).length){
			let filterSelected: any = {};
			Object.keys(selectedFilter).map((data) => {
				if(selectedFilter[data].selectedOption.length > 0){
					filterSelected = { ...filterSelected, [data]: selectedFilter[data].selectedOption };
				}
			});
			console.log(filterSelected.toString(), selectedFilterData.toString(), filterSelected.toString()===selectedFilterData.toString());
			
			fetFilterDataMsite(filterSelected);
		}
	}, [selectedFilter]);
	

	// const FunctionClicked = () => {
	// 	Object.keys(selectedFilter).map((index, data) => {
	// 		// selectedFilterFunc(selectedFilter[data].selectedOpton, selectedFilter[data].)
	// 		// onFilterClick({"id": selectedFilter[data].id, "selectedOption": [...selectedFilter[data].selectedOption]},{});
	// 		onFilterClick({ ...selectedFilter[data] },{});
	// 	});
	// };

	function updateArray(array: any[], item: any) {
		const index = array.indexOf(item);
		if (index !== -1) {
			return array.filter((el: any) => el !== item); // Remove item from array
		} else {
			return [...array, item]; // Add item to array
		}
	}

	useEffect(() => {
		if (show) {
			document.body.style.overflow = "hidden";
		}
		else {
			document.body.style.overflow = "auto";
		}
		return () => {
			document.body.style.overflow = "auto";
		};
	}, [show]);
	
	if(typeof window !== "undefined")
		return (
			<>
				{
					transitions((props, item) => item && (
						<AnimatedRoot style={props}>
							<FilterHeaderWrapper>
								<FilterHeader>
									<FilterHeaderIcon onClick={closeFilter}>
										<Icons.BackArrow />
									</FilterHeaderIcon>
									<FilterHeaderText>
										{dataLocale.FILTERS}
									</FilterHeaderText>
								</FilterHeader>
							</FilterHeaderWrapper>
							<FilterWrapper innerHeight={window.innerHeight}>
								<FilterTypesWrapper>

									{allFiltersData &&
          allFiltersData.map(i => (<FilterType isSelected={defaultSelection == i.id} key={i.id}>{ selectedFilter[i.id]?.selectedOption?.length>0 && <FilterIndicator isSelected={defaultSelection == i.id}></FilterIndicator>}<FilterTypes onClick={() => showClickFilter(i.id)} isSelected={defaultSelection == i.id
          }>    {i.name?.toLowerCase()} <FilterCount isSelected={defaultSelection == i.id}>{selectedFilter[i.id]?.selectedOption?.length || ""}</FilterCount>    </FilterTypes></FilterType>
          ))}
								</FilterTypesWrapper>
								<FilterOptionsWrapper>
									{options &&
          options.map((i: any) => (<FilterOptions onClick={()=> { setselectedFilter((prevSelectedFilter: { [x: string]: { selectedOption: any; }; }) => ({ ...prevSelectedFilter, [defaultSelection]: { id: defaultSelection, selectedOption: updateArray(prevSelectedFilter?.[defaultSelection]?.selectedOption || [],i.id) } }));
          }} key={i.id}><FilterOptionTitle>{i.title} ({i.productsCount})</FilterOptionTitle><FilterOptionCheckbox checked={selectedFilter?.[defaultSelection]?.selectedOption?.includes(i.id) ||
			false} ></FilterOptionCheckbox></FilterOptions>))}
								</FilterOptionsWrapper>
							</FilterWrapper>
							<FilterApplyBtnWrapper>
								<FilterBtn isApply={false} onClick={() => {setselectedFilter({});fetFilterDataMsite({});}}>
									{dataLocale.CLEAR_ALL}
								</FilterBtn>
								<FilterBtn isApply={true} onClick={() => {
									onFilterClick(selectedFilter);

									// applyFilter && applyFilter(e);
								}}>{dataLocale.APPLY}</FilterBtn>
							</FilterApplyBtnWrapper>
						</AnimatedRoot>
					))
				}
			</>
		);
	return null;

};

export default FilterComponent;
