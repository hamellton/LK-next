import React, { ForwardedRef, forwardRef, useEffect } from "react";
import { ButtonWrapper, Loader, FlexWrapper, IconWrapper, getBGKind, getBorderKind, getColor, getHoverBorderKind, getHoverColor, getActiveColor, getActiveBgColor } from "./styles";
import { buttons, ButtonTypes, typeENUM } from "./Button.types";
import { ComponentSizeENUM, ThemeENUM } from "../../../Types/general";
import { animated, useSpring } from "react-spring";
import { colors } from "./helper";

/**
 * Default Button Component
 */

const AnimatedButtonWrapper = animated(ButtonWrapper);

// eslint-disable-next-line react/display-name
const Button = forwardRef(({
	text,
	subText,
	id,
	width = "50",
	kind = buttons.kind.background,
	componentSize = ComponentSizeENUM.small,
	theme = ThemeENUM.primary,
	buttonType = typeENUM.button,
	disabled = false,
	loading = false,
	active = false,
	showRightIcon = false,
	rightIcon,
	showLeftIcon = false,
	leftIcon,
	onClick,
	showChildren = false,
	children,
	onlyIcon = false,
	font,
	fontSize,
	isRTL = false,
	style,
	hoverShadow = true
}: ButtonTypes, ref: ForwardedRef<HTMLButtonElement>) => {
	const isHover = !disabled && !loading && !active;
	const [styles, set] = useSpring(() => ({
		backgroundColor: `var(${getBGKind(
			kind,
			active
				? colors[theme]?.hover
				: disabled
					? colors[theme]?.disabledBgColor
					: colors[theme]?.default,
			disabled
		)})`,
		border: `var(${getBorderKind(
			kind,
			colors[theme].default,
			disabled
		)})`,
		color:`var(${getColor(kind, theme, disabled)})`
	}));

	useEffect(() => {
		set({
			backgroundColor: `var(${getBGKind(
				kind,
				active
					? colors[theme]?.hover
					: disabled
						? colors[theme]?.disabledBgColor
						: colors[theme]?.default,
				disabled
			)})`,
			border: `var(${getBorderKind(
				kind,
				colors[theme].default,
				disabled
			)})`,
			color: `var(${getColor(kind, theme, disabled)})`
		});
	}, [disabled, kind, active, theme]);

	return (
		<AnimatedButtonWrapper
			ref={ref}
			hoverShadow={hoverShadow}
			style={{ ...styles, ...style }}
			id={id}
			isHover={isHover}
			isActive={active}
			styleColor={theme}
			styleKind={kind}
			styleSize={componentSize}
			onClick={(e: React.MouseEvent<HTMLButtonElement>) => {
				if (onClick) onClick(e);
				// This part is for react-spring animation on button
				if (isHover) set({
					backgroundColor: `var(${getBGKind(
						kind,
						active
							? colors[theme]?.hover
							: disabled
								? colors[theme]?.disabledBgColor
								: colors[theme]?.default,
						disabled
					)})`,
					border: `var(${getBorderKind(
						kind,
						colors[theme].default,
						disabled
					)})`,
					color: `var(${getColor(kind, theme, disabled)})`
				});
			}}
			disabled={disabled}
			type={buttonType}
			width={width}
			data-testid="button-testid"
			font={font}
			// style={style}
			// This part is for react-spring animation on button
			onMouseEnter={(isHover && !hoverShadow) ? () => set({
				backgroundColor: `var(${getBGKind(
					kind,
					colors[theme]?.hover,
					disabled
				)})`,
				border: `var(${getHoverBorderKind(kind, theme)})`,
				color: `var(${getHoverColor(kind, theme)})`
			}) : () => null}
			// This part is for react-spring animation on button
			onMouseLeave={isHover ? () => set({
				backgroundColor: `var(${getBGKind(
					kind,
					active
						? colors[theme]?.hover
						: disabled
							? colors[theme]?.disabledBgColor
							: colors[theme]?.default,
					disabled
				)})`,
				border: `var(${getBorderKind(
					kind,
					colors[theme].default,
					disabled
				)})`,
				color:`var(${getColor(kind, theme, disabled)})`
			}) : () => null}
			// This part is for react-spring animation on button
			onMouseDown={isHover ? () => set({
				backgroundColor: `var(${getActiveBgColor(theme)})`,
				border: "1px solid var(--transparent)",
				color: `var(${getActiveColor(theme)})`
			}) : () => null}
			// This part is for react-spring animation on button
			onMouseUp={isHover ? () => set({
				backgroundColor: `var(${getBGKind(
					kind,
					active
						? colors[theme]?.hover
						: disabled
							? colors[theme]?.disabledBgColor
							: colors[theme]?.default,
					disabled
				)})`,
				border: `var(${getBorderKind(
					kind,
					colors[theme].default,
					disabled
				)})`,
				color:`var(${getColor(kind, theme, disabled)})`
			}) : () => null}
		>
			{!onlyIcon ? (
				<>
					{showChildren && children}
					{loading && (
						<Loader
							styleColor={theme}
							styleKind={kind}
							disabled={disabled}
						/>
					)}

					{!loading && !showChildren && (
						<FlexWrapper fontSize={fontSize} data-testid="button-text" isRTL={isRTL}>
							{showLeftIcon && leftIcon && (
								<IconWrapper>
									{leftIcon}
								</IconWrapper>
							)}
							{text}
							<br />
							{subText && subText}
							{showRightIcon && rightIcon && (
								<IconWrapper>
									{rightIcon}
								</IconWrapper>
							)}
						</FlexWrapper>
					)}
				</>
			) : (
				<>
					{onlyIcon && rightIcon && (
						{ rightIcon }
					)}
				</>
			)}
		</AnimatedButtonWrapper>
	);
});
export default Button;
