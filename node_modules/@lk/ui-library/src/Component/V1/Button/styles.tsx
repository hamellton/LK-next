import styled, { css, keyframes } from "styled-components";
import { ComponentSizeENUM, ThemeENUM, TypographyENUM } from "../../../Types/general";
import { kindENUM } from "./Button.types";
import { colors, fontSize, spacing, borderRadius } from "./helper";

export const getBGKind = (type: kindENUM, color: string, disabled: boolean) => {
	if (disabled && type != kindENUM.tertiary) {
		return color;
	} else if (type === kindENUM.border) {
		return "--white";
	} else if (type === kindENUM.tertiary) {
		return "--transparent";
	} else return color;
};

export const getBorderKind = (type: kindENUM, color: string, disabled: boolean) => {
	if (disabled) {
		return "1px solid var(--transparent)";
	} else if (type === kindENUM.background || type === kindENUM.tertiary) {
		return "1px solid var(--transparent)";
	} else return `1px solid var(${color})`;
};

export const getColor = (type: kindENUM, color: ThemeENUM, disabled: boolean) => {
	if (disabled) {
		return colors[color].disabledText;
	}
	if (type === kindENUM.border || type === kindENUM.tertiary) {
		return colors[color].default;
	}
	return colors[color].text;
};

export const getHoverColor = (type: kindENUM, color: ThemeENUM) => {
	if (type === kindENUM.border || type === kindENUM.tertiary) {
		return colors[color].hoverColor;
	}
	return colors[color].hoverColor;
};

export const getHoverBorderKind = (type: kindENUM, color: ThemeENUM) => {
	if (type !== kindENUM.tertiary)
		return `1px solid var(${colors[color].default})`;
	else return "1px solid transparent";
};

const getTextDecoration = (type: kindENUM) => {
	if (type === kindENUM.tertiary) {
		return "underline";
	}
};

export const getActiveColor = (color: ThemeENUM) => {
	return colors[color].pressedText;
};
export const getActiveBgColor = (color: ThemeENUM) => {
	return colors[color].pressedBgColor;
};
export const ButtonWrapper = styled.button<{
	styleSize: ComponentSizeENUM
	styleKind: kindENUM
	styleColor: ThemeENUM
	isActive: boolean
	isHover: boolean
	disabled: boolean
	width: string
	font: TypographyENUM
	hoverShadow?: boolean
}>`
	cursor: ${(props) => (props.disabled ? "not-allowed" : "pointer")};
	border-radius: var(${(props) => borderRadius[props.styleSize]});
	padding: var(${(props) => spacing[props.styleSize]});
	font-family:${(props) => props.font}; ;
	font-size: var(${(props) => fontSize[props.styleSize]});
	/* background-color: var(
		${(props) =>
		getBGKind(
			props.styleKind,
			props.isActive
				? colors[props.styleColor]?.hover
				: props.disabled
					? colors[props.styleColor]?.disabledBgColor
					: colors[props.styleColor]?.default,
			props.disabled
		)}
	); */
	border: ${(props) =>
		getBorderKind(
			props.styleKind,
			colors[props.styleColor].default,
			props.disabled
		)};
	color: var(
		${(props) => getColor(props.styleKind, props.styleColor, props.disabled)}
	);
	text-decoration: ${(props) => getTextDecoration(props.styleKind)};
	width: ${(props) => (props.width ? props.width : null)}%;
	display: flex;
	justify-content: center;
	align-items: center;
	transition: box-shadow ease-in-out 0.2s;
	&:hover {
		box-shadow: ${props => (props.hoverShadow && !props.disabled) ? "0 3px 16px 0 rgb(0 0 0 / 10%)" : ""};
	}
	${(props) =>
		props.isHover && !props.hoverShadow &&
		css`
			&:hover {
				background-color: var(
					${getBGKind(
		props.styleKind,
		colors[props.styleColor]?.hover,
		props.disabled
	)}
				);
				border: ${getHoverBorderKind(props.styleKind, props.styleColor)};
				color: var(${getHoverColor(props.styleKind, props.styleColor)});
			}
			&:active {
				color: var(${getActiveColor(props.styleColor)});
				border: 1px solid var(--transparent);
				background-color: var(${getActiveBgColor(props.styleColor)});
			}
		`}
`;

const spin = keyframes`
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }
`;

export const Loader = styled.div<{
	styleColor: ThemeENUM
	styleKind: kindENUM
	disabled: boolean
}>`
	border: 0.15em solid rgba(0, 0, 0, 0.3);
	border-top: 0.15em solid
		var(
			${(props) =>
		getColor(props.styleKind, props.styleColor, props.disabled)}
		);
	border-bottom: 0.15em solid
		var(
			${(props) =>
		getColor(props.styleKind, props.styleColor, props.disabled)}
		);
	border-radius: 50%;
	animation: ${spin} 1s linear infinite;
	-webkit-animation: ${spin} 1s linear infinite;
	display: flex;
	height: 1.2em;
	width: 1.2em;
`;

export const FlexWrapper = styled.div<{
	fontSize?:number
	isRTL: boolean
}>`
	display: flex;
	align-items: center;
	flex-direction: ${props => props.isRTL ? "row-reverse" : "row"};
	${props => props.fontSize && `font-size: ${props.fontSize}px;`}
`;
export const IconWrapper = styled.span`
	margin: 5px;
	display: flex;
	align-items: center;
	svg{
		path{
			stroke:#000;
		}
	}
`;
