/* eslint-disable no-mixed-spaces-and-tabs */
import React from "react";
import { ComponentSizeENUM, ThemeENUM, TypographyENUM } from "../../../../Types/general";
import PrimaryButton from "../../../Common/PrimaryButton";

import {
	ButtonOutMargin,
	CardFooter,
	ChangeButton,
	Divider,
	HeaderLeft,
	HeaderText,
	InputOuter,
	LeftDiv,
	LeftOuterMost,
	LeftRoot,
	Lightcolor,
	RightDiv,
	Select,
	SelectOuter,
	SummaryOuter,
} from "../styles";

const SelectReason = ({
	children,
	dataLocale = {
		HEADER: "1. Please tell us the problem with Product",
		CHANGE: "CHANGE"
	},
	isExpandable,
	setIsExpandable,
	returnResponseResult,
	_handleSort,
	primaryReason,
	_handleSortSecondary,
	secondaryReasons,
	dropdown,
	secondaryReason,
	clickContinue
}: any) => {

	return (
		<LeftOuterMost>
			<LeftRoot>
				<HeaderLeft
					background={isExpandable !== "SELECT_REASON" ? false : true}
				>
					<HeaderText>{dataLocale.HEADER}</HeaderText>
					{isExpandable !== "SELECT_REASON" ? (
						<ChangeButton onClick={() => setIsExpandable("SELECT_REASON")}>
							{dataLocale.CHANGE}
						</ChangeButton>
					) : null}
				</HeaderLeft>
			</LeftRoot>
			{isExpandable === "SELECT_REASON" ? (
				<Divider>
					<LeftDiv>
						{children}
					</LeftDiv>
					<RightDiv>
						<InputOuter>
							<SelectOuter>
								<Select id="" onChange={(event) => _handleSort(event)}>
									<option selected value="" disabled>
										Select&hellip;
									</option>
									{returnResponseResult &&
										returnResponseResult.map((item: any, index: number) => (
											<option
												selected={primaryReason === item.key}
												key={index}
												value={item.value}
											>
												{item.key}
											</option>
										))}
								</Select>
							</SelectOuter>
						</InputOuter>
						<CardFooter>Please elaborate more on fitting issues</CardFooter>
						<InputOuter>
							<SelectOuter>
								<Select id="" onChange={(event) => _handleSortSecondary(event)}>
									<option selected value="" disabled>
										Select&hellip;
									</option>
									{primaryReason &&
										dropdown !== 0 &&
										secondaryReasons[dropdown].map(
											(item: any, index: number) => (
												<option
													selected={secondaryReason === item.key}
													key={index}
													value={item.value}
												>
													{item.key}
												</option>
											)
										)}
								</Select>
							</SelectOuter>
						</InputOuter>
						{primaryReason && secondaryReason ? (
							<ButtonOutMargin>
								<PrimaryButton
									primaryText={"Next"}
									font={TypographyENUM.serif}
									componentSize={ComponentSizeENUM.medium}
									onBtnClick={() => clickContinue()}
									id="btn-primary-cl"
									width={"17%"}
									height="35px"
									theme={ThemeENUM.primary}
								/>
							</ButtonOutMargin>
						) : null}
					</RightDiv>
				</Divider>
			) : (
				<SummaryOuter>
					<span>{primaryReason}</span> :{" "}
					<Lightcolor>{secondaryReason}</Lightcolor>
				</SummaryOuter>
			)}
		</LeftOuterMost>
	);
};

export { SelectReason };
