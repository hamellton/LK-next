import React, { useCallback } from "react";
// import { AdvancedDropdown } from "../../../../..";
// import AddressSwatch from "../../../AddressSwatch";
// import { Radio } from "../../../NewPayment";
import { InputWrapper } from "../AddAddressForm.styles";
// import AddressInputField from "../components/AddressInputField";
// import AddressTextField from "../components/AddressTextField";
import { phoneCodeMapping } from "../short-config";
// import { GenderText, SelectGender } from "../styles";
// import Email from "./components/Email";
// import NormalField from "./components/NormalField";
import Number from "./components/Number";
// import Phone from "./components/Phone";
// import RadioGroup from "./components/RadioGroup";
import SelectCountry from "./components/SelectCountry";
import SelectState from "./components/SelectState";
import FieldMapper from "./FieldMapper";
import { CallBackType } from "./hooks/useAddressData";
// import AddressInputField from "../components/AddressInputField";
// import AddressTextField from "../components/AddressTextField";
import { FieldTypes } from "./types";
enum RowType {
	RADIO = "radio",
	NORMAL = "normal",
	DROPDOWN = "dropdown",
	SWATCH = "swatch",
	NULL = "null"
}
// enum addressLabelENUM {
// 	HOME = "Home",
// 	WORK = "Work",
// 	OTHER = "Other"
// }
const ShortAddressMapper = ({ font, rowType, rowData, addressData, changeAddressData, errors, errorHandler, getPincodeData, addressLabelTag, onAddressLabelChange, swatchOptions, stateList, countryList, phoneNumberLength, setPhoneNumberLength, isRTL }: any) => {
	console.log(phoneCodeMapping);
	// const [phoneNumberLength, setPhoneNumberLength] = useState(phoneCodeMapping.find(pc => pc.code === countryCode)?.maxLength || 10);
	const onChangeCountry = useCallback((country: string, cartCall = true, prevCountry: string) => {
		if (country && country !== prevCountry) {
			if (country === "SG") {
				changeAddressData("country",country);
				changeAddressData("city","Singapore");
				changeAddressData("state","Singapore");
				// setCountry(country);
				// setCityDistrict("Singapore");
				// setState("Singapore");
			}
			else {
				// setCountry(country);
				// setCityDistrict("");
				// setState("");
				changeAddressData("country",country);
				changeAddressData("city","");
				changeAddressData("state","");
			}
			if (country === "IN") {
				// getPincodeData(zipCode)
				// 	.then(data => console.log(data))
				// 	.catch(err => console.log(err));
			}
			console.log(cartCall);
			// if (cartCall && !isReturnExchange) {
			// 	// countryShippingCheck(country);
			// }
		}
	}, [changeAddressData]);
	const onFetchPincode = useCallback((validation?: string, pin?: string) => {
		// let isError = false;
		// isError = isError ||
		errorHandler("zipCode", validation, pin);
		if(!errors.zipCode && (pin)) getPincodeData(pin)
			.then((data: any) => {
				console.log(data, "data");
				if(data?.isError) {
					errorHandler("postcode", validation, pin, data.message);
					// setErrors(err => ({ ...err, zipCode: data.message }));
					// isError = true;
				}
				else if(data?.canDeliver) {
					// setCountry(data.country);
					changeAddressData("country", data.country);
					// setCityDistrict(data.city);
					changeAddressData("city", data.city);
					// setState(data.state);
					changeAddressData("state", data.city);
					// setErrors(err => ({ ...err, zipCode: data.message }));
				}
			})
			.catch((err: any) => {
				// isError = true;
				console.log(err, "Error");
			});
	}, [errorHandler, errors, getPincodeData, changeAddressData]);
	const getBlurFunction = useCallback((apiKey: string, validation?: CallBackType) => {
		if(apiKey === "postcode") return (e: any) => {onFetchPincode(validation, e.target.value); console.log("Error Handler called $$$$$$$$$$$$$$$$");};
		// if(apiKey === "phone") return (e: any) => errorHandler(apiKey, validation, e.target.value);
		if(validation) return (e: any) => {errorHandler(apiKey, validation, e.target.value); console.log("Error Handler called $$$$$$$$$$$$$$$$", apiKey, validation, e.target.value);};
		return (e: any) => console.log(e.target.value);
	}, [onFetchPincode, errorHandler]);

	const getDropdownOptions = useCallback((apiKey: string) => {
		if(apiKey === "state") return stateList.options.map((data: any) => ({
			display: data,
			value: data.toUpperCase(),
			onChange: (e: any) => {
				// setState(e.target.value);
				changeAddressData(apiKey, e.target.value);
			},
		}));
		if(apiKey === "country") return countryList.options.map((data: any) => ({
			display: data.country_name,
			value: data.country_code,
			onChange: (e: any) => {
				onChangeCountry(
					e.target.value,
					false,
					addressData["state"]
				);
			},
		}));
		return [];
	}, [stateList, countryList, changeAddressData, onChangeCountry, addressData]);

	const phoneCodeChangeHandler = useCallback((code: string, apiKey: string) => {
		const maxLength = phoneCodeMapping?.find(pc => pc.code === code)?.maxLength || 10;
		setPhoneNumberLength(maxLength);
		changeAddressData(apiKey || "phoneCode", code);
	}, []);

	switch (rowType) {
	case RowType.NORMAL:
		return <InputWrapper>
			{/* {rowData.map(da => <AddressInputField key={da.apiKey} font={font} isError={!!errors[da.apiKey]} subText={(errors[da.apiKey] as string)} isFullWidth>
				<AddressTextField value={addressData[da.apiKey]} onChange={e => changeAddressData(da.apiKey ,e.target.value)} placeholder={da.placeholder} clearText={() => changeAddressData(da.apiKey ,"")} onBlur={(e) => errorHandler(da.apiKey, da.validation, e.target.value)} />
			</AddressInputField>)} */}
			{rowData.map((da: any) => <FieldMapper key={da.fieldType} fieldType={da.fieldType} radioOptions={da.options} onBlur={getBlurFunction(da.apiKey, da.validation)} dropdownOptions={getDropdownOptions(da.apiKey)} phoneCodeChangeHandler={phoneCodeChangeHandler} phoneCodeOptions={phoneCodeMapping} phoneNumberLength={phoneNumberLength} {...da} font={font} addressData={addressData} changeAddressData={changeAddressData} errors={errors} errorHandler={errorHandler} isRTL={isRTL} />)}
		</InputWrapper>;

	case RowType.NULL:
		return <React.Fragment>
			{/* {rowData.map(da => <React.Fragment key={da.label}>
				<InputWrapper>
					<SelectGender>{da.label}</SelectGender>
				</InputWrapper>
				<InputWrapper>
					{da.options.map((op: {value: string, key: string}, i: number) => <React.Fragment key={i}><Radio isSelected={addressData[da.apiKey] === op.value} onClick={() => changeAddressData(da.apiKey, op.value)}></Radio><GenderText>{op.key}</GenderText></React.Fragment>)}
				</InputWrapper>
			</React.Fragment>)} */}
			{rowData.map((da: any) => <FieldMapper key={da.fieldType} fieldType={da.fieldType} radioOptions={da.options} onBlur={getBlurFunction(da.apiKey, da.validation)} dropdownOptions={getDropdownOptions(da.apiKey)} phoneCodeChangeHandler={phoneCodeChangeHandler} phoneCodeOptions={phoneCodeMapping} phoneNumberLength={phoneNumberLength} {...da} font={font} addressData={addressData} changeAddressData={changeAddressData} errors={errors} errorHandler={errorHandler} isRTL={isRTL}/>)}
		</React.Fragment>;

	case RowType.SWATCH:
		return <div style={{ display: "flex",flexDirection: "column" }}>
			{/* {rowData.map((da, i) => <React.Fragment key={i}>
				<AddressLabel>Save as</AddressLabel>
				<div>
					<AddressSwatch value={addressLabelTag} options={swatchOptions} onChange={(text) => onAddressLabelChange(text)} font={font} />
					{addressLabelTag === addressLabelENUM.OTHER && <AddressInputField font={font} subText={(errors[da.apiKey || "addressLabel"] as string)} isError={!!errors[da.apiKey || "addressLabel"]}>
						<AddressTextField value={addressData[da.apiKey || "addressLabel"]} onChange={e => changeAddressData(da.apiKey || "addressLabel", e.target.value)} placeholder={da.placeholder} clearText={() => changeAddressData(da.apiKey || "addressLabel", "")} onBlur={(e) => errorHandler("addressLabel", da.validation, e.target.value)} />
					</AddressInputField>}
				</div>
			</React.Fragment>)} */}
			{rowData.map((da: any) => <FieldMapper key={da.fieldType} fieldType={da.fieldType} radioOptions={da.options} onBlur={getBlurFunction(da.apiKey, da.validation)} dropdownOptions={getDropdownOptions(da.apiKey)} {...da} onAddressLabelChange={onAddressLabelChange} swatchOptions={swatchOptions} font={font} addressData={addressData} addressLabelTag={addressLabelTag} changeAddressData={changeAddressData} errors={errors} errorHandler={errorHandler} isRTL={isRTL}/>)}
		</div>;

		// case RowType.NULL:
		// 	return <>
		// 		{rowData.map((da, i) => <AddressInputField font={font} isFullWidth line={2} label="Directions to reach" subText={(errors.landmark as string)} isError={!!errors.landmark}>
		// 			<LandmarkTextarea value={landmark} onChange={e => setLandmark(e.target.value)} placeholder="e.g. Apartment on the right side of the lift" font={font} />
		// 		</AddressInputField>)}
		// 	</>;

	case FieldTypes.NUMBER:
		return <Number {...rowData}/>;

	case FieldTypes.SELECT_STATE:
		return <SelectState {...rowData}/>;

	case FieldTypes.SELECT_COUNTRY:
		return <SelectCountry {...rowData}/>;

	default:
		return null;
	}
};

export default ShortAddressMapper;
