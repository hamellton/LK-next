import React from "react";
import { TypographyENUM } from "../../../../Types/general";
import { AddressFormType,
	// SubmitType
} from "./AddAddressForm.types";
import { Form,
	// InputWrapper,
	ReviewFormWrapper,
	// LandmarkTextarea, AddressLabel, InvisibleButton
} from "./AddAddressForm.styles";
// import AddressInputField from "../../AddressInputField";
// import PhoneCodeDropdown from "../../PhonecodeDropdown";
// import { Email } from "../../../../Icons";
// import AddressTextField from "../../AddressTextField";
// import AddressSwatch from "../../AddressSwatch";
// import { AdvancedDropdown } from "../../../..";
// import SvgOther from "../../../../Icons/Other";
// import SvgWork from "../../../../Icons/Work";
// import SvgHome from "../../../../Icons/Home";
// import { isName, validateEmail, validateNumber, validateRequired } from "./helpers";
// import { Radio } from "../../NewPayment/components/Radio";
// import { GenderText, SelectGender } from "./styles";
import { shortAddressForm } from "./short-config";
import ShortAddressMapper from "./shortAddress/ShortAddressMapper";
import useAddressData from "./shortAddress/hooks/useAddressData";

// enum addressLabelENUM {
// 	HOME = "Home",
// 	WORK = "Work",
// 	OTHER = "Other"
// }
const AddAddressForm = ({
	id = "add-address-form",
	// dataLocale = {
	// 	FIRST_NAME: "First Name",
	// 	LAST_NAME: "Last Name",
	// 	MOBILE: "Mobile",
	// 	EMAIL: "Email",
	// 	ADDRESS_LINE_1: "Address Line 1",
	// 	ADDRESS_LINE_2: "Address Line 2",
	// 	ZIP_CODE: "Zip/Postal Code",
	// 	CITY_DISTRICT: "City/District",
	// 	COUNTRY: "Country",
	// 	STATE_PROVINCE: "State/Province",
	// 	CONTINUE: "CONTINUE",
	// 	VIEW_SAVED_ADDRESS: "VIEW SAVED ADDRESS"
	// },
	font = TypographyENUM.defaultBook,
	// onSubmit = () => console.log("submit"),
	countryList = {
		options: [],
		optionsText: "",
		optionValue: ""
	},
	stateList = {
		options: [],
		optionsText: "",
		optionValue: ""
	},
	// isReturnExchange = false,
	initialAddressData = null,
	// guestEmail,
	// guestNumber,
	getPincodeData,
	// phoneCode,
	// submitRef,
	// disableAction,
	// isRTL = false,
	countryCode,
	addressLabelTag,
	onAddressLabelChange,
	swatchOptions
}: AddressFormType) => {
	const { addressData, changeAddressData, errorHandler, errors, phoneNumberLength, setPhoneNumberLength } = useAddressData({ initialAddressData, countryCode });
	return (
		<ReviewFormWrapper id={id} styleFont={font}>
			<Form>
				{shortAddressForm.map((sa, i) => <ShortAddressMapper key={i} rowType={sa.rowType} rowData={sa.data} font={TypographyENUM.lkSansRegular} addressData={addressData} changeAddressData={changeAddressData} errorHandler={errorHandler} errors={errors} addressLabelTag={addressLabelTag} onAddressLabelChange={onAddressLabelChange} swatchOptions={swatchOptions} countryCode={countryCode} getPincodeData={getPincodeData} countryList={countryList} stateList={stateList} phoneNumberLength={phoneNumberLength} setPhoneNumberLength={setPhoneNumberLength} />)}
			</Form>
		</ReviewFormWrapper>
	);
};

export { AddAddressForm };
