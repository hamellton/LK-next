import React from "react";
import AdvancedDropdown from "../../../AdvancedDropdown";
import { Email } from "../../../../../Icons";
import AddressSwatch from "../../../AddressSwatch";
import { Radio } from "../../../NewPayment";
import PhoneCodeDropdown from "../../../PhonecodeDropdown";
import { AddressLabel, InputWrapper, LandmarkTextarea } from "../AddAddressForm.styles";
import AddressInputField from "../components/AddressInputField";
import { GenderText, SelectGender } from "../styles";
import { addressLabelENUM } from "./hooks/useAddressData";
import AddressTextField from "../../../AddressTextField";

const FieldMapper = ({ font, apiKey, label, onBlur, dropdownOptions, radioOptions, rowType, rowData, phoneCodeChangeHandler, phoneCodeOptions, addressData, changeAddressData, errors, errorHandler, addressLabelTag, onAddressLabelChange, swatchOptions, isRTL, fieldType, placeholder, validation, phoneNumberLength, phoneCode }: any) => {
	console.log("Unused props:", { rowType, rowData, errorHandler, validation }, { phoneCodeOptions, phoneCode, addressData, onBlur, errors });
	switch (fieldType) {
	case "normal":
		return <AddressInputField font={font} isError={!!errors[apiKey]} subText={(errors.firstName as string)} isFullWidth>
			<AddressTextField value={addressData[apiKey]} onChange={e => changeAddressData(apiKey, e.target.value)} placeholder={placeholder} clearText={() => changeAddressData(apiKey, "")}
				// onBlur={(e) => errorHandler(apiKey, validation, e.target.value)}
				onBlur={onBlur}
			/>
		</AddressInputField>;

	case "landmark":
		return <AddressInputField font={font} isFullWidth line={2} label={label} subText={(errors[apiKey] as string)} isError={!!errors[apiKey]}>
			<LandmarkTextarea value={addressData[apiKey]} onChange={e => changeAddressData(apiKey, e.target.value)} placeholder={placeholder} font={font} />
		</AddressInputField>;
	case "phone":
		return <AddressInputField font={font} isError={!!errors[apiKey]} subText={(errors[apiKey] as string)} isFullWidth>
			<AddressTextField value={addressData[apiKey]} onChange={e => changeAddressData(apiKey, e.target.value)} clearText={() => changeAddressData(apiKey, "")} type="text" maxLength={phoneNumberLength} onBlur={onBlur} placeholder={placeholder} onKeyPress={(event: any) => {
				const keycode = event.which;
				if (
					!(
						event.shiftKey === false &&
								(keycode === 46 ||
									keycode === 8 ||
									keycode === 37 ||
									keycode === 39 ||
									(keycode >= 48 && keycode <= 57))
					)
				) {
					event.preventDefault();
				}
			}}>
				<PhoneCodeDropdown availableCountries={phoneCodeOptions || []} currentPhoneCode={addressData[phoneCode.apiKey]} onChange={(newPhoneCode: string) => phoneCodeChangeHandler(newPhoneCode, phoneCode.apiKey)} />
			</AddressTextField>
		</AddressInputField>;

	case "email":
		return <AddressInputField font={font} isError={!!errors[apiKey]} subText={(errors[apiKey] as string)} isFullWidth>
			<AddressTextField value={addressData[apiKey]} onChange={e => changeAddressData(apiKey, e.target.value)} clearText={() => changeAddressData(apiKey, "")} onBlur={onBlur} placeholder={placeholder}>
				<Email />
			</AddressTextField>
		</AddressInputField>;

	case "dropdown":
		return <div style={{ width: "100%" }}>
			<AdvancedDropdown
				id="state-options"
				value={addressData[apiKey]}
				// componentSize={ComponentSizeENUM.large}
				font={font}
				fullWidth={true}
				// options={stateList.options.map(op => ({ key: op, value: op }))}
				// dataLocale={dataLocale}
				// handleChange={e => setState(e.target.value)}
				onBlur={onBlur}
				placeholder={placeholder}
				selectedValue={addressData[apiKey]}
				mainFontColor="#000"
				mainBackgroundColor="#fff"
				inputLabel={label}
				values={dropdownOptions}
				// menuItemStyles=""
				// styles=""
				// className = ""
				disabled={true}
				isRTL={isRTL}
			// styles={{ fontSize: '16px', width: '100%' }}
			/>
		</div>;

	case "radio":
		return <React.Fragment>
			<InputWrapper>
				<SelectGender>{label}</SelectGender>
			</InputWrapper>
			<InputWrapper>
				{radioOptions.map((ro: any) => <><Radio isSelected={addressData[apiKey] === ro.value} onClick={() => changeAddressData(apiKey, ro.value)}></Radio><GenderText>{ro.key}</GenderText></>)}
				{/* <Radio isSelected={gender === "male"} onClick={() => setGender("male")}></Radio><GenderText>Male</GenderText>
				<Radio isSelected={gender === "female"} onClick={() => setGender("female")}></Radio><GenderText>Female</GenderText> */}
			</InputWrapper>
		</React.Fragment>;

	case "swatch":
		return <div style={{ display: "flex",flexDirection: "column" }}>
			<AddressLabel>{label}</AddressLabel>
			<div>
				<AddressSwatch value={addressLabelTag} options={swatchOptions} onChange={(text) => onAddressLabelChange(text)} font={font} />
				{addressLabelTag === addressLabelENUM.OTHER && <AddressInputField font={font} subText={(errors[apiKey] as string)} isError={!!errors[apiKey]}>
					<AddressTextField value={addressData[apiKey]} onChange={e => changeAddressData(apiKey, e.target.value)} placeholder={placeholder} clearText={() => changeAddressData(apiKey, "")} onBlur={onBlur} />
				</AddressInputField>}
			</div>
		</div>;

	default:
		return null;
	}
};

export default FieldMapper;
