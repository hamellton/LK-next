import React, { useState } from "react";
import SvgHome from "../../../../../../Icons/Home";
import SvgOther from "../../../../../../Icons/Other";
import SvgWork from "../../../../../../Icons/Work";
import { isName, validateEmail, validateNumber, validateRequired } from "../../helpers";
// import { AddressType } from "../../AddAddressForm.types";
import { phoneCodeMapping, shortAddressForm } from "../../short-config";
type DataType = {[name: string]: any};
export enum CallBackType {
	REQUIRED = "required",
	NAME = "name",
	PHONE = "phone",
	EMAIL = "email",
	POSTCODE = "postcode"
}
export enum addressLabelENUM {
	HOME = "Home",
	WORK = "Work",
	OTHER = "Other"
}
const useAddressData = ({ initialAddressData, countryCode } : { initialAddressData: DataType | null, countryCode: string }) => {
	const [phoneNumberLength, setPhoneNumberLength] = useState(phoneCodeMapping?.find(pc => pc.code === countryCode)?.maxLength || 10);
	const [addressData, setAddressData] = useState((() => {
		const keys: DataType = {};
		shortAddressForm.forEach(row => {
			row.data.forEach(d => {
				keys[d.apiKey] = initialAddressData?.[d.apiKey] || d.defaultValue;
			});
		});
		return { ...initialAddressData, keys };
	})());
	const [errors, setErrors] = useState((() => {
		const keys: DataType = {};
		shortAddressForm.forEach(row => {
			row.data.forEach(d => {
				keys[d.apiKey] = "";
			});
		});
		return keys;
	})());
	const swatchOptions = [{ icon: <SvgHome/>, text: addressLabelENUM.HOME }, { icon: <SvgWork/>, text: addressLabelENUM.WORK }, { icon:
		<SvgOther/>, text: addressLabelENUM.OTHER }];

	const [addressLabelTag, setAddressLabelTag] = useState(initialAddressData?.addressLabel === addressLabelENUM.HOME ? addressLabelENUM.HOME : (initialAddressData?.addressLabel === addressLabelENUM.WORK ? addressLabelENUM.WORK : (initialAddressData?.addressLabel ? addressLabelENUM.OTHER : "")));
	function onAddressLabelChange(label: string) {
		if(addressLabelTag === label) {
			//
		} else if(label === addressLabelENUM.OTHER) {
			// setAddressLabel("");
			changeAddressData("addressLabel", "");
			setAddressLabelTag(label);
		} else {
			// setAddressLabel(label);
			changeAddressData("addressLabel", label);
			setAddressLabelTag(label);
		}
	}
	const getCallbackFunction = (cb: CallBackType | string) => {
		switch (cb) {
		case CallBackType.NAME:
			return isName;
		case CallBackType.EMAIL:
			return validateEmail;
		case CallBackType.PHONE:
			return (num: string | number, customValidationFn?: (num: string | number) => string) => validateNumber(num, "+966", customValidationFn);
		case CallBackType.POSTCODE:
			return validateRequired;
		case CallBackType.REQUIRED:
			return validateRequired;
		default:
			return () => "";
		}
	};
	const [fieldSwitch, setFieldSwitch] = useState(false);
	// isName, validateNumber, validateEmail, validateRequired
	function errorHandler(key: string, cb: CallBackType | string, val: any, manualErr?: string) {
		setFieldSwitch(f => !f);
		const error = getCallbackFunction(cb)(val) || manualErr || "";
		const newErrors = { ...errors };
		// setErrors(err => ({ ...err, err[key]: error, isError: !!error }));
		newErrors[key] = error;
		// newErrors.isError = !!error;
		console.log(newErrors, "newErrors");
		setErrors(newErrors);
		return !!error;
	}
	const changeAddressData = (name: string, value: any) => {
		setAddressData(addr => ({
			...addr,
			[name]: value
		}));
	};
	return { addressData, changeAddressData, errorHandler, errors, addressLabelTag, onAddressLabelChange, swatchOptions, fieldSwitch, setPhoneNumberLength, phoneNumberLength };
};

export default useAddressData;
