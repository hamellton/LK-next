import React from "react";
import { TypographyENUM } from "../../../../Types/general";
import { AddressFormType } from "./AddAddressForm.types";
import { Form, InputWrapper, ReviewFormWrapper } from "./AddAddressForm.styles";
// import AddressInputField from "../../AddressInputField";
// import PhoneCodeDropdown from "../../PhonecodeDropdown";
// import Dropdown from "../../Dropdown";
// import { Email } from "../../../../Icons";
// import AddressTextField from "../../AddressTextField";
// import AddressSwatch from "../../AddressSwatch";
// import { AdvancedDropdown } from "../../../..";
// import SvgOther from "../../../../Icons/Other";
// import SvgWork from "../../../../Icons/Work";
// import SvgHome from "../../../../Icons/Home";
// import { validateEmail, validateNumber, validateRequired } from "./helpers";
import { addressForm } from "./config";
// import AddressInputField from "../../AddressInputField";
// import AddressTextField from "./components/AddressTextField";
// import AddressInputField from "./components/AddressInputField";
// import
// import Dropdown from "../../Dropdown";
// import Dropdown from "../../../Common/Dropdown";

const AddAddressForm = ({
	id = "add-address-form",
	// dataLocale = {
	// 	FIRST_NAME: "First Name",
	// 	LAST_NAME: "Last Name",
	// 	MOBILE: "Mobile",
	// 	EMAIL: "Email",
	// 	ADDRESS_LINE_1: "Address Line 1",
	// 	ADDRESS_LINE_2: "Address Line 2",
	// 	ZIP_CODE: "Zip/Postal Code",
	// 	CITY_DISTRICT: "City/District",
	// 	COUNTRY: "Country",
	// 	STATE_PROVINCE: "State/Province",
	// 	CONTINUE: "CONTINUE",
	// 	VIEW_SAVED_ADDRESS: "VIEW SAVED ADDRESS"
	// },
	font = TypographyENUM.defaultBook,
	// onSubmit = () => console.log("submit"),
	// onViewSaved = () => console.log("View Saved Address"),
	// onPincodeChanged = (pin) => console.log("Fetch status of Pincode", pin),
	// countryList = {
	// 	options: [],
	// 	optionsText: "",
	// 	optionValue: ""
	// },
	// stateList = {
	// 	options: [],
	// 	optionsText: "",
	// 	optionValue: ""
	// },
	// isReturnExchange = false,
	// initialAddressData = null,
	// guestEmail,
	// guestNumber,
	// getPincodeData,
	// submitRef,
	// disableAction
}: AddressFormType) => {

	// const [swatchValue, setSwatchValue] = useState("Home");
	const submitForm = (e: React.FormEvent<HTMLFormElement>) => {
		e.preventDefault();
		// addressStepX 1
		// onSubmit(initialAddressData && initialAddressData.id ? SubmitType.edit : SubmitType.add, initialAddressData && initialAddressData.id ? initialAddressData.id : null, initialAddressData && initialAddressData.id ? { firstName: firstName, lastName: lastName, phone: mobile, email: email, addressline1: addressLine1, addressline2: addressLine2, postcode: zipCode || "000000", city: cityDistrict, state: state, country: country, id: initialAddressData.id, addressLabel, landmark } : { firstName: firstName, lastName: lastName, phone: mobile, email: email, addressline1: addressLine1, addressline2: addressLine2, postcode: zipCode, city: cityDistrict, state: state, country: country, addressLabel, landmark });
	};

	// function onChangeCountry(country: string, cartCall = true, prevCountry: string) {
	// 	if (country && country !== prevCountry) {
	// 		if (country === "SG") {
	// 			// setCountry(country);
	// 			// setCityDistrict("Singapore");
	// 			// setState("Singapore");
	// 		}
	// 		else {
	// 			// setCountry(country);
	// 			// setCityDistrict("");
	// 			// setState("");
	// 		}
	// 		if (country === "IN") {
	// 			// getPincodeData(zipCode)
	// 			// 	.then(data => console.log(data))
	// 			// 	.catch(err => console.log(err));
	// 		}
	// 		if (cartCall && !isReturnExchange) {
	// 			// countryShippingCheck(country);
	// 		}
	// 	}
	// }

	// function onFetchPincode(pin?: string){
	// 	getPincodeData(pin || "000000")
	// 		.then(data => {
	// 			console.log(data, "data");
	// 			// if(data?.isError) setErrors(err => ({ ...err, isError: true, zipCode: data.message }));
	// 			if(data?.canDeliver) {
	// 				// setCountry(data.country);
	// 				// setCityDistrict(data.city);
	// 				// setState(data.state);
	// 				// setErrors(err => ({ ...err, isError: true, zipCode: data.message }));
	// 			}
	// 		})
	// 		.catch(err => console.log(err, "Error"));
	// }
	// enum addressLabelENUM {
	// 	HOME = "Home",
	// 	WORK = "Work",
	// 	OTHER = "Other"
	// }
	// const swatchOptions = [{ icon: <SvgHome/>, text: addressLabelENUM.HOME }, { icon: <SvgWork/>, text: addressLabelENUM.WORK }, { icon:
	// 	<SvgOther/>, text: addressLabelENUM.OTHER }];


	// function errorHandler(key: string, cb: (val: any) => string | boolean, val: any) {
	// 	const error = cb(val);
	// }

	// useEffect(() => {
	// 	if(disableAction && typeof disableAction === "function") disableAction(!!errors.isError);
	// }, [errors.isError, disableAction]);


	// console.log(dataLocale.ADDRESS_HEADING, "addressHeading", dataLocale);

	// const [values, setValues] = useState((() => {
	// 	const valueObj: {[name: string]: string | number} = {};
	// 	addressForm.forEach(af => {
	// 		af.forEach(ad => {
	// 			valueObj[ad.props.name] = ad.defaultValue;
	// 		});
	// 	});
	// 	return valueObj;
	// })());
	// const onChange = (e: any) => {
	// 	setValues(val => ({ ...val, [e.target.name]: e.target.value }));
	// };
	// const clearValue = (name: string, defaultValue: any) => {
	// 	setValues(val => ({ ...val, [name]: defaultValue }));
	// };
	// const [focusedId, setFocusedId] = useState<string | number>("");
	// // const { label, errorMessage, onChange, id, ...inputProps } = props;

	// const handleFocus = (id: string | number) => {
	// 	setFocusedId(id);
	// };
	return (
		<ReviewFormWrapper id={id} styleFont={font}>
			<Form onSubmit={submitForm}>
				{addressForm.map((row, i) => <InputWrapper key={i}>
					{/* {row.map(ad => )} */}
				</InputWrapper>)}

				{/*  <AddressInputField font={font} subText={ad.subText} errorMessage={ad.props.errorMessage} isError={false} focused={focusedId === ad.props.id}>
					<AddressTextField value={values[ad.props.name]} onChange={onChange} clearText={() => clearValue(ad.props.name, ad.defaultValue)}
						onBlur={() => handleFocus(ad.props.id)}
						{...ad.props}
					></AddressTextField>
				</AddressInputField> */}
				{/* <InputWrapper>
					<AddressInputField font={font} isError={!!errors.firstName} subText={(errors.firstName as string)}>
						<AddressTextField value={firstName} onChange={e => setFirstName(e.target.value)} placeholder={dataLocale.FIRST_NAME} clearText={() => setFirstName("")} onBlur={(e) => errorHandler("firstName", validateRequired, e.target.value)} />
					</AddressInputField>
					<AddressInputField font={font} isError={!!errors.lastName} subText={(errors.lastName as string)}>
						<AddressTextField value={lastName} onChange={e => setLastName(e.target.value)} placeholder={dataLocale.LAST_NAME} clearText={() => setLastName("")} />
					</AddressInputField>
				</InputWrapper>
				<InputWrapper>
					<AddressInputField font={font} label={dataLocale.MOBILE} isError={!!errors.mobile} subText={(errors.mobile as string)}>
						<AddressTextField value={mobile} onChange={e => setMobile(e.target.value)} clearText={() => setMobile("")} type="string" onBlur={(e) => errorHandler("mobile", validateNumber, e.target.value)}>
							<PhoneCodeDropdown availableCountries={[{ code: "+91" }, { code: "+1" }, { code: "+967" }]} currentPhoneCode={currentPhoneCode} onChange={(newPhoneCode: string) => setCurrentPhoneCode(newPhoneCode)} />
						</AddressTextField>
					</AddressInputField>
					<AddressInputField font={font} label={dataLocale.EMAIL} isError={!!errors.email} subText={(errors.email as string)}>
						<AddressTextField value={email} onChange={e => setEmail(e.target.value)} clearText={() => setEmail("")} onBlur={(e) => errorHandler("email", validateEmail, e.target.value)}>
							<Email />
						</AddressTextField>
					</AddressInputField>
				</InputWrapper>
				<InputWrapper>
					<AddressInputField font={font} subText={(errors.addressLine1 as string) || "House / Flat Number"} isError={!!errors.addressLine1}>
						<AddressTextField value={addressLine1} onChange={e => setAddressLine1(e.target.value)} placeholder={dataLocale.ADDRESS_LINE_1} clearText={() => setAddressLine1("")} onBlur={(e) => errorHandler("addressLine1", validateRequired, e.target.value)} />
					</AddressInputField>
					<AddressInputField font={font} subText={(errors.addressLine2 as string) || "Area, Street & Landmark"} isError={!!errors.addressLine2}>
						<AddressTextField value={addressLine2} onChange={e => setAddressLine2(e.target.value)} placeholder={dataLocale.ADDRESS_LINE_2} clearText={() => setAddressLine2("")} onBlur={(e) => errorHandler("addressLine2", validateRequired, e.target.value)}/>
					</AddressInputField>
				</InputWrapper>
				<InputWrapper>
					<AddressInputField font={font} subText={(errors.zipCode as string)} isError={!!errors.zipCode}>
						<AddressTextField value={zipCode} onChange={e => setZipCode(e.target.value)} placeholder={dataLocale.ZIP_CODE} clearText={() => setZipCode("")} onBlur={(e) => onFetchPincode(e.target.value)} />
					</AddressInputField>
					<AddressInputField font={font} subText={(errors.cityDistrict as string)} isError={!!errors.cityDistrict}>
						<AddressTextField value={cityDistrict} onChange={e => setCityDistrict(e.target.value)} placeholder={dataLocale.CITY_DISTRICT} clearText={() => setCityDistrict("")} onBlur={(e) => errorHandler("cityDistrict", validateRequired, e.target.value)} />
					</AddressInputField>
				</InputWrapper>
				<InputWrapper>
					<div style={{ width: "100%" }}>
						<AdvancedDropdown
							id="state-options"
							value={state}
							// componentSize={ComponentSizeENUM.large}
							font={font}
							fullWidth={true}
							// options={stateList.options.map(op => ({ key: op, value: op }))}
							// dataLocale={dataLocale}
							// handleChange={e => setState(e.target.value)}
							onBlur={(val: string) => errorHandler("state", validateRequired, val)}
							placeholder="Select state"
							selectedValue={state}
							mainFontColor="#000"
							mainBackgroundColor="#fff"
							inputLabel="State"
							values={stateList.options.map(data => ({
								display: data,
								value: data.toUpperCase(),
								onChange: (e: any) => {
									setState(e.target.value);
								},
							}))}
							// menuItemStyles=""
							// styles=""
							// className = ""
							disabled={false}
						// styles={{ fontSize: '16px', width: '100%' }}
						/>
					</div>
					<div style={{ width: "100%" }}>
						<AdvancedDropdown
							id="country-options"
							value={country}
							// componentSize={ComponentSizeENUM.large}
							font={font}
							fullWidth={true}
							// options={countryList.options.map(op => ({ key: op.country_name, value: op.country_code }))}
							// dataLocale={dataLocale}
							// handleChange={e => setCountry(e.target.value)}
							onBlur={(val: string) => errorHandler("country", validateRequired, val)}
							placeholder="Select Country"
							selectedValue={country}
							mainFontColor="#000"
							mainBackgroundColor="#fff"
							inputLabel="Country"
							values={countryList.options.map(data => ({
								display: data.country_name,
								value: data.country_code,
								onChange: (e: any) => {
									onChangeCountry(
										e.target.value,
										false,
										state
									);
								},
							}))}
							disabled={false}
						/>
					</div>
				</InputWrapper> */}
				{/* <AddressInputField font={font} isFullWidth line={2} label="Directions to reach" subText={(errors.landmark as string)} isError={!!errors.landmark}>
					<LandmarkTextarea value={landmark} onChange={e => setLandmark(e.target.value)} placeholder="e.g. Apartment on the right side of the lift" font={font} />
				</AddressInputField>
				<div style={{ display: "flex",flexDirection: "column" }}>
					<AddressLabel>Save as</AddressLabel>
					<div>
						<AddressSwatch value={addressLabel} options={swatchOptions} onChange={(text) => onAddressLabelChange(text)} font={font} />
						{showOtherAddressLabel && <AddressInputField font={font} subText={(errors.addressLabel as string)} isError={!!errors.addressLabel}>
							<AddressTextField value={addressLabel} onChange={e => setAddressLabel(e.target.value)} placeholder={dataLocale.ADDRESS_HEADING} clearText={() => setAddressLabel("")} onBlur={(e) => errorHandler("addressLabel", validateRequired, e.target.value)} />
						</AddressInputField>}
					</div>
				</div> */}
				{/* <InvisibleButton type="submit" disabled={!!errors.isError} ref={submitRef}>Add</InvisibleButton> */}
			</Form>
		</ReviewFormWrapper>
	);
};

export { AddAddressForm };
