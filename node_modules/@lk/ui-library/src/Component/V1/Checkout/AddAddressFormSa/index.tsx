import React, { /*useEffect,*/ useEffect, useRef, useState } from "react";
import { TypographyENUM } from "../../../../Types/general";
import { AddressFormType, SubmitType } from "./AddAddressForm.types";
import { Form, InputWrapper, ReviewFormWrapper, LandmarkTextarea, AddressLabel, InvisibleButton } from "./AddAddressForm.styles";
import AddressInputField from "../../AddressInputField";
import PhoneCodeDropdown from "../../PhonecodeDropdown";
// import Dropdown from "../../../Common/Dropdown/Dropdown.component";
import { Email } from "../../../../Icons";
import AddressTextField from "../../AddressTextField";
import AddressSwatch from "../../AddressSwatch";
import AdvancedDropdown from "../../AdvancedDropdown";
import SvgOther from "../../../../Icons/Other";
import SvgWork from "../../../../Icons/Work";
import SvgHome from "../../../../Icons/Home";
import { Radio } from "../../NewPayment/components/Radio";
import { GenderText, SelectGender } from "./styles";
import { SubText } from "../../AddressInputField/styles";
import { getNumberLengthFromCode, isName, validateEmail, validateNumber, validateRequired } from "../../../../helpers";
// import
// import Dropdown from "../../Dropdown";
// import Dropdown from "../../../Common/Dropdown";
enum addressLabelENUM {
	HOME = "Home",
	WORK = "Work",
	OTHER = "Other"
}
const AddAddressFormSa = ({
	id = "add-address-form",
	dataLocale = {
		FIRST_NAME: "First Name",
		LAST_NAME: "Last Name",
		MOBILE: "Mobile",
		EMAIL: "Email",
		ADDRESS_LINE_1: "Address Line 1",
		ADDRESS_LINE_2: "Address Line 2",
		ZIP_CODE: "Zip/Postal Code",
		CITY_DISTRICT: "City/District",
		COUNTRY: "Country",
		STATE_PROVINCE: "State/Province",
		CONTINUE: "CONTINUE",
		VIEW_SAVED_ADDRESS: "VIEW SAVED ADDRESS"
	},
	font = TypographyENUM.defaultBook,
	onSubmit = () => console.log("submit"),
	// onViewSaved = () => console.log("View Saved Address"),
	// onPincodeChanged = (pin) => console.log("Fetch status of Pincode", pin),
	countryList = {
		options: [],
		optionsText: "",
		optionValue: ""
	},
	// stateList = {
	// 	options: [],
	// 	optionsText: "",
	// 	optionValue: ""
	// },
	isReturnExchange = false,
	initialAddressData = null,
	userEmail,
	userNumber,
	// getPincodeData,
	phoneCode,
	submitRef,
	btnVisible,
	tempAddressData,
	updateTempAddressData,
	isRTL = false
}: AddressFormType) => {
	const [firstName, setFirstName] = useState(initialAddressData?.firstName || tempAddressData?.firstName || "");
	const [lastName, setLastName] = useState(initialAddressData?.lastName || tempAddressData?.lastName || tempAddressData?.lastName || "");
	const [mobile, setMobile] = useState(initialAddressData?.phone || userNumber || tempAddressData?.mobile || "");
	const [email, setEmail] = useState(initialAddressData?.email || userEmail || tempAddressData?.email || "");
	const [addressLine1, setAddressLine1] = useState(initialAddressData?.addressline1 || tempAddressData?.addressLine1 || "");
	// const [addressLine2, setAddressLine2] = useState(initialAddressData?.addressline2  || tempAddressData?.lastName || "");
	const addressLine2 = initialAddressData?.addressline2 || tempAddressData?.addressLine2 || "";
	// const [zipCode, setZipCode] = useState(initialAddressData?.postcode || "000000");
	const [addressLabel, setAddressLabel] = useState(initialAddressData?.addressLabel || tempAddressData?.addressLabel || "");
	const [addressLabelTag, setAddressLabelTag] = useState(initialAddressData?.addressLabel ? (initialAddressData?.addressLabel === addressLabelENUM.HOME ? addressLabelENUM.HOME : (initialAddressData?.addressLabel === addressLabelENUM.WORK ? addressLabelENUM.WORK : (initialAddressData?.addressLabel ? addressLabelENUM.OTHER : ""))) : (tempAddressData?.addressLabel === addressLabelENUM.HOME ? addressLabelENUM.HOME : (tempAddressData?.addressLabel === addressLabelENUM.WORK ? addressLabelENUM.WORK : (tempAddressData?.addressLabel ? addressLabelENUM.OTHER : ""))));
	const [landmark, setLandmark] = useState(initialAddressData?.landmark || tempAddressData?.landmark || "");
	// const [showOtherAddressLabel, setShowOtherAddressLabel] = useState(false);
	const [cityDistrict, setCityDistrict] = useState(initialAddressData?.city || tempAddressData?.cityDistrict || "");
	const [country, setCountry] = useState(initialAddressData?.country || tempAddressData?.country || "");
	const [state, setState] = useState(initialAddressData?.state || tempAddressData?.state || "");
	const [currentPhoneCode, setCurrentPhoneCode] = useState(phoneCode || initialAddressData?.phoneCode || tempAddressData?.currentPhoneCode || "+91");
	const [gender, setGender] = useState(initialAddressData?.gender || tempAddressData?.gender || "male");
	// const isRTL = false;
	const addressLabelRef = useRef<HTMLDivElement>(null);

	// const [zipCode, setZipCode] = useState(initialAddressData?.postcode || "000000");
	// const [showOtherAddressLabel, setShowOtherAddressLabel] = useState(false);
	// const isRTL = false;

	const [errors, setErrors] = useState<{[name: string]: string | boolean}>({
		// isError: false,
		firstName: "", //
		lastName: "",
		mobile: "", // +ph
		email: "", // +em
		addressLine1: "", //
		addressLine2: "",
		zipCode: "", // +pin
		addressLabel: "", //
		landmark: "",
		cityDistrict: "", // +should be valid as per pincode api
		country: "", // +should be valid as per pincode api
		state: "", // +should be valid as per pincode api
		currentPhoneCode: "", //
		gender: ""
	});

	// const [swatchValue, setSwatchValue] = useState("Home");
	const submitForm = (e: React.FormEvent<HTMLFormElement>) => {
		e.preventDefault();
		// addressStepX 1
		if(validateAll()) {
			console.log("Submitting.....");
			onSubmit(initialAddressData && initialAddressData.id ? SubmitType.edit : SubmitType.add, initialAddressData && initialAddressData.id ? initialAddressData.id : null, initialAddressData && initialAddressData.id ? { firstName: firstName, lastName: lastName, phone: mobile, email: email, addressline1: addressLine1, addressline2: addressLine2, postcode: "000000", city: cityDistrict, state: state, country: country, id: initialAddressData.id, addressLabel, landmark, phoneCode, gender } : { firstName: firstName, lastName: lastName, phone: mobile, email: email, addressline1: addressLine1, addressline2: addressLine2, postcode: "000000", city: cityDistrict, state: state, country: country, addressLabel, landmark, phoneCode, gender });
		}
	};

	function onChangeCountry(country: string, cartCall = true, prevCountry: string) {
		if (country && country !== prevCountry) {
			if (country === "SG") {
				setCountry(country);
				setCityDistrict("Singapore");
				setState("Singapore");
			}
			else {
				setCountry(country);
				// setCityDistrict("");
				// setState("");
			}
			if (country === "IN") {
				// getPincodeData(zipCode)
				// 	.then(data => console.log(data))
				// 	.catch(err => console.log(err));
			}
			if (cartCall && !isReturnExchange) {
				// countryShippingCheck(country);
			}
		}
	}

	// function onFetchPincode(pin?: string){
	// 	// let isError = false;
	// 	// isError = isError ||
	// 	errorHandler("zipCode", validateRequired, pin || zipCode);
	// 	if((pin || zipCode)) getPincodeData(pin || zipCode)
	// 		.then(data => {
	// 			console.log(data, "data");
	// 			if(data?.isError) {
	// 				setErrors(err => ({ ...err, zipCode: data.message }));
	// 				setCountry("");
	// 				setCityDistrict("");
	// 				setState("");
	// 				// isError = true;
	// 			}
	// 			else if(data?.canDeliver) {
	// 				setCountry(data.country);
	// 				setCityDistrict(data.city);
	// 				setState(data.state);
	// 				setErrors(err => ({ ...err, zipCode: "", cityDistrict: "", state: "", country: "" }));
	// 			}
	// 		})
	// 		.catch(err => {
	// 			// isError = true;
	// 			console.log(err, "Error");
	// 		});
	// }
	const swatchOptions = [{ icon: <SvgHome/>, text: addressLabelENUM.HOME }, { icon: <SvgWork/>, text: addressLabelENUM.WORK }, { icon:
		<SvgOther/>, text: addressLabelENUM.OTHER }];

	function onAddressLabelChange(label: string) {
		if(addressLabelTag === label) {
			//
		} else if(label === addressLabelENUM.OTHER) {
			setAddressLabel("");
			setAddressLabelTag(label);
			// errorHandler("addressLabel", validateRequired, "");
		} else {
			setAddressLabel(label);
			setAddressLabelTag(label);
			setErrors(err => ({ ...err, addressLabel: "" }));
		}
	}

	// const hasErrors = (errors: {[name: string]: boolean}) => {
	// 	Object.keys(errors).filter(err => err !== "isError").forEach(err => {
	// 		if(errors[err]) return true;
	// 	});
	// 	if(!(firstName && mobile && email && addressLine1 && zipCode && addressLabel && cityDistrict && country && state)) return true;
	// 	if(!validateEmail())
	// 	return false;
	// };
	// const [fieldSwitch, setFieldSwitch] = useState(false);
	function errorHandler(key: string, cb: (...props: any) => string | boolean, ...val: any) {
		// setFieldSwitch(f => !f);
		const error = cb(...val);
		// const newErrors = { ...errors };
		// setErrors(err => ({ ...err, err[key]: error, isError: !!error }));
		// newErrors[key] = error;
		// newErrors.isError = !!error;
		// console.log("newErrors", error, val, cb);
		setErrors(errors => {
			const newErrors = { ...errors };
			newErrors[key] = error;
			// newErrors.isError = !!error;
			return newErrors;
		});
		return !!error;
	}

	// useEffect(() => {
	// 	if(disableAction && typeof disableAction === "function") disableAction(!!errors.isError);
	// 	console.log(errors);
	// }, [errors.isError, disableAction, fieldSwitch]);

	// useEffect(() => {
	// 	if(zipCode.length === 6) {
	// 		// setErrors(err => ({ ...err, zipCode: "" }));
	// 		onFetchPincode(zipCode);
	// 	}
	// }, [zipCode]);

	// console.log({ addressLabel, addressLabelTag, labelerr: errors.addressLabel }, "addresslabel =================");
	useEffect(() => {
		return () => {
			console.log("Update temp address data called");
			updateTempAddressData({ firstName, lastName, mobile, email, addressLine1, addressLine2, addressLabel, landmark, cityDistrict, country, state, currentPhoneCode, gender });
			// storeTempAddressData({ firstName, lastName, mobile, email, addressLine1, addressLine2, zipCode, addressLabel, landmark, cityDistrict: "", country: "", state: "", currentPhoneCode: "", gender }, guestEmail, guestNumber);
			//only store once there is a change in value
			//delete on address submit
			//delete on add new address click
			//delete on user credentials change
			//delete after 5mins
			//if guest info exists, user can move forward from login to address
			//store guestNumber/guestEmail along with this and check if once coming back to this page, the same creds are there, if so
			//read this and pass it to this component in props
		};
	}, [firstName, lastName, mobile, email, addressLine1, addressLine2, addressLabel, landmark, cityDistrict, country, state, currentPhoneCode, gender]);

	function validateAll() {
		let isError = false;
		isError = errorHandler("firstName", isName, firstName) || isError;
		isError = errorHandler("lastName", isName, lastName) || isError;
		isError = errorHandler("mobile", validateNumber, mobile, currentPhoneCode) || isError;
		isError = errorHandler("gender", validateRequired, gender) || isError;
		isError = errorHandler("email", validateEmail, email) || isError;
		isError = errorHandler("addressLine1", validateRequired, addressLine1) || isError;
		isError = errorHandler("cityDistrict", validateRequired, cityDistrict) || isError;
		isError = errorHandler("state", validateRequired, state) || isError;
		isError = errorHandler("country", validateRequired, country) || isError;
		// isError = errorHandler("zipCode", validateRequired, zipCode) || isError;
		isError = errorHandler("addressLabel", validateRequired, addressLabel) || isError;
		// onFetchPincode(zipCode);
		// Object.values(errors).forEach(err => {
		// 	if(err) isError = true;
		// });
		if(isError && errorHandler("addressLabel", validateRequired, addressLabel) && addressLabelRef.current) addressLabelRef.current?.scrollIntoView();
		return !isError;
	}

	// console.log(dataLocale.ADDRESS_HEADING, "addressHeading", dataLocale);
	return (
		<ReviewFormWrapper id={id} styleFont={font}>
			<Form onSubmit={submitForm}>
				<InputWrapper>
					<AddressInputField font={font} isError={!!errors.firstName} subText={(errors.firstName as string)} isFullWidth>
						<AddressTextField isRTL={isRTL} value={firstName} onChange={e => setFirstName(e.target.value)} placeholder={`${dataLocale.FIRST_NAME}*`} clearText={() => setFirstName("")} onBlur={(e) => errorHandler("firstName", isName, e.target.value)} />
					</AddressInputField>
					<AddressInputField font={font} isError={!!errors.lastName} subText={(errors.lastName as string)} isFullWidth>
						<AddressTextField isRTL={isRTL} value={lastName} onChange={e => setLastName(e.target.value)} placeholder={`${dataLocale.LAST_NAME}*`} clearText={() => setLastName("")} onBlur={(e) => errorHandler("lastName", isName, e.target.value)} />
					</AddressInputField>
				</InputWrapper>
				<React.Fragment>
					<InputWrapper>
						<SelectGender>{`${dataLocale?.SELECT_GENDER} ${dataLocale?.SYMBOL_ASTRIX}`}</SelectGender>
					</InputWrapper>
					<InputWrapper>
						<Radio isSelected={gender === "male"} onClick={() => setGender("male")}></Radio><GenderText>{dataLocale.MALE}</GenderText>
						<Radio isSelected={gender === "female"} onClick={() => setGender("female")}></Radio><GenderText>{dataLocale.FEMALE}</GenderText>
					</InputWrapper>
					<SubText isError={!!errors.gender}>{errors.gender}</SubText>
				</React.Fragment>
				<InputWrapper>
					<AddressInputField font={font} isError={!!errors.mobile} subText={(errors.mobile as string)} isFullWidth>
						<AddressTextField isRTL={isRTL} value={mobile} onChange={e => setMobile(e.target.value)} clearText={() => setMobile("")} type="text" maxLength={getNumberLengthFromCode(currentPhoneCode)} onBlur={(e) => errorHandler("mobile", validateNumber, e.target.value, currentPhoneCode)} placeholder={`${dataLocale.PHONE_NUMBER}*`} onKeyPress={(event: any) => {
							const keycode = event.which;
							if (
								!(
									event.shiftKey === false &&
										(keycode === 46 ||
											keycode === 8 ||
											keycode === 37 ||
											keycode === 39 ||
											(keycode >= 48 && keycode <= 57))
								)
							) {
								event.preventDefault();
							}
						}}>
							<PhoneCodeDropdown availableCountries={[{ code: phoneCode }]} currentPhoneCode={currentPhoneCode} onChange={(newPhoneCode: string) => setCurrentPhoneCode(newPhoneCode)} />
						</AddressTextField>
					</AddressInputField>
					<AddressInputField font={font} isError={!!errors.email} subText={(errors.email as string)} isFullWidth>
						<AddressTextField isRTL={isRTL} value={email} onChange={e => setEmail(e.target.value)} clearText={() => setEmail("")} onBlur={(e) => errorHandler("email", validateEmail, e.target.value)} placeholder={`${dataLocale.EMAIL_ADDRESS}*`}>
							<Email />
						</AddressTextField>
					</AddressInputField>
				</InputWrapper>
				<InputWrapper>
					<AddressInputField font={font} subText={(errors.addressLine1 as string) || "House / Flat Number"} isError={!!errors.addressLine1} isFullWidth>
						<AddressTextField isRTL={isRTL} value={addressLine1} onChange={e => setAddressLine1(e.target.value)} placeholder={`${dataLocale.ADDRESS}*`} clearText={() => setAddressLine1("")} onBlur={(e) => errorHandler("addressLine1", validateRequired, e.target.value)} />
					</AddressInputField>
					{/* <AddressInputField font={font} subText={(errors.addressLine2 as string) || "Area, Street & Landmark"} isError={!!errors.addressLine2}>
						<AddressTextField value={addressLine2} onChange={e => setAddressLine2(e.target.value)} placeholder={dataLocale.ADDRESS_LINE_2} clearText={() => setAddressLine2("")} onBlur={(e) => errorHandler("addressLine2", validateRequired, e.target.value)}/>
					</AddressInputField> */}
				</InputWrapper>
				<InputWrapper>
					{/* <AddressInputField font={font} subText={(errors.zipCode as string)} isError={!!errors.zipCode} isFullWidth>
						<AddressTextField isRTL={isRTL} value={zipCode} onChange={e => setZipCode(e.target.value)} placeholder={`${dataLocale.ZIP_CODE}*`} clearText={() => setZipCode("")} onBlur={(e) => onFetchPincode(e.target.value)} maxLength={6} onKeyPress={(event: any) => {
							const keycode = event.which;
							if (
								!(
									event.shiftKey === false &&
										(keycode === 46 ||
											keycode === 8 ||
											keycode === 37 ||
											keycode === 39 ||
											(keycode >= 48 && keycode <= 57))
								)
							) {
								event.preventDefault();
							}
						}} />
					</AddressInputField> */}
					<AddressInputField font={font} subText={(errors.cityDistrict as string)} isError={!!errors.cityDistrict} isFullWidth>
						<AddressTextField isRTL={isRTL} value={cityDistrict} onChange={e => setCityDistrict(e.target.value)} placeholder={`${dataLocale.CITY_DISTRICT}*`} onBlur={(e) => errorHandler("cityDistrict", validateRequired, e.target.value)} />
					</AddressInputField>
				</InputWrapper>
				<InputWrapper>
					<div style={{ width: "100%" }}>
						<AddressInputField font={font} subText={(errors.state as string)} isError={!!errors.state} isFullWidth>
							<AddressTextField isRTL={isRTL} value={state} onChange={e => setState(e.target.value)} placeholder={`${dataLocale.STATE_PROVINCE}*`} onBlur={(e) => errorHandler("state", validateRequired, e.target.value)} />
						</AddressInputField>
						{/* <AdvancedDropdown
							id="state-options"
							value={state}
							// componentSize={ComponentSizeENUM.large}
							font={font}
							fullWidth={true}
							// options={stateList.options.map(op => ({ key: op, value: op }))}
							// dataLocale={dataLocale}
							// handleChange={e => setState(e.target.value)}
							onBlur={(val: string) => errorHandler("state", validateRequired, val)}
							placeholder="Select state"
							selectedValue={state}
							mainFontColor="#000"
							mainBackgroundColor="#fff"
							inputLabel="State*"
							values={stateList.options.map(data => ({
								display: data,
								value: data.toUpperCase(),
								onChange: (e: any) => {
									setState(e.target.value);
								},
							}))}
							// menuItemStyles=""
							// styles=""
							// className = ""
							disabled={false}
							isRTL={isRTL}
						// styles={{ fontSize: '16px', width: '100%' }}
						/> */}
					</div>
					<div style={{ width: "100%" }}>
						<AdvancedDropdown
							id="country-options"
							value={country}
							// componentSize={ComponentSizeENUM.large}
							font={font}
							fullWidth={true}
							// options={countryList.options.map(op => ({ key: op.country_name, value: op.country_code }))}
							// dataLocale={dataLocale}
							// handleChange={e => setCountry(e.target.value)}
							onBlur={(val: string) => errorHandler("country", validateRequired, val)}
							placeholder={`${dataLocale.SELECT_COUNTRY}`}
							selectedValue={country}
							mainFontColor="#000"
							mainBackgroundColor="#fff"
							inputLabel={`${dataLocale.COUNTRY}*`}
							values={countryList.options.map(data => ({
								display: data.country_name,
								value: data.country_code,
								onChange: (e: any) => {
									onChangeCountry(
										e.target.value,
										false,
										state
									);
								},
							}))}
							disabled={false}
							isRTL={isRTL}
						/>
					</div>
					{/* <Dropdown
						id="state-options"
						value={state}
						componentSize={ComponentSizeENUM.large}
						font={font}
						options={stateList.options.map(op => ({ key: op, value: op }))}
						dataLocale={dataLocale}
						handleChange={e => setState(e.target.value)}
						isRTL={isRTL}
					/>
					<Dropdown
						id="country-options"
						value={country}
						componentSize={ComponentSizeENUM.large}
						font={font}
						options={countryList.options.map(op => ({ key: op.country_name, value: op.country_code }))}
						dataLocale={dataLocale}
						handleChange={e => setCountry(e.target.value)}
						isRTL={isRTL}
					/> */}
				</InputWrapper>
				<AddressInputField font={font} isFullWidth line={2} label={`${dataLocale.DIRECTIONS_TO_REACH}`} subText={(errors.landmark as string)} isError={!!errors.landmark}>
					<LandmarkTextarea value={landmark} onChange={e => setLandmark(e.target.value)} placeholder={`${dataLocale.APARTMENT_ON_SIDE_OF_LIFT}`} font={font} />
				</AddressInputField>
				<div style={{ display: "flex",flexDirection: "column" }}>
					<AddressLabel>Save as*</AddressLabel>
					<div>
						<AddressSwatch value={addressLabelTag} options={swatchOptions} onChange={(text) => onAddressLabelChange(text)} font={font} />
						{addressLabelTag === addressLabelENUM.OTHER && <AddressInputField font={font} subText={(errors.addressLabel as string)} isError={!!errors.addressLabel}>
							<AddressTextField isRTL={isRTL} value={addressLabel} onChange={e => setAddressLabel(e.target.value)} placeholder={dataLocale.ADDRESS_HEADING} clearText={() => setAddressLabel("")} onBlur={(e) => errorHandler("addressLabel", validateRequired, e.target.value)} />
						</AddressInputField>}
					</div>
					{addressLabelTag === addressLabelENUM.OTHER ? null : <SubText isError={!!errors.addressLabel}>{errors.addressLabel}</SubText>}
				</div>
				<InvisibleButton btnVisible={btnVisible} type="submit" disabled={!!errors.isError} ref={submitRef}>Add</InvisibleButton>
			</Form>
		</ReviewFormWrapper>
	);
};

export { AddAddressFormSa };
