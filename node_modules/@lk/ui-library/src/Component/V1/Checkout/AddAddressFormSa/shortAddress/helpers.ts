const useShortAddress = () => {

	// const [firstName, setFirstName] = useState(initialAddressData?.firstName || "");
	// const [lastName, setLastName] = useState(initialAddressData?.lastName || "");
	// const [mobile, setMobile] = useState(initialAddressData?.phone || guestNumber || "");
	// const [email, setEmail] = useState(initialAddressData?.email || guestEmail || "");
	// const [addressLine1, setAddressLine1] = useState(initialAddressData?.addressline1 || "");
	// const addressLine2 = initialAddressData?.addressline2 || "";
	// const [zipCode, setZipCode] = useState(initialAddressData?.postcode || "");
	// const [addressLabel, setAddressLabel] = useState(initialAddressData?.addressLabel || "");
	// const [addressLabelTag, setAddressLabelTag] = useState(initialAddressData?.addressLabel === addressLabelENUM.HOME ? addressLabelENUM.HOME : (initialAddressData?.addressLabel === addressLabelENUM.WORK ? addressLabelENUM.WORK : (initialAddressData?.addressLabel ? addressLabelENUM.OTHER : "")));
	// const [landmark, setLandmark] = useState(initialAddressData?.landmark || "");
	// const [cityDistrict, setCityDistrict] = useState(initialAddressData?.city || "");
	// const [country, setCountry] = useState(initialAddressData?.country || "");
	// const [state, setState] = useState(initialAddressData?.state || "");
	// const [currentPhoneCode, setCurrentPhoneCode] = useState(initialAddressData?.phoneCode || "");
	// const [gender, setGender] = useState(initialAddressData?.gender || "male");

	// const [errors, setErrors] = useState<{[name: string]: string | boolean}>({
	// 	// isError: false,
	// 	firstName: "", //
	// 	lastName: "",
	// 	mobile: "", // +ph
	// 	email: "", // +em
	// 	addressLine1: "", //
	// 	addressLine2: "",
	// 	zipCode: "", // +pin
	// 	addressLabel: "", //
	// 	landmark: "",
	// 	cityDistrict: "", // +should be valid as per pincode api
	// 	country: "", // +should be valid as per pincode api
	// 	state: "", // +should be valid as per pincode api
	// 	currentPhoneCode: "", //
	// 	gender: ""
	// });

	// // const [swatchValue, setSwatchValue] = useState("Home");
	// const submitForm = (e: React.FormEvent<HTMLFormElement>) => {
	// 	e.preventDefault();
	// 	console.log("Submitting.....");
	// 	// addressStepX 1
	// 	if(validateAll()) onSubmit(initialAddressData && initialAddressData.id ? SubmitType.edit : SubmitType.add, initialAddressData && initialAddressData.id ? initialAddressData.id : null, initialAddressData && initialAddressData.id ? { firstName: firstName, lastName: lastName, phone: mobile, email: email, addressline1: addressLine1, addressline2: addressLine2, postcode: zipCode || "000000", city: cityDistrict, state: state, country: country, id: initialAddressData.id, addressLabel, landmark, phoneCode, gender } : { firstName: firstName, lastName: lastName, phone: mobile, email: email, addressline1: addressLine1, addressline2: addressLine2, postcode: zipCode, city: cityDistrict, state: state, country: country, addressLabel, landmark, phoneCode, gender });
	// };

	// function onChangeCountry(country: string, cartCall = true, prevCountry: string) {
	// 	if (country && country !== prevCountry) {
	// 		if (country === "SG") {
	// 			setCountry(country);
	// 			setCityDistrict("Singapore");
	// 			setState("Singapore");
	// 		}
	// 		else {
	// 			setCountry(country);
	// 			setCityDistrict("");
	// 			setState("");
	// 		}
	// 		if (country === "IN") {
	// 			// getPincodeData(zipCode)
	// 			// 	.then(data => console.log(data))
	// 			// 	.catch(err => console.log(err));
	// 		}
	// 		if (cartCall && !isReturnExchange) {
	// 			// countryShippingCheck(country);
	// 		}
	// 	}
	// }

	// function onFetchPincode(pin?: string){
	// 	errorHandler("zipCode", validateRequired, pin || zipCode);
	// 	if(!errors.zipCode && (pin || zipCode)) getPincodeData(pin || zipCode)
	// 		.then(data => {
	// 			console.log(data, "data");
	// 			if(data?.isError) {
	// 				setErrors(err => ({ ...err, zipCode: data.message }));
	// 			}
	// 			else if(data?.canDeliver) {
	// 				setCountry(data.country);
	// 				setCityDistrict(data.city);
	// 				setState(data.state);
	// 			}
	// 		})
	// 		.catch(err => {
	// 			console.log(err, "Error");
	// 		});
	// }
	// const swatchOptions = [{ icon: <SvgHome/>, text: addressLabelENUM.HOME }, { icon: <SvgWork/>, text: addressLabelENUM.WORK }, { icon:
	// 	<SvgOther/>, text: addressLabelENUM.OTHER }];

	// function onAddressLabelChange(label: string) {
	// 	if(addressLabelTag === label) {
	// 		//
	// 	} else if(label === addressLabelENUM.OTHER) {
	// 		setAddressLabel("");
	// 		setAddressLabelTag(label);
	// 	} else {
	// 		setAddressLabel(label);
	// 		setAddressLabelTag(label);
	// 	}
	// }

	// const [fieldSwitch, setFieldSwitch] = useState(false);
	// function errorHandler(key: string, cb: (val: any) => string | boolean, val: any) {
	// 	setFieldSwitch(f => !f);
	// 	const error = cb(val);
	// 	const newErrors = { ...errors };
	// 	newErrors[key] = error;
	// 	console.log(newErrors, "newErrors");
	// 	setErrors(newErrors);
	// 	return !!error;
	// }

	// useEffect(() => {
	// 	if(disableAction && typeof disableAction === "function") disableAction(!!errors.isError);
	// 	console.log(errors);
	// }, [errors.isError, disableAction, fieldSwitch]);

	// useEffect(() => {
	// 	if(zipCode.length === 6) onFetchPincode(zipCode);
	// }, [zipCode]);

	// function validateAll() {
	// 	let isError = false;
	// 	isError = isError || errorHandler("firstName", isName, firstName);
	// 	isError = isError || errorHandler("lastName", isName, lastName);
	// 	isError = isError || errorHandler("mobile", validateNumber, mobile);
	// 	isError = isError || errorHandler("email", validateEmail, email);
	// 	isError = isError || errorHandler("addressLine1", validateRequired, addressLine1);
	// 	isError = isError || errorHandler("cityDistrict", validateRequired, cityDistrict);
	// 	isError = isError || errorHandler("state", validateRequired, state);
	// 	isError = isError || errorHandler("country", validateRequired, country);
	// 	isError = isError || errorHandler("zipCode", validateRequired, zipCode);
	// 	return !isError;
	// }
	return null;
};

export default useShortAddress;
