import React, { MouseEvent, useEffect, useRef, useState } from "react";
import { Heart, HeartFilled } from "../../../Icons";
import { ComponentSizeENUM, DeviceTypes, ThemeENUM, TypographyENUM } from "../../../Types/general";
import Pricing from "../../Common/Price/Price.component";
import { RatingStar } from "../../Common/RatingStar/RatingStar.component";
import Swatch from "../../Common/Swatch/Swatch.component";
import { ProductCardTypes } from "./ProductCardNew.types";
import { ProductContainer, ProductImage, ImageLoaderComponent, ProductTitle, ProductSize, ProductSizeContainer, WishlistContainer, ProductDetailsContainer, ImageContainer, ColorOptionsContainer, OfferContainer, ProductUsage, RatingStarContainer, AnchorCount, HeartIconWrapper, OfferContainerOuter, AnchorWrapper, Button } from "./styles";

const ProductCardNew = (
	{
		productData,
		dataLocale,
		offerText,
		isDitto,
		isExchangeFlow,
		triggerWishlist,
		wishlistPIDs,
		cygnus,
		isRTL = false,
		width,
		isGridView = false,
		device,
		isAlgoliaSearch = false,
		router,
		isSearch = false,
		// subdirectoryPath
		onClick,
		subdirectoryPath,
		triggerCtaGA,
		showTax = false,
		similarProducts
	}: ProductCardTypes
) => {
	const [imageURL, setImageURL] = React.useState<string | undefined>(productData.productImage.url);
	const [over, setOver] = useState(false);
	const [isCygnus, setIsCygnus] = useState(false);

	// console.log(isCygnus,productData.id, 'isCygnus sssss')
	const [productUrlMobile, setproductUrlMobile] = useState(productData.productURL);
	// console.log(imageURL, productData.id, !!(productData.isDitto && isDitto && cygnus), cygnus);
	useEffect(() => {
		if (productData?.productImage?.url) {
			setImageURL(productData.productImage.url);
			setproductUrlMobile(productData.productURL);
		}
	}, [productData?.productImage?.url]);

	// eslint-disable-next-line @typescript-eslint/no-unused-vars
	const [_isDittoImageLoaded, setisDittoImageLoaded] = useState((cygnus && isDitto) || (cygnus === "" && isDitto));
	useEffect(() => {
		if (!isDitto && productData.productImage.frontURL !== "") {
			if (over) {
				setImageURL(productData.productImage.frontURL);
				setIsCygnus(false);
			}
			else {
				setImageURL(productData.productImage.url);
				setImageURL(productData.isDitto && isDitto && cygnus ? cygnus : productData.productImage.url);
				setIsCygnus(false);
			}
		}
		// if(productData.isDitto && isDitto && cygnus){
		// 	setImageURL(cygnus || productData.productImage.url);
		// 	setisDittoImageLoaded(true);
		// }
	}, [over, isDitto, cygnus]);

	const [isWishListSelected, setIsWishListSelected] = useState<boolean>(wishlistPIDs && wishlistPIDs.includes(`${productData.id}`) || false);
	useEffect(() => {
		const whishListStatus: boolean = wishlistPIDs && wishlistPIDs.includes(`${productData.id}`) || false;
		setIsWishListSelected(whishListStatus);
	}, [wishlistPIDs]);

	useEffect(() => {
		if (cygnus && isDitto) {
			if (cygnus !== imageURL) {
				setImageURL(cygnus);
				setIsCygnus(true);
			}
			setisDittoImageLoaded(true);
		} else if (cygnus === "" && isDitto) {
			if (productData.productImage.url !== imageURL) {
				setImageURL(productData.productImage.url);
				setIsCygnus(false);
			}
			setisDittoImageLoaded(true);
		}
		else {
			if (productData.productImage.url !== imageURL) {
				setImageURL(productData.productImage.url);
				setIsCygnus(false);
			}
		}

	}, [isDitto, cygnus]);

	function updateImageURL(newURL?: string) {
		setImageURL(newURL);
		setIsCygnus(false);
	}

	// useEffect(() => {
	// 	const timeout = setTimeout(() => {
	// 		setImageLoaded(true);
	// 	}, 3000);
	// 	return ()=>{
	// 		clearTimeout(timeout);
	// 	};
	// }, []);
	
	const imageLoaded = (true);
	const imgRef = useRef<HTMLImageElement>(null);
	
	return (
		<ProductContainer width={width} isGridView={isGridView} onClick={onClick} >
			<AnchorWrapper href = {productData.productURL} onClick={(e: MouseEvent<HTMLAnchorElement>) => {
				e.stopPropagation();
				e.preventDefault();
				onClick && onClick();
				if (device !== DeviceTypes.MOBILE) {
					window.open(productData.productURL, "_blank");
				} else {
					router.push(`${productUrlMobile.replace(subdirectoryPath, "")}${isSearch?"?search=true":""}`);
				}
			}}>
				{device !== DeviceTypes.MOBILE && <WishlistContainer isGridView={isGridView} isDitto={isDitto} isCygnus={isCygnus} mobile={false}>
					{isWishListSelected ? <HeartFilled fill="red" onClick={(e) => {
						e.stopPropagation();
						e.preventDefault();
						triggerWishlist(productData, isWishListSelected);
					}} width="1.8em" height="1.8em" />
						: <Heart onClick={(e) => {
							e.preventDefault();
							e.stopPropagation();
							triggerWishlist(productData, isWishListSelected);
						}} width="1.8em" height="1.8em" className="wishlist-icon" />}
				</WishlistContainer>}
				{device === DeviceTypes.MOBILE && <WishlistContainer isGridView={isGridView} isDitto={isDitto} isCygnus={isCygnus} mobile><HeartIconWrapper isGridView={isGridView}>{isWishListSelected ? <HeartFilled fill="red" onClick={(e) => {
					e.preventDefault();
					e.stopPropagation();
					triggerWishlist(productData, isWishListSelected);
				}} width="1.8em" height="1.8em" className="wishlist-icon" />
					: <Heart onClick={(e) => {
						e.preventDefault();
						e.stopPropagation();
						triggerWishlist(productData, isWishListSelected);
					}} width="1.8em" height="1.8em" className="wishlist-icon" />}</HeartIconWrapper></WishlistContainer>}

				{/* {device !== DeviceTypes.MOBILE && <WishlistContainer mobile={false}>
				{isWishListSelected ? <HeartFilled fill="red" onClick={() => triggerWishlist(productData, isWishListSelected)} width="1.8em" height="1.8em" />
					: <Heart onClick={() => triggerWishlist(productData, isWishListSelected)} width="1.8em" height="1.8em" className="wishlist-icon" />}
			</WishlistContainer>} */}
				{/* {device === DeviceTypes.MOBILE && <WishlistContainer mobile><HeartIconWrapper isGridView={isGridView}>
				{isWishListSelected ? <HeartFilled fill="red" onClick={() => triggerWishlist(productData, isWishListSelected)} width="1.8em" height="1.8em" className="wishlist-icon" />
					: <Heart onClick={() => triggerWishlist(productData, isWishListSelected)} width="1.8em" height="1.8em" className="wishlist-icon" />}</HeartIconWrapper>
			</WishlistContainer>} */}

				{/* <AnchorWrapper href={`${productData.productURL}`} target={device !== DeviceTypes.MOBILE ? "_blank" : "_self"}> */}
				{/* @TODO onLoadCapture={() => setImageLoaded(false)} onLoad={() => setImageLoaded(true)}  */}
				<ImageContainer isCygnus={isCygnus} isGridView={isGridView} isDitto={isDitto && _isDittoImageLoaded} url={imageURL} >
					<ProductImage ref={imgRef} width={width} isCygnus={isCygnus} isGridView={isGridView} isMobile={device === DeviceTypes.MOBILE} isDitto={isDitto} loading="eager" src={!_isDittoImageLoaded && isDitto ? "//static.lenskart.com/media/desktop/img/loader-lk.gif" : imageURL} onMouseOver={() => setOver(true)} onMouseLeave={() => setOver(false)} />
					{!imageLoaded ? <ImageLoaderComponent>
						<ProductImage width={width} isCygnus={isCygnus} isDitto={isDitto} isGridView={isGridView} isMobile={device === DeviceTypes.MOBILE} loading="eager" src="//static.lenskart.com/media/desktop/img/loader-lk.gif" />
					</ImageLoaderComponent> : null}
				</ImageContainer>
				<ProductDetailsContainer isDitto={isDitto} isRTL={isRTL}>
					<RatingStarContainer visible={productData.showProductRating} isRTL={isRTL}> 
						<RatingStar isRTL={isRTL} backgroundColor="var(--warm-grey-25)" numberOfRatings={Number(productData.totalNoOfRatings)} primaryTextColor="var(--dark-blue-100)" starColor="var(--turquoise)" secondaryTextColor="var(--dark-blue-75)" componentSize={ComponentSizeENUM.small} rating={productData.productRating} id="product-rating" font={TypographyENUM.serif} /> 
						{productData?.relatedItems && productData.relatedItems?.length > 0 && device === DeviceTypes.DESKTOP && <Button onClick={(e) => {
							e.preventDefault();
							e.stopPropagation();
							similarProducts(productData?.relatedItems);
						}}>
							<span>
								<img src="https://static1.lenskart.com/media/desktop/img/DesignStudioIcons/ViewSimilarIcon.svg" alt="ViewSimilarIcon"/>
							</span>
							<span>{dataLocale.VIEW_SIMILAR}</span>
						</Button>}
					</RatingStarContainer>
					{/* <ProductTitle showTitle={productData.showTitle} isRTL={isRTL}>{productData.productName}</ProductTitle> */}
					<ProductTitle isGridView={isGridView} showTitle={true} isRTL={isRTL}>{productData.productName.slice(0, 38)}{productData.productName.slice(0, 38).length !== productData.productName.length && "..."}</ProductTitle>

					<ProductSizeContainer isRTL={isRTL} isGridView={isGridView}>
						{productData.size && <ProductSize isGridView={isGridView}>{dataLocale.SIZE}: {productData.size} • {productData.tags}</ProductSize>}
						{/* {productData.size && isRTL && <ProductSize>{productData.tags} • {productData.size} :{dataLocale.SIZE}</ProductSize>} */}
						{productData.specifications && productData.specifications.length > 0 && !isRTL && <ProductUsage isGridView={isGridView}>{dataLocale.USAGE}: {productData?.specifications?.[0]?.items[1]?.value} . {productData?.specifications?.[0]?.items[0]?.value}</ProductUsage>}
						{!isAlgoliaSearch && !isGridView && <ColorOptionsContainer isDitto={isDitto} isRTL={isRTL}>
							{isRTL && productData.isColorOptionExtra && <AnchorCount onClick={(e) => e?.preventDefault()} href={device === DeviceTypes.DESKTOP ? productData.productURL : ""}>+{productData.colorOptionExtraCount}</AnchorCount>}
							<Swatch id="product-swatch-plp"
								colors={productData.colorOptions.slice(0, 4)}
								updateImageURL={updateImageURL}
								hoverRotate={false}
								selectedIndexColor="var(--black)"
								componentSize={ComponentSizeENUM.medium}
								productImageURL={productData.productImage.url}
								isRTL={isRTL}
								device={device}
								setproductUrlMobile={setproductUrlMobile}
								triggerCTAGA={() => triggerCtaGA("color-options", "product-listing-page")}
							/>
							{!isRTL && productData.isColorOptionExtra && <AnchorCount onClick={(e) => e?.preventDefault()} href={productData.productURL}>+{productData.colorOptionExtraCount}</AnchorCount>}
						</ColorOptionsContainer>}
					</ProductSizeContainer>
					<Pricing id="price"
						isDiscountPriceBigger={false}
						actualPrice={productData.price.basePrice}
						finalPrice={productData.price?.lkPrice}
						hasSpecialPrice={productData.price?.lkPrice < productData.price.basePrice ? true : false}
						componentSize={ComponentSizeENUM.small}
						font={TypographyENUM.lkSansBold}
						strikeThroughColor="var(--dark-blue-10)"
						actualPriceColor="var(--dark-blue-10)"
						finalPriceColor="var(--dark-blue-100)"
						styleTheme={ThemeENUM.primary}
						currencyCode={productData.price.symbol}
						isRTL={isRTL}
						isMobileView={device === DeviceTypes.MOBILE}
						taxFontSize={"14px"}
						isGridView={isGridView} dataLocale={dataLocale} showTax={showTax} ></Pricing>
					{isExchangeFlow && <div>EXCHANGE PRICE</div>}
					{device !== DeviceTypes.MOBILE && offerText?.length > 0 && <OfferContainer offerText={offerText} isGridView={isGridView} isRTL={isRTL}>
						{offerText}
					</OfferContainer>}

					{device === DeviceTypes.MOBILE && offerText?.length > 0 && <OfferContainerOuter><OfferContainer offerText={offerText} isGridView={isGridView} isRTL={isRTL}>
						{offerText}
					</OfferContainer></OfferContainerOuter>}
				</ProductDetailsContainer>
			</AnchorWrapper>
		</ProductContainer>
	);
};

export default ProductCardNew;
