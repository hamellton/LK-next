import React, { useEffect, useState } from "react";
import ReactDOM from "react-dom";
import SideModal from "../../Common/SideModal/SideModal";
import { PackageScreenType } from "../PackagesScreen/PackagesScreen.types";
import { PackageScreenNewContainer } from "./PackageScreenNew.styles";
const PackageScreenNew = ({
	sequences,
	onClosePackages,
	isVisible,
	children,
	backButton,
	isRTL=false,
	selectedPackage,
	currentActiveStepType,
	localeData
} : PackageScreenType) => {
	const [activePackage, setActivePackage] = useState(0);

	useEffect(() => {
		// Logic to prevent background scroll when package screen is open.
		if (typeof window !== "undefined") {
			if (isVisible) document.body.style.overflow = "hidden";
			else document.body.style.overflow = "auto";
		}
		return () => {
			if(typeof window !== "undefined") document.body.style.overflow = "auto";
		};
	}, [isVisible]);

	useEffect(() => {
		sequences.forEach((seq, index) => {
			if(seq.isActive){
				setActivePackage(index);
			}
		});
	}, [sequences]);

	const handleBackButton = () => {
		if(activePackage > 0){
			if(selectedPackage !== "" && activePackage === 1) {
				return backButton(activePackage);
			}
			return backButton(activePackage - 1);
		}
		return onClosePackages(0);
	};

	const getHeading = () => {
		if(currentActiveStepType === "power"){
			return localeData.SELECT_LENS_TYPE;
		}else if (currentActiveStepType === "packages"){
			if(selectedPackage === ""){
				return localeData.CHOOSE_LENS_PACKAGE;
			}else{
				return localeData.CHOOSE_COATING;
			}
		}else if (currentActiveStepType === "eyeSight"){
			return localeData.EYE_POWER;
		}
	};

	if(isVisible) {
		return ReactDOM.createPortal((
			<PackageScreenNewContainer>
				<SideModal backButton={() => handleBackButton()} onClose={onClosePackages} centerHeading={false} title={getHeading()} isVisible={isVisible} isRTL={isRTL}>
					{children}
				</SideModal>
			</PackageScreenNewContainer>
		), document.getElementById("modal-portal") as HTMLElement);
	} else {
		return null;
	}
};

export default PackageScreenNew;
