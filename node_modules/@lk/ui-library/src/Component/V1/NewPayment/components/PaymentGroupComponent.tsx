import React from "react";
import { Cards, PayLater, StoreCredit, UPI } from "../../CheckoutMobile/CheckoutMobileIndex";
import COD from "../../CheckoutMobile/COD/COD.component";
import { Grabpay } from "../../CheckoutMobile/Grabpay/Grabpay.component";
import CommonSection from "../../CheckoutMobile/MorePaymentOptions/Common/CommonSection.component";
import MorePaymentOptions from "../../CheckoutMobile/MorePaymentOptions/MorePaymentOptions.component";
import { RecommendedContainer } from "./PaymentGroupComponent.styles";

const PaymentGroupComponent = ({
	groupData,
	savedCards,
	localeData,
	getSubmitFunction,
	savedCardsHandler,
	removeStoreCredit,
	captchaValue,
	captchaImageUrl,
	loadCaptcha,
	appliedSc,
	paymentData,
	localeInfo,
	router,
	configData,
	resetVpaStatus,
	getUpiTransactionStatus,
	upiTransactionStatus,
	selectedPaymentMethod,
	setSelectedPaymentMethod,
	renderPrimerUI,
	primerToken,
	isContactLensConsentEnabled,
	payLaterAllowed,
	isPrimerActive,
	isContactLensCheckboxChecked,
	setIsContactLensCheckboxChecked,
	setPayLaterSelected,
	payLaterBottomsheetHandler,
	orderCreatedSuccess,
	setRedirect,
	currencyCode,
	totalAmount,
	setSectedPrimerCreditCard,
	showPrimerCardBottomSheet,
	userInfo,
	abandonedLeadsFunction,
	openPaymentHandler
}: any) => {
	switch (groupData.groupId){
	case "Recommended":
		return <RecommendedContainer>
			{
				groupData.methods.map((methodData: any, idx: number) => {
					switch (methodData.key){
					case "cod": 
						return <COD
							key={idx}
							onSubmit={() =>
								getSubmitFunction(methodData.key)(methodData.code)
							}
							isCaptchaEnabled={!!methodData?.showCaptcha}
							captchaImageUrl={captchaImageUrl}
							captchaValue={captchaValue}
							loadCaptcha={loadCaptcha}
							label={methodData?.label}
							img={methodData?.logoImageUrl}
							dataLocale={localeData}
							borderVisible={false}
							abandonedLeadsFunction={() => abandonedLeadsFunction(methodData.key)}
						/>;
					case "phonepeswitch_payu":
					case "upi_payu":
						return null;
					case "cc":
					case "PAYMENT_CARD":
						return <Cards
							key={idx}
							savedCards={[]}
							dataLocale={localeData}
							methodData={groupData.methods[0]}
							savedCardsHandler={savedCardsHandler}
							getSubmitFunction={getSubmitFunction}
							borderVisible={false}
							setSelectedPaymentMethod={setSelectedPaymentMethod}
							selectedPaymentMethod={selectedPaymentMethod}
							renderPrimerUI={renderPrimerUI}
							primerToken={primerToken}
							isContactLensConsentEnabled={isContactLensConsentEnabled}
							payLaterAllowed={payLaterAllowed}
							isPrimerActive={isPrimerActive}
							isContactLensCheckboxChecked={isContactLensCheckboxChecked}
							setIsContactLensCheckboxChecked={setIsContactLensCheckboxChecked}
							currencyCode={currencyCode}
							totalAmount={totalAmount}
							setSectedPrimerCreditCard={setSectedPrimerCreditCard}
							showPrimerCardBottomSheet={showPrimerCardBottomSheet}
							configData={configData}
							abandonedLeadsFunction={() => abandonedLeadsFunction(methodData.key)}
						/>;
					default:
						return (
							<CommonSection
								key={idx}
								src={methodData.logoImageUrl}
								name={methodData.label}
								content={""}
								getSubmitFunction={getSubmitFunction}
								methodData={methodData}
							/>
						);
					}
				})}</RecommendedContainer>;
	case "cod":
		return groupData.methods.map(
			(methodData: any, idx: number) => (
				<COD
					key={idx}
					onSubmit={() => getSubmitFunction(methodData.key)(methodData.code)}
					isCaptchaEnabled={!!methodData?.showCaptcha}
					captchaImageUrl={captchaImageUrl}
					captchaValue={captchaValue}
					loadCaptcha={loadCaptcha}
					label={methodData?.label}
					img={methodData?.logoImageUrl}
					dataLocale={localeData}
					borderVisible={true} 
					abandonedLeadsFunction={() => abandonedLeadsFunction(methodData.key)}
				/>					
			)
		);
	case "cc":
	case "payment_card":
		return <Cards
			savedCards={savedCards || []}
			dataLocale={localeData}
			methodData={groupData.methods[0]}
			savedCardsHandler={savedCardsHandler}
			getSubmitFunction={getSubmitFunction}
			borderVisible={true}
			setSelectedPaymentMethod={setSelectedPaymentMethod}
			selectedPaymentMethod={selectedPaymentMethod}
			renderPrimerUI={renderPrimerUI}
			primerToken={primerToken}
			isContactLensConsentEnabled={isContactLensConsentEnabled}
			payLaterAllowed={payLaterAllowed}
			isPrimerActive={isPrimerActive}
			isContactLensCheckboxChecked={isContactLensCheckboxChecked}
			setIsContactLensCheckboxChecked={setIsContactLensCheckboxChecked}
			currencyCode={currencyCode}
			totalAmount={totalAmount}
			setSectedPrimerCreditCard={setSectedPrimerCreditCard}
			showPrimerCardBottomSheet={showPrimerCardBottomSheet}
			configData={configData}
			abandonedLeadsFunction={() => abandonedLeadsFunction(groupData.groupId)}
		/>;
	case "nb":
		return <MorePaymentOptions
			methodData={groupData.methods[0]}
			getSubmitFunction={getSubmitFunction}
			allBanks={groupData.methods[0].banks}
			popularBanks={groupData.methods[0].banks.slice(0, 5)}
			dataLocale={localeData}
			abandonedLeadsFunction={() => abandonedLeadsFunction(groupData.groupId)}
		/>;
	case "sc":
		return groupData.methods.map(
			(methodData: any, idx: number) => (
				<StoreCredit
					key={idx}
					dataLocale={localeData}
					onSubmit={getSubmitFunction(methodData.key)}
					appliedCredits={appliedSc}
					removeStoreCredit={removeStoreCredit}
					totalAmount={totalAmount}
					abandonedLeadsFunction={() => abandonedLeadsFunction(methodData.key)}
				/>
			)
		);
	case "upi_payu":
		return <UPI
			dataLocale={localeData}
			errorMessage="This UPI ID doesn't exist, please try again"
			groups={groupData.methods} hasError={false}
			getSubmitFunction={getSubmitFunction}
			paymentData={paymentData}
			localeInfo={localeInfo}
			router={router}
			configData={configData}
			resetVpaStatus={resetVpaStatus}
			getUpiTransactionStatus={getUpiTransactionStatus}
			upiTransactionStatus={upiTransactionStatus}
			userInfo={userInfo}
			abandonedLeadsFunction={() => abandonedLeadsFunction(groupData.groupId)}
		/>;
	case "juspay grabpay":
		return <Grabpay
			groupData={groupData}
			isSelected={selectedPaymentMethod}
			setPayLaterSelected={setPayLaterSelected}
			onClick={(key: string) => {
				setSelectedPaymentMethod(key);
				openPaymentHandler(groupData.groupId, key);
			}}
			isContactLensConsentEnabled={isContactLensConsentEnabled}
			setSectedPrimerCreditCard={setSectedPrimerCreditCard}
		/>;
	case "primer atome":
	case "atome": 
		return <PayLater
			localeData={localeData}
			groupData={groupData}
			isSelected={selectedPaymentMethod}
			setPayLaterSelected={setPayLaterSelected}
			onClick={(key: string) => {
				setSelectedPaymentMethod(key);
			}}

			renderPrimerUI={renderPrimerUI}
			isContactLensConsentEnabled={isContactLensConsentEnabled}
			payLaterBottomsheetHandler={payLaterBottomsheetHandler}
			orderCreatedSuccess={orderCreatedSuccess}
			setRedirect={setRedirect}
			currencyCode={currencyCode}
			totalAmount={totalAmount}
			setSectedPrimerCreditCard={setSectedPrimerCreditCard}
		/>;
	default:
		return groupData.methods.map(
			(methodData: any, idx: number) => (
				<CommonSection
					key={idx}
					src={methodData.logoImageUrl}
					name={methodData.label}
					content={""}
					borderVisible={true}
					getSubmitFunction={getSubmitFunction}
					methodData={methodData}
				/>
			)
		);
	}
};

export { PaymentGroupComponent };
