import React, { Fragment, useState } from "react";
import styled from "styled-components";
// import * as Auth from "../../Auth";
import { DeviceTypes, TypographyENUM } from "../../../../Types/general";
import { Radio } from "./Radio";
import { CardImage } from "./CardImage";
import BankCardForm from "./subcomponents/BankCardForm";
// import StoreCreditForm from "./subcomponents/StoreCreditForm";
import { SelectField } from "./subcomponents/SelectField";
import SavedCardForm from "./subcomponents/SavedCardForm";
import UPIForm from "./subcomponents/UPIForm";
import NetBanking from "./subcomponents/NetBanking";
import CashOnDelivery from "./subcomponents/CashOnDelivery";
import { QRCodeForm } from "./subcomponents/QRCodeForm";
// import { NetBanking } from "../../OldPayment/NetBanking";
import PrimerCard from "../../PrimerCard";
import ContactLensConsentCheckbox from "../ContactLensConsentCheckbox";
import { PayLater } from "./subcomponents/PayLater";
import { DataType } from "../../Header/Header.types";
import { CardDataType, CardTypeENUM, CardWalletDataType, CashOnDeliveryType, SavedCardDataType } from "../NewPayment.types";
import PopupModalDesktop from "../../../Common/DesktopPopUp";
import { ButtonWrapper } from "../NewPayment.styles";
import { OfferText } from "../../CheckoutMobile/Atome/PayLater.styles";

const CardContainer = styled.div<{
  bankoffer?: boolean;
  dottedBtmBorder?: boolean;
  dottedTopBorder?: boolean;
  isOpen?: boolean;
  disabled?: boolean;
	aeDesigns?: boolean
}>`
    display: flex;
    align-items: ${(props) =>
		props.bankoffer || props.isOpen ? "flex-start" : "center"};
    justify-content: space-between;
    padding: 16px;
    flex-direction: ${(props) =>
		props.bankoffer || props.isOpen ? "column" : "row"};
    gap: 16px;
    box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.1);
    border-radius: 12px;
    border-top-left-radius: 12px;
    border-top-right-radius: 12px;
    border-bottom-right-radius: 12px;
    border-bottom-left-radius: 12px;
	background: ${(props) =>
		props.isOpen ? "#fff" : props.disabled ? "#D3D3D3" : "var(--white)"};
    ${(props) =>
		props.dottedTopBorder
			? `
      border-top: 1px dashed #d3d3d3;
      border-top-left-radius: 0;
      border-top-right-radius: 0;
    `
			: ""}
    ${(props) =>
		props.dottedBtmBorder
			? `
      border-bottom: 1px dashed #d3d3d3;
      border-bottom-right-radius: 0;
      border-bottom-left-radius: 0;
    `
			: ""}
			&.payLaterCard{
				border-bottom:none;
				padding-bottom:22px;
				border-bottom-right-radius: 0px;
				border-bottom-left-radius: 0px;
				display:block;
			}
			&.payLaterCard+.payLaterCard{
				border-bottom-right-radius: 12px;
				border-bottom-left-radius: 12px;
				margin-top: -7px;
				padding-bottom: 16px;
				position:relative;
				&:before{
					content: "";
					position: absolute;
					left: 0;
					right: 0px;
					bottom: 100%;
					background: #fff;
					height: 8px;
					margin-bottom: 1px;
				}
			}

			${props => props.aeDesigns && props.isOpen ? "background-color: #F5F5FF;" : ""}
`;
const PayLaterButtonWrapper = styled.div<{ disabled?: boolean }>`
	display: flex;
	justify-content: right;
	flex-direction:column;
	button{
		margin-top:0px;
	}
`;
const PayLaterInnerButton = styled.div<{ disabled?: boolean }>`
	display: flex;
	justify-content: right;
	gap: 15px;
	button{
		margin-top:0px;
	}
`;

const Flex = styled.div<{ disabled?: boolean }>`
  display: flex;
  align-items: center;
  margin: -16px;
  padding: 16px;
  width: 100%;
  height: 100%;
  span {
	div{
		margin-right:0px;
	}
  }
  :hover {
	cursor: ${(props) => (props.disabled ? "not-allowed" : "pointer")};
  }
`;
// const LeftSection = styled.div`
//     display: flex;
//     flex-direction: column;
//     align-items: flex-start;
//     justify-content: space-between;
// `;

const PrimerCradContainer = styled.div`
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
  padding-left: 35px;
`;
const CardHeading = styled.h3<{ isMain?: boolean }>`
    font-family: ${(props) =>
		props.isMain ? TypographyENUM.lkSansBold : TypographyENUM.lkSansRegular};
    font-style: normal;
    font-size: 14px;
    display: block;
	margin-left:16px;
    letter-spacing: -0.02em;
    color: var(--text);
    flex: none;
    ${(props) =>
		props.isMain
			? `
      line-height: 38px;
    `
			: `
    line-height: 20px;
    `}
    order: 0;
    align-self: stretch;
    flex-grow: 0;
`;
const CardInfoText = styled.p<{ isWallet?: boolean }>`
  font-family: ${(props) =>
		props.isWallet ? TypographyENUM.lkSansBold : TypographyENUM.lkSansRegular};
  font-style: normal;
  /* font-weight: ${(props) => (props.isWallet ? 700 : 400)}; */
  font-size: 12px;
  line-height: ${(props) => (props.isWallet ? "20px" : "18px")};
  letter-spacing: -0.02em;
  color: ${(props) => (props.isWallet ? "#489B1C" : "#66668E")};
  margin-left:16px;
`;
// const RightSection = styled.div`
//   display: flex;
// `;
// const RightSectionText = styled.span`
//   margin-right: 10px;
//   font-family: ${TypographyENUM.lkSansRegular};
//   font-style: normal;
//   font-size: 12px;
//   line-height: 18px;
//   letter-spacing: -0.02em;
//   color: #333368;
// `;
const UL = styled.ul`
  margin-left: 1em;
  margin-top: 4px;
  font-family: ${TypographyENUM.lkSansRegular};
  font-style: normal;
  font-weight: 400;
  font-size: 12px;
  line-height: 18px;
  letter-spacing: -0.02em;
  color: #66668E;
  min-height: 32px;
`;
const Underline = styled.span`
  font-family: ${TypographyENUM.lkSansBold};
  font-style: normal;
  cursor: pointer;
  font-size: 12px;
  line-height: 18px;
  display: flex;
  align-items: center;
  letter-spacing: -0.02em;
  text-decoration-line: underline;
  color: #000042;
`;
const HeadContainer = styled.div`
  display: flex;
  align-items: flex-start;
  justify-content: space-between;
  flex-direction: column;
`;

const ContactLensConatiner = styled.div`
  display: flex;
  flex-direction: column;
`;
export const PayNowBtn = styled.button<{
  font: TypographyENUM;
  checked: boolean;
  isContactLensConsentEnabled?: boolean;
}>`
    margin-top: 20px;
	padding: 12px 20px;
	width: 250px;
	height: 48px;
	border-radius: 100px;
	background:  ${(props) =>
		props.isContactLensConsentEnabled
			? props.checked
				? "var(--vivid-green-100)"
				: "#E4E4E4"
			: "#11DAAC"};
	color: #000042;
	cursor: pointer;
	font-family: ${(props) => props.font};
	font-style: normal;
	font-weight: 700;
	font-size: 16px;
	line-height: 24px;
	display: flex;
	align-items: center;
	justify-content: center;
	letter-spacing: -0.02em;
	outline: none;
	border: none;
	&:disabled,
	&.disabled {
		color: #9999B3;
		background: #DBDBEA;
		pointer-events: none;
		cursor: disabled;
	};
	span {
		display: inline-flex;
		margin-right: 10px;
		svg {
			width: 6px;
    		height: 12px;
			path{
				stroke: #000042;
			}
		}
	};
	.disable {
		pointer-events: none;
	}
`;


const SubComponent = (
	key: string,
	isRTL: boolean,
	isOpen: boolean,
	onSubmit: (...args: any) => void,
	paymentMethod: string,
	gatewayId: string,
	localeData: DataType,
	banks?: { [name: string]: any }[],
	offers?: string[],
) => {
	if (key === "qrcode_payu")
		return (
			<QRCodeForm
				isOpen={isOpen}
				onSubmit={() => onSubmit(paymentMethod, gatewayId || null)}
				paymentMethod={paymentMethod}
				gatewayId={gatewayId}
			/>
		);
	if (key === "cc")
		return (
			<BankCardForm
				isOpen={isOpen}
				onSubmit={onSubmit}
				localeData={localeData}
			/>
		);
	if (key === "nb" && banks?.length)
		return (
			<NetBanking
				isRTL={isRTL}
				isOpen={isOpen}
				banksList={banks}
				onSubmit={(bankCode: string) => onSubmit(paymentMethod, bankCode)}
			/>
		);
	// if(key === "cod" && paymentMethod) return <CashOnDelivery isOpen={isOpen} onSubmit={() => onSubmit(paymentMethod)} />;
	// if(key === "cod")
	if (paymentMethod === "payuwallet" || paymentMethod === "paytm_cc")
		return (
			<UPIForm
				offers={offers}
				isRTL={isRTL}
				isOpen={isOpen}
				submitAction={() => onSubmit(paymentMethod, gatewayId || null)}
			/>
		);
	return <div></div>;
};

const PaymentCardNew = ({
	cardType,
	data,
	disabled,
	isWallet,
	isRTL = false,
	localeData,
	isContactLensCheckboxChecked,
	setIsContactLensCheckboxChecked,
	orderCreatedSuccess,
	setRedirect,
	setSectedPrimerCreditCard,
	aeDesigns =false,
	configData
}: CardDataType) => {
	const [showAllOffers, setShowAllOffers] = useState(false);
	const [showPayNowPopup, setShowPayNowPopup] = useState(false);
	// const [checked, setChecked] = useState(false);
	const toggleChecked = () => {
		setIsContactLensCheckboxChecked(!isContactLensCheckboxChecked);
	};
	return (
		<Fragment>
			{cardType === CardTypeENUM.STORE_CREDIT && (
				<CardContainer
					dottedBtmBorder={data.dottedBtmBorder}
					dottedTopBorder={data.dottedTopBorder}
					isOpen={data.isChildrenVisible}
					disabled={disabled}
				>
					<Flex
						onClick={disabled ? () => null : data.onSelect}
						disabled={disabled}
					>
						<SelectField
							selected={data.isChildrenVisible}
							disabled={disabled}
						></SelectField>
						{!data.text ? (
							<CardHeading isMain>{data.head}</CardHeading>
						) : (
							<HeadContainer>
								<CardHeading>{data.head}</CardHeading>
								<CardInfoText isWallet={isWallet}>{data.text}</CardInfoText>
							</HeadContainer>
						)}
					</Flex>
					{data.isChildrenVisible ? data.children : null}
					{/* <StoreCreditForm isOpen={data.isChildrenVisible} onSubmit={data.onSubmit} isRemainingAmount={data.isRemainingAmount} message={data.message} isError={data.isError} /> */}
				</CardContainer>
			)}
			{cardType === CardTypeENUM.BANK_OFFERS && (
				<CardContainer bankoffer>
					<div>
						<CardHeading>{data.head}</CardHeading>
						<UL>
							{data.offers
								.slice(0, showAllOffers ? data.offers.length : 1)
								.map((d) => (
									<li key={d}>{d}</li>
								))}
						</UL>
					</div>
					<div>
						{data.offers.length > 1 && (
							<Underline onClick={() => setShowAllOffers((s) => !s)}>
								{!showAllOffers
									? `+ ${data.offers.length - 1} more`
									: "Show less"}
							</Underline>
						)}
					</div>
				</CardContainer>
			)}
			{(cardType === CardTypeENUM.CARD_WALLETS ||
        cardType === CardTypeENUM.SAVED_CARD ||
        cardType === CardTypeENUM.UPI ||
        cardType === CardTypeENUM.CASH_ON_DELIVERY) && (
				<CardContainer
					dottedBtmBorder={data.dottedBtmBorder}
					dottedTopBorder={data.dottedTopBorder}
					isOpen={data.isChildrenVisible}
					disabled={disabled}
					aeDesigns={aeDesigns}
				>
					<Flex
						onClick={disabled ? () => null : data.onSelect}
						disabled={disabled}
					>
						<Radio isSelected={data.isChildrenVisible} disabled={disabled} />
						{!data.img ? "" : (
							<CardImage
								src={data.img}
								alt=""
								isSelected={data.isChildrenVisible}
							/>
						)}
						{!data.text ? (
							<CardHeading isMain>{data.head}</CardHeading>
						) : (
							<HeadContainer>
								<CardHeading>{data.head}</CardHeading>
								<CardInfoText isWallet={isWallet}>{data.text}</CardInfoText>
							</HeadContainer>
						)}
					</Flex>
					{cardType === CardTypeENUM.SAVED_CARD ? (
						<SavedCardForm
							isRTL={isRTL}
							isOpen={data.isChildrenVisible}
							submitAction={data.onSubmit}
							cardToken={(data as SavedCardDataType).cardToken}
							localeData={localeData}
						/>
					) : cardType === CardTypeENUM.CASH_ON_DELIVERY ? (
						<CashOnDelivery
							isOpen={data.isChildrenVisible}
							onSubmit={() => data.onSubmit(data.paymentMethod)}
							isCaptchaEnabled={
								false && (data as CashOnDeliveryType)?.isCaptchaEnabled
							}
							captchaImageUrl={data.captchaImageUrl}
							captchaValue={data.captchaValue}
							loadCaptcha={data.loadCaptcha}
							aeDesigns={aeDesigns}
						/>
					) : (
						<Fragment>
							{SubComponent(
								(data as CardWalletDataType).key,
								isRTL,
								data.isChildrenVisible,
								data.onSubmit,
								(data as CardWalletDataType).paymentMethod,
								(data as CardWalletDataType).gatewayId,
                localeData as DataType,
                (data as CardWalletDataType).banks,
                (data as CardWalletDataType).offers
							)}
						</Fragment>
					)}
				</CardContainer>
			)}
			{cardType === CardTypeENUM.UPI_QR && (
				<CardContainer
					dottedBtmBorder={data.dottedBtmBorder}
					dottedTopBorder={data.dottedTopBorder}
					isOpen={data.isChildrenVisible}
					disabled={disabled}
				>
					<Flex
						onClick={disabled ? () => null : data.onSelect}
						disabled={disabled}
					>
						<Radio isSelected={data.isChildrenVisible} disabled={disabled} />
						{!data.img ? "" : (
							<CardImage
								src={data.img}
								alt=""
								isSelected={data.isChildrenVisible}
							/>
						)}
						{!data.text ? (
							<CardHeading isMain>{data.head}</CardHeading>
						) : (
							<HeadContainer>
								<CardHeading>{data.head}</CardHeading>
								<CardInfoText isWallet={isWallet}>{data.text}</CardInfoText>
							</HeadContainer>
						)}
					</Flex>
					{data.isChildrenVisible ? data.children : null}
					{/* <QRCodeForm isOpen={data.isChildrenVisible} paymentMethod={data.paymentMethod} gatewayId={data.gatewayId} onSubmit={data.onSubmit} /> */}
				</CardContainer>
			)}
			{cardType === CardTypeENUM.PAYMENT_CARD && (
				<CardContainer
					dottedBtmBorder={data.dottedBtmBorder}
					dottedTopBorder={data.dottedTopBorder}
					isOpen={data.isChildrenVisible}
					disabled={disabled}
				>
					<Flex
						onClick={() => disabled ? null : data.onSelect(true)}
						disabled={disabled}
					>
						<Radio isSelected={data.isChildrenVisible} disabled={disabled} />
						{!data.img ? "" : (
							<CardImage
								src={data.img}
								alt=""
								isSelected={data.isChildrenVisible}
							/>
						)}
						<CardHeading>{data.head}</CardHeading>
					</Flex>
					{data.isChildrenVisible && (
						<PrimerCradContainer>
							{" "}
							<PrimerCard
								payLaterAllowed={data.payLaterAllowed}
								handlePayLater={() => data.onSubmit("paylater", null)}
								deviceType={DeviceTypes.DESKTOP}
								isContactLensConsentEnabled={data.isContactLensConsentEnabled}
								dataLocale={localeData} isContactLensCheckboxChecked={isContactLensCheckboxChecked}
								setIsContactLensCheckboxChecked={setIsContactLensCheckboxChecked}
								setSectedPrimerCreditCard={setSectedPrimerCreditCard}
								configData={configData}
							/>{" "}
						</PrimerCradContainer>
					)}
				</CardContainer>
			)}
			{cardType === CardTypeENUM.PAY_LATER && (
				<>
					<CardContainer className="payLaterCard"
						dottedBtmBorder={data.dottedBtmBorder}
						dottedTopBorder={data.dottedTopBorder}
						isOpen={
							data.isContactLensConsentEnabled
								? data.isChildrenVisible
								: data.isContactLensConsentEnabled
						}
						disabled={disabled}
					>
						<div style={{ cursor: `${disabled ? "not-allowed" : "pointer"}` }}
							onClick={() => {disabled ? null : data.onSelect(true);setSectedPrimerCreditCard(false); }}
						>
							<Flex>
								<Radio isSelected={data.isChildrenVisible} disabled={disabled} />
								{!data.img ? "" : (
									<CardImage
										src={data.img}
										alt=""
										isSelected={data.isChildrenVisible}
									/>
								)}
								<CardHeading>{data.head}</CardHeading>
							</Flex>
							<div style={{ margin: "5px 36px" }}>
								<OfferText>{data.offerText}</OfferText>
							</div>
						</div>
						<PayLaterButtonWrapper>
							{data.isChildrenVisible && data.isContactLensConsentEnabled && (
								<ContactLensConatiner>
									<ContactLensConsentCheckbox
										toggleChecked={toggleChecked}
										checked={isContactLensCheckboxChecked}
										dataLocale={localeData}
										deviceType={DeviceTypes.DESKTOP}
										configData={configData}
									/>
									<PayLaterInnerButton>
										<PayNowBtn
											className={`submit-button ${data.isContactLensConsentEnabled && !isContactLensCheckboxChecked ? "disabled" : ""
											}`}
											id={`validate-button-primer-${data.key}`}
											onClick={() => {
												setShowPayNowPopup(true);
												// if(!disabled) data.onSelect(true);
											}}
											isContactLensConsentEnabled={data.isContactLensConsentEnabled}
											font={TypographyENUM.lkSansBold}
											checked={isContactLensCheckboxChecked}
											disabled={data.isContactLensConsentEnabled && !isContactLensCheckboxChecked}
										>
											{localeData?.PLACE_ORDER}
										</PayNowBtn>
										{data.isChildrenVisible && data.payLaterAllowed && (
											<PayLater
												dataLocale={localeData}
												handlePayLater={() => data.onSubmit("paylater", null)}
												// isContactLensConsentEnabled={data.isContactLensConsentEnabled}
												// isContactLensCheckboxChecked={isContactLensCheckboxChecked}
											/>
										)}
									</PayLaterInnerButton>
								</ContactLensConatiner>
							)}
							<PayLaterInnerButton>
								{data.isChildrenVisible && data.payLaterAllowed && !data.isContactLensConsentEnabled && (
									<><PayLater
										dataLocale={localeData}
										handlePayLater={() => data.onSubmit("paylater", null)} />

									<PayNowBtn
										checked={false}
										isContactLensConsentEnabled={data.isContactLensConsentEnabled}
										onClick={() => {
											setShowPayNowPopup(true);
											// if(!disabled) data.onSelect(true);
										} }
										id={`validate-button-primer-${data.key}`}
										font={TypographyENUM.lkSansBold}
									>
										<span>{localeData?.PAY_NOW}</span>
									</PayNowBtn></>

								)}
								{data.isChildrenVisible && !data.isContactLensConsentEnabled && !data.payLaterAllowed && (
									<PayNowBtn
										checked={false}
										isContactLensConsentEnabled={data.isContactLensConsentEnabled}
										onClick={() => {
											setShowPayNowPopup(true);
											// if(!disabled) data.onSelect(true);
										}}
										id={`validate-button-primer-${data.key}`}
										font={TypographyENUM.lkSansBold}
									>
										<span>{localeData?.PLACE_ORDER}</span>
									</PayNowBtn>
								)}
							</PayLaterInnerButton>
						</PayLaterButtonWrapper>
					</CardContainer>
					{/* <button
						id="submit-button"
						style={{ display: "none" }}
					>
								Submit
					</button> */}
					{/*
							NOTE: The below condition is added as when configuring primer ui,
							it adds event listener to a dom element with id="validate-primer-button".
							So it should be mounted on dom before the primer configuration starts.
					 */}
					{data.isChildrenVisible && (
						<div style={{ display: showPayNowPopup && orderCreatedSuccess? "block" : "none" }}>
							<PopupModalDesktop
								isCrossIcon
								onClickBackDrop={() => { setShowPayNowPopup(false); setRedirect(true); } }
								onClose={() => { setShowPayNowPopup(false); 	setRedirect(true); } }
								header={`${localeData.PAY_VIA} ${data.head}`}
								description={`${localeData.YOU_WILL_BE_REDIRECTED_TO} ${data.head} ${localeData.FOR_COMPLETING_THE_PAYMENT}`}
							>
								<ButtonWrapper>
									<PayNowBtn
										onClick={() => setShowPayNowPopup(false)}
										checked={false}
										isContactLensConsentEnabled={data.isContactLensConsentEnabled}
										id={`submit-button-${data.key}`}
										font={TypographyENUM.lkSansBold}
									>
										<span>{localeData?.PAY_NOW}</span>
									</PayNowBtn>
								</ButtonWrapper>
							</PopupModalDesktop>
						</div>
					)}
				</>
			)}
			{cardType === CardTypeENUM.GRABPAY && (
				<>
					<CardContainer
						dottedBtmBorder={data.dottedBtmBorder}
						dottedTopBorder={data.dottedTopBorder}
						isOpen={
							data.isContactLensConsentEnabled
								? data.isChildrenVisible
								: data.isContactLensConsentEnabled
						}
						disabled={disabled}
					>
						<div style={{ cursor: `${disabled ? "not-allowed" : "pointer"}` }}
							onClick={() => {disabled ? null : data.onSelect();setSectedPrimerCreditCard(false); }}
						>
							<Flex>
								<Radio isSelected={data.isChildrenVisible} disabled={disabled} />
								{!data.img ? "" : (
									<CardImage
										src={data.img}
										alt=""
										isSelected={data.isChildrenVisible}
									/>
								)}
								<CardHeading>{data.head}</CardHeading>
							</Flex>
							<div style={{ margin: "5px 36px" }}>
								<OfferText>{data.offerText}</OfferText>
							</div>
						</div>
						<PayLaterButtonWrapper>
							{data.isChildrenVisible && data.isContactLensConsentEnabled && (
								<ContactLensConatiner>
									<ContactLensConsentCheckbox
										toggleChecked={toggleChecked}
										checked={isContactLensCheckboxChecked}
										dataLocale={localeData}
										deviceType={DeviceTypes.DESKTOP}
										configData={configData}
									/>
									<PayLaterInnerButton>
										<PayNowBtn
											className={`submit-button ${data.isContactLensConsentEnabled && !isContactLensCheckboxChecked ? "disabled" : ""
											}`}
											id={`validate-button-primer-${data.key}`}
											onClick={() => {
												data.onSubmit("grabpay", "JUSPAY");
												// setShowPayNowPopup(true);
												// if(!disabled) data.onSelect(true);
											}}
											isContactLensConsentEnabled={data.isContactLensConsentEnabled}
											font={TypographyENUM.lkSansBold}
											checked={isContactLensCheckboxChecked}
											disabled={data.isContactLensConsentEnabled && !isContactLensCheckboxChecked}
										>
											{localeData?.PLACE_ORDER}
										</PayNowBtn>
										{data.isChildrenVisible && data.payLaterAllowed && (
											<PayLater
												dataLocale={localeData}
												handlePayLater={() => data.onSubmit("paylater", null)}
												// isContactLensConsentEnabled={data.isContactLensConsentEnabled}
												// isContactLensCheckboxChecked={isContactLensCheckboxChecked}
											/>
										)}
									</PayLaterInnerButton>
								</ContactLensConatiner>
							)}
							<PayLaterInnerButton>
								{data.isChildrenVisible && data.payLaterAllowed && !data.isContactLensConsentEnabled && (
									<><PayLater
										dataLocale={localeData}
										handlePayLater={() => data.onSubmit("paylater", null)} />

									<PayNowBtn
										checked={false}
										isContactLensConsentEnabled={data.isContactLensConsentEnabled}
										onClick={() => {
											data.onSubmit("grabpay", "JUSPAY");
											// setShowPayNowPopup(true);
											// if(!disabled) data.onSelect(true);
										} }
										id={`validate-button-primer-${data.key}`}
										font={TypographyENUM.lkSansBold}
									>
										<span>{localeData?.PAY_NOW}</span>
									</PayNowBtn></>

								)}
								{data.isChildrenVisible && !data.isContactLensConsentEnabled && !data.payLaterAllowed && (
									<PayNowBtn
										checked={false}
										isContactLensConsentEnabled={data.isContactLensConsentEnabled}
										onClick={() => {
											data.onSubmit("grabpay", "JUSPAY");
											// setShowPayNowPopup(true);
											// if(!disabled) data.onSelect(true);
										}}
										id={`validate-button-primer-${data.key}`}
										font={TypographyENUM.lkSansBold}
									>
										<span>{localeData?.PLACE_ORDER}</span>
									</PayNowBtn>
								)}
							</PayLaterInnerButton>
						</PayLaterButtonWrapper>
					</CardContainer>
				</>
			)}
		</Fragment>
	);
};

export { PaymentCardNew };
