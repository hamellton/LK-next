import React from "react";
import styled from "styled-components";
import { IconRight } from "../../../../../Icons";
import { TypographyENUM } from "../../../../../Types/general";
// import { InputFieldContainer } from "../InputFieldContainer";
// import { TextField } from "../TextField";

export enum TextTypeENUM {
	password = "password",
	text = "text",
	number = "number"
}
const StoreCreditFormContainer = styled.div<{ isOpen?: boolean }>`
	padding-left: 25px;
	width: 100%;
    ${props => !props.isOpen && `
        display: none;
    `}
`;
const Flex = styled.div<{spaceBetween?: boolean}>`
    display: flex;
	${props => props.spaceBetween && `
		justify-content: space-between;
	`}
	align-items: flex-start;
    /* width: 100%; */

`;
const PayNowBtn = styled.button<{font: TypographyENUM}>`
	padding: 12px 20px;
	width: 250px;
	height: 48px;
	border-radius: 100px;
	background: #11DAAC;
	color: #000042;
	cursor: pointer;
	font-family: ${props => props.font};
	font-style: normal;
	font-weight: 700;
	font-size: 16px;
	line-height: 24px;
	display: flex;
	align-items: center;
	justify-content: center;
	letter-spacing: -0.02em;
	outline: none;
	border: none;
	&:disabled,
	&[disabled] {
		color: #9999B3;
		background: #DBDBEA;
	}
	span {
		display: inline-flex;
		margin-right: 10px;
		svg {
			width: 6px;
    		height: 12px;
			path{
				stroke: #000042;
			}
		}
	}
`;
const SavedCardHolder = styled.div`
	display: flex;
	align-items: flex-start;
	padding-left: 10px;
	> span {
		font-family: ${TypographyENUM.lkSansBold};
		font-style: normal;
		/* font-weight: 700; */
		font-size: 14px;
		letter-spacing: -0.02em;
		color: #333368;
		line-height: 48px;
		margin-right: 9px;
	}
	> ul {
		margin: 10px 0;
		li {
			font-family: ${TypographyENUM.lkSansRegular};
			font-style: normal;
			font-weight: 400;
			font-size: 12px;
			line-height: 14px;
			letter-spacing: -0.02em;
			color: #333368;
		}
	}
`;

const ArrowContain = styled.span<{isRTL: boolean}>`
${props => props.isRTL ? "transform: rotate(180deg)" : ""};
`;

interface StoreCreditFormType {
	isOpen: boolean;
	submitAction: (e: any) => void;
	isRTL?: boolean;
	offers?: string[]
}
const UPIForm = ({ isOpen = false, submitAction, isRTL=false, offers }: StoreCreditFormType) => {
	// const [cvv, setCVV] = useState("");
	return (
		<StoreCreditFormContainer isOpen={isOpen}>
			<Flex spaceBetween>
				<SavedCardHolder>
					<ul>
						{offers?.map((oftext: string) => <li key={oftext}>{oftext}</li>)}
						{/* <li>Get upto Rs. 200 cashback. Pay using your saved credit cards</li>
						<li>Eazy 6 month EMI available</li> */}
					</ul>
				</SavedCardHolder>
				<PayNowBtn
					id="submit-saved-card-form-button"
					font={TypographyENUM.lkSansBold} //onDecreaseItem(item.id)
					onClick={submitAction}
				>
					<span>Pay Now</span> <ArrowContain isRTL={isRTL}> <IconRight /> </ArrowContain>
				</PayNowBtn>
			</Flex>
		</StoreCreditFormContainer>
	);
};

export default UPIForm;
