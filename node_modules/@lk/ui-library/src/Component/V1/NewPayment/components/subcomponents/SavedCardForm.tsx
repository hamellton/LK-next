import React, { useState } from "react";
import styled from "styled-components";
import { IconRight } from "../../../../../Icons";
import { DataType, TypographyENUM } from "../../../../../Types/general";
import Tooltip from "../../../ToolTip/Tooltip";
// import Button from "../../../Button";
// import CardImage from "../CardImage";
import { InputFieldContainer } from "../InputFieldContainer";
import { TextField } from "../TextField";

export enum TextTypeENUM {
	password = "password",
	text = "text",
	number = "number"
}
const StoreCreditFormContainer = styled.div<{ isOpen?: boolean }>`
	padding-left: 25px;
	width: 100%;
    ${props => !props.isOpen && `
        display: none;
    `}
`;
// const StoreCredit = styled.div`
//     display: flex;
//     flex-direction: column;
//     width: 444px;
// `;
const Flex = styled.div<{spaceBetween?: boolean}>`
    display: flex;
	${props => props.spaceBetween && `
		justify-content: space-between;
	`}
	align-items: flex-start;
    /* width: 100%; */

`;
// const InfoBox = styled.div<{ isError: boolean }>`
// 	display: flex;
// 	align-items: center;
// 	padding: 4px 100px 4px 8px;
// 	gap: 10px;
// 	width: 100%;
// 	height: 31px;
// 	background: ${props => props.isError ? "#FFEBEA" : "#ECFBD3"};
// 	border: 1px solid ${props => props.isError ? "#E34934" : "#60B527"};
// 	border-radius: 4px;
// 	flex: none;
// 	order: 2;
// 	flex-grow: 0;
// `;
// const InfoCircle = styled.div`
// 	border: 0.666667px solid #8D2D20;
// 	width: 13px;
// 	height: 13px;
// 	border-radius: 50%;
//     text-align: center;
//     font-size: 10px;
// 	// display:
// `;
// const InfoText = styled.span<{ isError: boolean }>`
// 	font-family: ${TypographyENUM.lkSansBold};
// 	font-style: normal;
// 	font-weight: 700;
// 	font-size: 9px;
// 	line-height: 12px;
// 	text-align: center;
// 	text-transform: uppercase;
// 	color: ${props => props.isError ? "#8D2D20" : "#145607"};
// `;
const PayNowBtn = styled.button<{font: TypographyENUM}>`
	padding: 12px 20px;
	width: 250px;
	height: 48px;
	border-radius: 100px;
	background: #11DAAC;
	color: #000042;
	cursor: pointer;
	font-family: ${props => props.font};
	font-style: normal;
	font-weight: 700;
	font-size: 16px;
	line-height: 24px;
	display: flex;
	align-items: center;
	justify-content: center;
	letter-spacing: -0.02em;
	outline: none;
	border: none;
	&:disabled,
	&[disabled] {
		color: #9999B3;
		background: #DBDBEA;
	}
	span {
		display: inline-flex;
		margin-right: 10px;
		svg {
			width: 6px;
    		height: 12px;
			path{
				stroke: #000042;
			}
		}
	}
`;
const SavedCardHolder = styled.div<{isRTL: boolean}>`
	display: flex;
	align-items: flex-start;
	padding-left: 10px;
	> span {
		font-family: ${TypographyENUM.lkSansBold};
		font-style: normal;
		/* font-weight: 700; */
		font-size: 14px;
		letter-spacing: -0.02em;
		color: #333368;
		line-height: 48px;
		${props => props.isRTL ? "margin-left: 9px" : "margin-right: 9px"};
	}
`;
const ArrowContain = styled.span<{isRTL:boolean}>`
${props => props.isRTL ? "transform: rotate(180deg)" : ""};
`;
interface StoreCreditFormType {
	isOpen: boolean;
	submitAction: (cvv: string, cardToken: string) => void;
	cardToken: string;
	isRTL?: boolean;
	localeData: DataType
	// onSubmit: (code: string, amount: string) => void,
	// isRemainingAmount: boolean,
	// message: string,
	// isError: boolean
}
const SavedCardForm = ({ isOpen = false, submitAction, cardToken, isRTL=false, localeData }: StoreCreditFormType) => {
	const [cvv, setCVV] = useState("");
	// const submitCredit = () => {
	// 	//
	// };
	return (
		<StoreCreditFormContainer isOpen={isOpen}>
			<Flex spaceBetween>
				<SavedCardHolder isRTL={isRTL}>
					<span>CVV</span>
					<InputFieldContainer isFullWidth={false} isError={false} isBoundary={true} line={0.82} width="115px" background="#ffffff">
						<TextField isRTL={isRTL} value={cvv} type={TextTypeENUM.password} onChange={e => setCVV(e.target.value)} placeholder="CVV" onKeyUpChange={() => null} maxLength={4}
							showInfo={<Tooltip
								className="tooltip-custom"
								id="cvvIcon"
								showArrow={true}
								title="CVV"
							// title={dataLocale.TOLLTIP}
							>
								<span>
									<img
										alt="How to find cvv"
										src="https://static1.lenskart.com/media/desktop/img/cvv-icon.png"
										style={{ width: "80px" }}
									/>
								</span>
							</Tooltip>}
							onKeyPress={(event: any) => {
								const keycode = event.which;
								if (
									!(
										event.shiftKey === false &&
										(keycode === 46 ||
											keycode === 8 ||
											keycode === 37 ||
											keycode === 39 ||
											(keycode >= 48 && keycode <= 57))
									)
								) {
									event.preventDefault();
								}
							}}>
						</TextField>
					</InputFieldContainer>
				</SavedCardHolder>
				{/* <Button
					id="submit-store-credit-button"
					theme={ThemeENUM.primary}
					kind={kindENUM.background}
					showChildren={true}
					font={TypographyENUM.lkSansBold} //onDecreaseItem(item.id)
					width="100"
					disabled={!cvv || cvv.length < 3}
					onClick={() => null}
				>
					Pay now
				</Button> */}
				<PayNowBtn
					id="submit-saved-card-form-button"
					font={TypographyENUM.lkSansBold} //onDecreaseItem(item.id)
					disabled={!cvv || cvv.length < 3}
					onClick={() => submitAction(cvv, cardToken)}
				>
					<span>{localeData?.PAY_NOW}</span> <ArrowContain isRTL={isRTL}><IconRight /></ArrowContain>
				</PayNowBtn>
			</Flex>
		</StoreCreditFormContainer>
	);
};

export default SavedCardForm;
