// import React, { Fragment, useEffect, useState } from "react";
// import styled from "styled-components";
// import { TypographyENUM } from "../../../../Types/general";
// import Radio from "./Radio";
// import CardImage from "./CardImage";
// import BankCardForm from "./subcomponents/BankCardForm";
// import StoreCreditForm from "./subcomponents/StoreCreditForm";
// import { SelectField } from "./subcomponents/SelectField";
// import SavedCardForm from "./subcomponents/SavedCardForm";
// import UPIForm from "./subcomponents/UPIForm";
// import NetBanking from "./subcomponents/NetBanking";
// import CashOnDelivery from "./subcomponents/CashOnDelivery";

// const CardContainer = styled.div<{ bankoffer?: boolean, dottedBtmBorder?: boolean, dottedTopBorder?: boolean; isOpen?: boolean; }>`
//     display: flex;
//     align-items: ${props => (props.bankoffer || props.isOpen) ? "flex-start" : "center"};
//     justify-content: space-between;
//     padding: 16px;
//     flex-direction: ${props => (props.bankoffer || props.isOpen) ? "column" : "row"};
//     gap: 16px;
//     box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.1);
//     border-radius: 12px;
//     border-top-left-radius: 12px;
//     border-top-right-radius: 12px;
//     border-bottom-right-radius: 12px;
//     border-bottom-left-radius: 12px;
//     ${props => props.dottedTopBorder && `
//       border-top: 1px dashed #d3d3d3;
//       border-top-left-radius: 0;
//       border-top-right-radius: 0;
//     `}
//     ${props => props.dottedBtmBorder && `
//       border-bottom: 1px dashed #d3d3d3;
//       border-bottom-right-radius: 0;
//       border-bottom-left-radius: 0;
//     `}
//     background: ${props => props.isOpen ? "#F5F5FF" : "var(--white)"};
// `;
// const Flex = styled.div`
//   display: flex;
//   align-items: center;
// `;
// const CardHeading = styled.h3<{ isMain?: boolean }>`
//     font-family: ${props => props.isMain ? TypographyENUM.lkSansBold : TypographyENUM.lkSansRegular};
//     font-style: normal;
//     font-size: 14px;
//     display: block;
//     letter-spacing: -0.02em;
//     color: var(--text);
//     flex: none;
//     ${props => props.isMain ? `
//       line-height: 38px;
//     ` : `
//     line-height: 20px;
//     `}
//     order: 0;
//     align-self: stretch;
//     flex-grow: 0;
// `;
// const CardInfoText = styled.p`
//   font-family: ${TypographyENUM.lkSansRegular};
//   font-style: normal;
//   font-size: 12px;
//   line-height: 18px;
//   letter-spacing: -0.02em;
//   color: #66668E;
// `;
// const UL = styled.ul`
//   margin-left: 1em;
//   margin-top: 4px;
//   font-family: ${TypographyENUM.lkSansRegular};
//   font-style: normal;
//   font-weight: 400;
//   font-size: 12px;
//   line-height: 18px;
//   letter-spacing: -0.02em;
//   color: #66668E;
//   min-height: 32px;
// `;
// const Underline = styled.span`
//   font-family: ${TypographyENUM.lkSansBold};
//   font-style: normal;
//   cursor: pointer;
//   font-size: 12px;
//   line-height: 18px;
//   display: flex;
//   align-items: center;
//   letter-spacing: -0.02em;
//   text-decoration-line: underline;
//   color: #000042;
// `;
// const HeadContainer = styled.div`
//   display: flex;
//   align-items: flex-start;
//   justify-content: space-between;
//   flex-direction: column;
// `;
// enum CardTypeENUM {
//     STORE_CREDIT = "STORE CREDIT",
//     BANK_OFFERS = "BANK OFFERS",
//     CARD_WALLETS = "CARD WALLETS",
// 	UPI = "UPI",
// 	UPI_QR = "UPI QR",
// 	SAVED_CARD = "SAVED CARD"
// }
// interface StoreCreditDataType {
//     head: string,
//     text: string,
//     onSelect: () => void,
//     selectText: string,
// 	isChildrenVisible: boolean,
// 	onSubmit: (...args: any) => void,
// 	isRemainingAmount: boolean,
// 	message: string,
// 	isError: boolean
// }
// interface BankOffersDataType {
//     head: string,
//     offers: string[],
//     onShowMore: () => void,
//     showAll: boolean,
// }
// interface CardWalletDataType {
//     img: string,
//     head: string,
//     text: string,
//     onSelect: () => void,
//     isChildrenVisible: boolean,
//     children: React.ReactNode,
// 	onSubmit: (...args: any) => void,
// 	code: string,
// 	key: string,
// 	paymentMethod: string,
// 	gatewayId: string,
// 	banks?: {[name: string]: any}[]
// }
// interface SavedCardDataType {
// 	cardBrand: string,
// 	cardMode: string,
// 	cardToken: string,
// 	cardType: string,
// 	expired: boolean,
// 	expiryMonth: string,
// 	expiryYear: string,
// 	nameOnCard: string,
// 	number: string,
// 	storeCard: boolean,

// 	head: string,
// 	text: string,
// 	img: string,
// 	isChildrenVisible: boolean,
// 	onSelect: () => void,

// 	onSubmit: (cvv: string, cardToken: string) => void
// }

// const SubComponent = (key: string, isOpen: boolean, onSubmit: (...args: any) => void, paymentMethod: string, gatewayId: string, banks?: {[name: string]: any}[]) => {
// 	if(key === "qrcode_payu") return <div>QR code</div>;
// 	if(key === "cc") return <BankCardForm isOpen={isOpen} onSubmit={onSubmit} />;
// 	if(key === "nb" && banks?.length) return <NetBanking isOpen={isOpen} banksList={banks} onSubmit={(bankCode: string) => onSubmit(paymentMethod, bankCode)}/>;
// 	if(key === "cod" && paymentMethod) return <CashOnDelivery isOpen={isOpen} onSubmit={() => onSubmit(paymentMethod)} />;
// 	if(paymentMethod && gatewayId) return <UPIForm isOpen={isOpen} submitAction={() => onSubmit(paymentMethod, gatewayId)} />;
// 	return <div></div>;
// };
// type CardDataType = {
//     cardType: CardTypeENUM.STORE_CREDIT,
//     data: StoreCreditDataType[]
// } | {
//     cardType: CardTypeENUM.BANK_OFFERS,
//     data: BankOffersDataType[]
// } | {
//     cardType: CardTypeENUM.CARD_WALLETS,
//     data: CardWalletDataType[]
// } | {
// 	cardType: CardTypeENUM.SAVED_CARD,
//     data: SavedCardDataType[]
// }

// const PaymentCard = ({ cardType, data }: CardDataType) => {
// 	useEffect(() => {
// 		if(cardType === CardTypeENUM.CARD_WALLETS) console.log("cardData", data);
// 	}, []);

// 	const [showAllOffers, setShowAllOffers] = useState(false);
// 	return (
// 		<Fragment>
// 			{cardType === CardTypeENUM.STORE_CREDIT && data.map((nc, i) => <CardContainer key={nc.head} dottedBtmBorder={i !== (data.length - 1)} dottedTopBorder={i !== 0} isOpen={nc.isChildrenVisible}>
// 				<Flex>
// 					<SelectField onClick={nc.onSelect} selected={nc.isChildrenVisible}></SelectField>
// 					{!nc.text ? <CardHeading isMain>{nc.head}</CardHeading> : <HeadContainer>
// 						<CardHeading>{nc.head}</CardHeading>
// 						<CardInfoText>{nc.text}</CardInfoText>
// 					</HeadContainer>}
// 				</Flex>
// 				<StoreCreditForm isOpen={nc.isChildrenVisible} onSubmit={nc.onSubmit} isRemainingAmount={nc.isRemainingAmount} message={nc.message} isError={nc.isError} />
// 			</CardContainer>)}
// 			{cardType === CardTypeENUM.BANK_OFFERS && data.map(bo => <CardContainer key={bo.head} bankoffer>
// 				<div>
// 					<CardHeading>{bo.head}</CardHeading>
// 					<UL>
// 						{bo.offers.slice(0, showAllOffers ? bo.offers.length : 1).map(d => <li key={d}>{d}</li>)}
// 					</UL>
// 				</div>
// 				<div>
// 					{bo.offers.length > 1 && <Underline onClick={() => setShowAllOffers(s => !s)}>{!showAllOffers ? `+ ${bo.offers.length - 1} more` : "Show less"}</Underline>}
// 				</div>
// 			</CardContainer>)}
// 			{(cardType === CardTypeENUM.CARD_WALLETS || cardType === CardTypeENUM.SAVED_CARD) && data.map((nc, i) => <CardContainer key={nc.head} dottedBtmBorder={i !== (data.length - 1)} dottedTopBorder={i !== 0} isOpen={nc.isChildrenVisible}>
// 				<Flex>
// 					<Radio isSelected={nc.isChildrenVisible} onClick={nc.onSelect} />
// 					<CardImage src={nc.img} alt="" isSelected={nc.isChildrenVisible} />
// 					{!nc.text ? <CardHeading isMain>{nc.head}</CardHeading> : <HeadContainer>
// 						<CardHeading>{nc.head}</CardHeading>
// 						<CardInfoText>{nc.text}</CardInfoText>
// 					</HeadContainer>}
// 				</Flex>
// 				{cardType === CardTypeENUM.SAVED_CARD && <SavedCardForm isOpen={nc.isChildrenVisible} submitAction={nc.onSubmit} cardToken={(nc as SavedCardDataType).cardToken} />}
// 				{cardType === CardTypeENUM.CARD_WALLETS && <Fragment>{SubComponent((nc as CardWalletDataType).key, nc.isChildrenVisible, nc.onSubmit, (nc as CardWalletDataType).paymentMethod, (nc as CardWalletDataType).gatewayId, (nc as CardWalletDataType).banks)}</Fragment>}
// 			</CardContainer>)}
// 		</Fragment>
// 	);
// };

// export { PaymentCard };

import React from "react";

const PaymentCard = () => {
	return (
		<div>PaymentCard</div>
	);
};

export default PaymentCard;
