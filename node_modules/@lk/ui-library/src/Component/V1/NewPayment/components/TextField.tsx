import React, { ReactNode, useState } from "react";
import { EncircledQuestionMark } from "../../../../Icons";
import styled from "styled-components";
import { TypographyENUM } from "../../../../Types/general";
import OverlayTrigger from "../../OverlayTrigger/OverlayTrigger";
import { TextTypeENUM } from "./types";

export const FieldInput = styled.input`
	width: 100%;
	height: 100%;
	border: none;
	outline: none;
	background: transparent;
    font-family: ${TypographyENUM.lkSansRegular};
    font-style: normal;
    font-weight: 400;
    font-size: 16px;
    line-height: 24px;
    letter-spacing: -0.02em;
    color: #66668E;
	user-select: initial;
	&::before, &::after {
    	user-select: initial;
	}
`;
export const LeftPositioned = styled.div`
	left: 0;
	width: fit-content;
`;

export const CrossSection = styled.div<{isRTL: boolean}>`
	position: absolute;
	${props => props.isRTL ? "left: 15px" : "right: 15px"};
	cursor: pointer;
	height: 14px;
	width: 14px;
`;

interface TextFieldType {
	value: string | null,
	type?: string,
	onChange: (e: React.ChangeEvent<HTMLInputElement>) => void,
	placeholder?: string,
	children?: React.ReactNode,
	clearText?: () => void,
	showText?: () => void,
	onKeyUpChange?: (e: React.ChangeEvent<HTMLInputElement>) => void,
	maxLength?: number,
	name?: string,
	showInfo?: ReactNode,
	onKeyPress?: (e: React.ChangeEvent<HTMLInputElement>) => void,
	isRTL?: boolean
	onBlur?: () => void;
}

const TextField = ({ value, type = "text", onChange, placeholder = "", children, onKeyUpChange, maxLength, name, showInfo, onKeyPress, onBlur, isRTL=false }: TextFieldType) => {
	const [showText, setShowText] = useState(type !== TextTypeENUM.password);
	function showTextHandler() {
		setShowText(showText => !showText);
	}
	return (
		<>
			{children && <LeftPositioned>{children}</LeftPositioned>}
			<FieldInput
				onBlur={onBlur}
				value={value ? value : ""}
				onChange={onChange}
				placeholder={placeholder}
				type={showText && (type === TextTypeENUM.password || type === TextTypeENUM.number) ? TextTypeENUM.text : type}
				onKeyUp={()=> onKeyUpChange}
				maxLength={maxLength}
				name={name}
				onKeyPress={(event: any) => {
					if (type === TextTypeENUM.number) {
						const keycode = event.which;
						if (
							!(
								event.shiftKey === false &&
								(keycode === 46 ||
									keycode === 8 ||
									keycode === 37 ||
									keycode === 39 ||
									(keycode >= 48 && keycode <= 57))
							)
						) {
							event.preventDefault();
						}
					}
					if(onKeyPress && typeof onKeyPress === "function") onKeyPress(event);
				}}
			/>
			{showInfo && <OverlayTrigger
				delayHide={200}
				overlay={showInfo}
				placement="bottom"
			>
				<CrossSection isRTL={isRTL} onClick={showTextHandler}><EncircledQuestionMark /></CrossSection>
			</OverlayTrigger>}
		</>
	);
};

export { TextField };
