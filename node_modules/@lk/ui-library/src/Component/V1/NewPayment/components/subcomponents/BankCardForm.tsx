import React, { useEffect, useState } from "react";
import styled from "styled-components";
import { TypographyENUM } from "../../../../../Types/general";
import SecureCardModal from "../../../../Common/SecureCardModal";
import { DataType } from "../../../Header/Header.types";
import Tooltip from "../../../ToolTip/Tooltip";
import { CardImage } from "../CardImage";
import { InputFieldContainer } from "../InputFieldContainer";
import { TextField } from "../TextField";
import { SelectField } from "./SelectField";
import { TextTypeENUM } from "../types";


const BankFormContainer = styled.div<{isOpen?: boolean}>`
    padding-left: 102px;
    ${props => !props.isOpen && `
        display: none;
    `}
`;
const BankForm = styled.form`
    display: flex;
    flex-direction: column;
    width: 444px;
`;
const Flex = styled.div`
    display: flex;
    justify-content: space-between;
    width: 100%;
`;
const PayNowBtn = styled.button<{font: TypographyENUM}>`
	padding: 12px 20px;
	width: 100%;
	height: 48px;
	border-radius: 100px;
	background: #11DAAC;
	color: #000042;
	cursor: pointer;
	font-family: ${props => props.font};
	font-style: normal;
	font-weight: 700;
	font-size: 16px;
	line-height: 24px;
	display: flex;
	align-items: center;
	justify-content: center;
	letter-spacing: -0.02em;
	outline: none;
	border: none;
	&:disabled,
	&[disabled] {
		color: #9999B3;
		background: #DBDBEA;
	}
	span {
		display: inline-block;
		margin-right: 10px;
	}
`;
const CheckBoxContainer = styled.div`
	display: flex;
    margin-bottom: 18px;
	& .link{
		cursor:pointer;
	}
	span {
		font-family: ${TypographyENUM.defaultMedium};
		font-style: normal;
		font-weight: 400;
		font-size: 14px;
		line-height: 20px;
		letter-spacing: -0.02em;
		color: var(--dark-blue-100);
	}
	span.link{
		font-family: ${TypographyENUM.lkSansBold};
		text-decoration: underline;
		margin-left: 5px;
	}
`;
interface BankCardFormType {
	isOpen: boolean;
	onSubmit: (...args: any) => void;
	localeData: DataType
}
const BankCardForm = ({ isOpen = false, onSubmit, localeData }: BankCardFormType) => {
	const [cardNumber, setCardNumber] = useState("");
	const [nameOnCard, setNameOnCard] = useState("");
	const [validThru, setValidThru] = useState("");
	const [cvv, setCvv] = useState("");
	const [storeCard, setStoreCard] = useState(true);

	const [cardNumberError, setCardNumberError] = useState(false);
	const [nameError, setNameError] = useState(false);
	const [validThruError, setValidThruError] = useState(false);
	const [cvvError, setCvvError] = useState(false);
	const [isSecureCardModalVisible, setSecureCardModalVisible] = useState(false);


	const cardNumberValidation = () => {
		const regx = /^[0-9]{13,18}$/; // This is the standard one /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|6(?:011|5[0-9]{2})[0-9]{12}|(?:2131|1800|35\d{3})\d{11})$/;
		regx.test(cardNumber) ? setCardNumberError(false) : setCardNumberError(true);
	};
	const nameValidation = () => {
		const len = nameOnCard ? nameOnCard.trim().length : 0;
		if (len < 1 || /\d/.test(nameOnCard)) {
			setNameError(true);
		} else {
			setNameError(false);
		}
		// const regName = /(^[A-Z][a-z]+$|^[A-Z][a-z]+ [A-Z][a-z]+$|^[A-Z][a-z]+ [A-Z][a-z]+ [A-Z][a-z]+$)/;
		// if(regName.test(nameOnCard)) setNameError(false);
		// else nameError ? "" : setNameError(true);
	};
	const validThruValidation = () => {
		// const date = validThru.slice(0, 2) + "/" + validThru.slice(2);
		// console.log(date,validThru, "DATE:=>");
		const isValidDate = /^([0-9]{2})\/([0-9]{4})$/;
		if (!validThru || !isValidDate.test(validThru)) setValidThruError(true);
		else {
			const month = validThru.toString().slice(0, 2);
			let fullyear = "20";
			const year = validThru.toString().slice(3);
			// const newyear = validThru.toString().slice(2);
			// console.log(month, year, newyear, "validThru");
			if (year.length === 2) {
				fullyear += year;
			} else {
				fullyear = year;
			}
			const today = new Date();
			const expiryDay = new Date();
			// console.log(parseInt(fullyear), parseInt(month), "Final parsed values");
			expiryDay.setFullYear(parseInt(fullyear), parseInt(month), 0);
			// console.log(expiryDay, today, month, "Last check");
			if(expiryDay < today || parseInt(month) > 12) setValidThruError(true);
			else setValidThruError(false);
		}
	};
	const cvvValidation = () => {
		/^[0-9]{3,4}$/.test(cvv) ? setCvvError(false) : setCvvError(true);
		// if(cvv.length === 3 || cvv.length === 4) setCvvError(false);
		// else cvvError ? "" : setCvvError(true);
	};

	const submitHandler = ()=>{
		cardNumberValidation();
		nameValidation();
		validThruValidation();
		cvvValidation();
		if(!cvvError && !validThruError && !nameError && !cardNumberError && storeCard && cardNumber && nameOnCard && validThru && cvv){
			onSubmit(cardNumber, nameOnCard, validThru.slice(0, 2), validThru.slice(3),cvv, storeCard);
		}
	};

	const closeSecureCardModal = ()=>{
		setSecureCardModalVisible(false);
	};

	useEffect(() => {
		if(cvv){
			cvvValidation();
		}
	}, [cvv]);
	

	return (
		<BankFormContainer isOpen={isOpen}>
			<BankForm>
				<InputFieldContainer isFullWidth={true} isError={cardNumberError} subText={cardNumberError ? "Please enter a valid card number." : ""} isBoundary={true} background="#ffffff">
					<TextField onBlur={cardNumberValidation} value={cardNumber} type={TextTypeENUM.number} onChange={(e) => setCardNumber(e.target.value)} maxLength={18} placeholder="Card Number" onKeyUpChange={() => null} showInfo={<Tooltip
						className="tooltip-custom"
						id="cardNum"
						showArrow={true}
						title="CVV"
						// title={dataLocale.TOLLTIP}
					>
						<span>
							<img
								alt="Cards"
								src="https://static.lenskart.com/media/desktop/img/cards_icon1.jpg"
								style={{ width: "150px" }}
							/>
						</span>
					</Tooltip>}>
						<CardImage src="https://w7.pngwing.com/pngs/924/607/png-transparent-mastercard-credit-card-business-debit-card-logo-mastercard-text-service-orange.png" alt="" isSelected={false} leftMargin={false} rightMargin={false} />
					</TextField>
				</InputFieldContainer>
				<InputFieldContainer isFullWidth={true} isError={nameError} subText={nameError ? "Please enter a valid Cardholder name." : ""} isBoundary={true} background="#ffffff">
					<TextField onBlur={nameValidation} value={nameOnCard} type={TextTypeENUM.text} onChange={(e) => setNameOnCard(e.target.value)} placeholder="Name on card" onKeyUpChange={() => null}
						onKeyPress={(event: any) => {
							const keycode = event.which;
							if (
								(
									event.shiftKey === false &&
										(keycode === 46 ||
											keycode === 8 ||
											keycode === 37 ||
											keycode === 39 ||
											(keycode >= 48 && keycode <= 57))
								)
							) {
								event.preventDefault();
							}
						}}
					/>
				</InputFieldContainer>
				<Flex>
					<InputFieldContainer isFullWidth={true} isError={validThruError} subText={validThruError ? "Please enter a valid expiry date." : ""} isBoundary={true} width="241px" background="#ffffff">
						<TextField onBlur={validThruValidation} value={validThru} type={TextTypeENUM.number} maxLength={7} onChange={(e) => setValidThru(e.target.value)} placeholder="Valid Thru (MM/YYYY)" onKeyUpChange={() => null}
							onKeyPress={event => {
								const valLength = event.target.value.length;
								if (valLength === 2) {
									event.target.value += "/";
								}
							}}
						/>
					</InputFieldContainer>
					<InputFieldContainer isFullWidth={true} isError={cvvError} subText={cvvError ? "Please enter a valid CVV." : ""} isBoundary={true} width="171px" background="#ffffff">
						<TextField onBlur={cvvValidation} value={cvv} type={TextTypeENUM.password} onChange={(e) => setCvv(e.target.value)} placeholder="CVV" onKeyUpChange={() => null} maxLength={4} showInfo={<Tooltip
							className="tooltip-custom"
							id="cvvIcon"
							showArrow={true}
							title="CVV"
							// title={dataLocale.TOLLTIP}
						>
							<span>
								<img
									alt="How to find cvv"
									src="https://static1.lenskart.com/media/desktop/img/cvv-icon.png"
									style={{ width: "80px" }}
								/>
							</span>
						</Tooltip>} />
					</InputFieldContainer>
				</Flex>
				<CheckBoxContainer>
					<SelectField onClick={() => setStoreCard(s => !s)} selected={storeCard} />
					<span>{localeData?.SECURE_THIS_CARD}</span> <span className="link" onClick={()=>setSecureCardModalVisible(true)}>{localeData?.LEARN_MORE}</span>
				</CheckBoxContainer>
				<PayNowBtn
					id="submit-saved-card-form-button"
					font={TypographyENUM.lkSansBold} //onDecreaseItem(item.id)
					disabled={cvvError || validThruError || nameError || cardNumberError || !storeCard || !cardNumber || !nameOnCard || !validThru || !cvv}
					onClick={submitHandler}
				>
					<span>{localeData?.PAY_NOW}</span>
				</PayNowBtn>
			</BankForm>
			<SecureCardModal id="secure-card-guidelines" isVisible={isSecureCardModalVisible} closeModal={closeSecureCardModal} localeData={localeData} />
		</BankFormContainer>
	);
};

export default BankCardForm;
