import React, { useState } from "react";
import styled from "styled-components";
import { Check } from "../../../../../Icons";
import { kindENUM, ThemeENUM, TypographyENUM } from "../../../../../Types/general";
import Button from "../../../Button";
import { DataType } from "../../../Header/Header.types";
// import CardImage from "../CardImage";
import { InputFieldContainer } from "../InputFieldContainer";
import { TextField } from "../TextField";

export enum TextTypeENUM {
	password = "password",
	text = "text",
	number = "number"
}
const StoreCreditFormContainer = styled.div<{ isOpen?: boolean }>`
	padding-left: 25px;
    ${props => !props.isOpen && `
        display: none;
    `}
`;
const StoreCredit = styled.div`
    display: flex;
    flex-direction: column;
    width: 444px;
`;
// const Flex = styled.div`
//     display: flex;
//     justify-content: space-between;
//     width: 100%;
// `;
export const InfoBox = styled.div<{ isError: boolean }>`
	display: flex;
	align-items: center;
	padding: 4px 100px 4px 8px;
	gap: 10px;
	width: 100%;
	height: 31px;
	margin-bottom: 15px;
	background: ${props => props.isError ? "#FFEBEA" : "#ECFBD3"};
	border: 1px solid ${props => props.isError ? "#E34934" : "#60B527"};
	border-radius: 4px;
	/* flex: none;
	order: 2;
	flex-grow: 0; */
`;
export const InfoCircle = styled.div`
	border: 0.666667px solid #8D2D20;
	width: 13px;
	height: 13px;
	border-radius: 50%;
    text-align: center;
    font-size: 10px;
	// display:
`;
export const InfoText = styled.span<{ isError: boolean }>`
	font-family: ${TypographyENUM.lkSansBold};
	font-style: normal;
	/* font-weight: 700; */
	font-size: 9px;
	line-height: 12px;
	text-align: center;
	text-transform: uppercase;
	color: ${props => props.isError ? "#8D2D20" : "#145607"};
`;
interface StoreCreditFormType {
	isOpen: boolean;
	onSubmit: (code: string, amount: string, isCheckout?: boolean) => Promise<DataType | undefined>,
	isRemainingAmount?: boolean,
	message?: string,
	isError?: boolean
}
const StoreCreditForm = ({ isOpen = false, onSubmit }: StoreCreditFormType) => {
	const [couponCode, setCouponCode] = useState("");
	const [couponAmount, setCouponAmount] = useState("");
	// enum StoreCreditBtnAction {
	// 	APPLY_COUPON = "APPLY_COUPON",
	// 	CHECKOUT = "CHECKOUT"
	// }
	const [state, setState] = useState({
		message: "",
		isError: false,
		btnDisabled: false,
		btnText: "Apply",
		additionalText: "",
		isCheckoutBtn: false
	});
	const submitCreditForm = (couponCode: string, couponAmount: string, isCheckout: boolean) => {
		onSubmit(couponCode, couponAmount, isCheckout)
			.then(r => {
				setState({ message: r?.message || "", isError: !!r?.isError, btnDisabled: !!r?.btnDisabled, btnText: r?.btnText || "", additionalText: r?.additionalText || "", isCheckoutBtn: !!r?.isCheckoutBtn });
			})
			.catch(err => {
				console.log(err);
			});
	};


	return (
		<StoreCreditFormContainer isOpen={isOpen}>
			<StoreCredit>
				<InputFieldContainer isFullWidth={true} isError={false} isBoundary={true}>
					<TextField value={couponCode} type={TextTypeENUM.text} onChange={e => setCouponCode(e.target.value)} placeholder="Enter code" onKeyUpChange={() => null}>
					</TextField>
				</InputFieldContainer>
				<InputFieldContainer isFullWidth={true} isError={false} isBoundary={true}>
					<TextField value={couponAmount} type={TextTypeENUM.text} onChange={e => setCouponAmount(e.target.value)} placeholder="Enter Amount" onKeyUpChange={() => null}
						onKeyPress={(event: any) => {
							const keycode = event.which;
							if (
								!(
									event.shiftKey === false &&
									(keycode === 46 ||
										keycode === 8 ||
										keycode === 37 ||
										keycode === 39 ||
										(keycode >= 48 && keycode <= 57))
								)
							) {
								event.preventDefault();
							}
						}}>
					</TextField>
				</InputFieldContainer>
				{state.message && <InfoBox isError={state.isError}>
					<InfoCircle>{state.isError ? "i" : <Check />}</InfoCircle>
					<InfoText isError={state.isError}>{state.message}</InfoText>
				</InfoBox>}
				<span>{state.additionalText}</span>
				<Button
					id="submit-store-credit-button"
					theme={ThemeENUM.primary}
					kind={kindENUM.background}
					showChildren={true}
					font={TypographyENUM.lkSansBold} //onDecreaseItem(item.id)
					width="100"
					disabled={state.btnDisabled}
					onClick={() => submitCreditForm(couponCode, couponAmount, state.isCheckoutBtn)}
				>
					{state.btnText}
				</Button>
				{/* <Flex>
					<InputFieldContainer isFullWidth={true} isError={false} isBoundary={true} width="241px">
						<TextField value="" type={TextTypeENUM.text} onChange={() => null} placeholder="Valid Thru (MM/YY)" onKeyUpChange={() => null} />
					</InputFieldContainer>
					<InputFieldContainer isFullWidth={true} isError={false} isBoundary={true} width="171px">
						<TextField value="" type={TextTypeENUM.text} onChange={() => null} placeholder="CVV" onKeyUpChange={() => null} showInfo />
					</InputFieldContainer>
				</Flex> */}
			</StoreCredit>
		</StoreCreditFormContainer>
	);
};

export default StoreCreditForm;
