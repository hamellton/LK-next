import React, { useEffect, useState } from "react";
import styled from "styled-components";
import { DataType, TypographyENUM } from "../../../../../Types/general";

const BankFormContainer = styled.div`
    padding: 30px;
	border: 1px solid #ebebeb;
`;
const BankForm = styled.div<{centerAlign?: boolean}>`
    display: flex;
    flex-direction: column;
	${props => props?.centerAlign && "align-items: center;"}
    /* width: 444px; */
    > p {
        font-family: ${TypographyENUM.lkSansRegular};
        font-style: normal;
        font-weight: 400;
        font-size: 12px;
        line-height: 14px;
        letter-spacing: -0.02em;
        color: #000042;
    }
`;

const QRCodeContainer = styled.div`
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
`;
const QrviewImage = styled.img`
    display: block;
    width: 173px;
    margin: 20px;
    height: 200px;
    /* background: url(https://static.lenskart.com/media/desktop/img/QRBackground.png) no-repeat 50% 50%; */
`;
const QrMainHeadText = styled.h2`
	font-family: ${TypographyENUM.defaultMedium};
	font-style: normal;
	font-weight: 400;
	font-size: 20px;
	line-height: 18px;
	letter-spacing: -0.02em;
	color: #333;
`;
const QrSubHeadText = styled.p`
	font-family: ${TypographyENUM.lkSansMedium};
	font-style: normal;
	font-weight: 400;
	font-size: 10px;
	line-height: 14px;
	letter-spacing: -0.02em;
	color: #333368;
`;
const QrAmountInfo = styled.h2`
	font-family: ${TypographyENUM.defaultBook};
	font-style: normal;
	/* font-weight: 700; */
	font-size: 14px;
	line-height: 20px;
	letter-spacing: -0.02em;
    line-height: 29px;
    color: #f18131;
    font-size: 22px;
`;
const QrExpiry = styled.p`
	font-family: ${TypographyENUM.lkSansMedium};
	font-style: normal;
	font-weight: 400;
	font-size: 10px;
	line-height: 14px;
	letter-spacing: -0.02em;
	color: #737397;
`;

const BottomContainer = styled.div`
	display: flex;
	flex-direction: column;
	align-items: center;
	gap: 10px;
`;

const PayNowBtn = styled.button<{font: TypographyENUM}>`
	padding: 12px 20px;
	width: 100%;
	height: 48px;
	border-radius: 100px;
	background: #11DAAC;
	color: #000042;
	cursor: pointer;
	font-family: ${TypographyENUM.lkSansBold};
	font-style: normal;
	font-weight: 700;
	max-width: 233px;
	font-size: 16px;
	line-height: 24px;
	display: flex;
	align-items: center;
	justify-content: center;
	letter-spacing: -0.02em;
	outline: none;
	border: none;
`;

const Line = styled.div`
width: 50%;
position: relative;
top: -15px;
border-top: 1px solid #ebebeb;
`;

const QrText = styled.span`
display: flex;
flex-direction: column;
align-items: center;
line-height: 26px;
color: #999999;
font-size: 16px;
margin: 20px;
margin-bottom: 0;
width: 100%;
`;

const QrLowerBody = styled.div`
display: flex;
flex-direction: column;
align-items: center;
`;

const Span = styled.span<{background?: boolean}>`
	${props => props?.background && "z-index: 1;background-color: white;padding: 0 8px;"}
`;

const QrView = ({ qrAmount, qrCode, currencySymbol = "â‚¹", triggerQrStatus, qrTimer, handleOnCancelClick, localeData, timeExpiryCallback }: {qrCode: string, qrAmount: string, currencySymbol: string, triggerQrStatus: () => void, qrTimer: number, qrExpired?: boolean, handleOnCancelClick: () => void, localeData: DataType, timeExpiryCallback: ()=> void}) => {
	useEffect(() => {
		// if(typeof triggerQrTimer === "function") triggerQrTimer();
		triggerQrStatus();
		startTimer();
	}, []);
	

	const [time, setTime] = useState(qrTimer);
	useEffect(() => {
		let interval: any = null;

		interval = setInterval(() => {
			
			
			setTime((prevTime) => {
				if (prevTime > 0) {
					return prevTime - 1;
				} else {
					clearInterval(interval);
					timeExpiryCallback && timeExpiryCallback();
					return 0;
				}
			});
		}, 1000);

		return () => {
			clearInterval(interval);
		};
	}, [time]);

	const startTimer = () => {
		setTime((prevTime) => {
			if (prevTime > 0) {
				return prevTime;
			} else {
				return qrTimer;
			}
		});
	};

	const formatTime = (time: number) => {
		const minutes = Math.floor(time / 60);
		const seconds = time % 60;
		return `${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
	};

	return (
		<BankFormContainer>
			<BankForm centerAlign>
				<QrMainHeadText>{localeData?.SCAN_BELOW_QR_CODE_TO_PAY_USING || "Scan below QR code to pay using"}</QrMainHeadText>
				<QrText>
					<Span>{localeData?.GPAY_PHONEPE_PAYTM}</Span>
					<Span background>{localeData?.OR || "OR"}</Span>
					<Line/>
					<Span>{localeData?.ANY_BHIM_UPI_QR_CODE_SCANNER}</Span>
				</QrText>
				<QrSubHeadText></QrSubHeadText>
				<QRCodeContainer>
					<QrviewImage alt="QR" src={`data:image/png;base64,${qrCode}`} />
					{/* <PayNowBtn onClick={onSubmit} font={TypographyENUM.lkSansMedium}>Generate QR Code</PayNowBtn> */}
				</QRCodeContainer>
				<BottomContainer>
					<QrLowerBody>
						<QrAmountInfo>{localeData?.TOTAL_AMOUNT || "Total amount"} {currencySymbol} {qrAmount}</QrAmountInfo>
						<QrExpiry>{localeData?.THIS_CODE_WILL_EXPIRE_IN || "This code will expire in:"} {`${formatTime(time)}`}</QrExpiry>
					</QrLowerBody>
					<PayNowBtn onClick={handleOnCancelClick} font={TypographyENUM.lkSansMedium}>{localeData?.CANCEL || "Cancel"}</PayNowBtn>
				</BottomContainer>
				{/* <p>{`${qrTimer/60 > 10 ? Math.floor(qrTimer/60) : `0${Math.floor(qrTimer/60)}`}:${qrTimer%60 > 10 ? qrTimer%60 : `0${qrTimer%60}`}`}</p> */}
				{/* <p>{qrExpired ? "Expired" : "Not expired"}</p> */}
			</BankForm>
		</BankFormContainer>
	);
};

export { QrView };


