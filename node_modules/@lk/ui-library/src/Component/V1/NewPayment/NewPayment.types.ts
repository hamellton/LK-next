import { DataType } from "../Header/Header.types";

export interface CashOnDeliveryType extends CardWalletDataType {
  isCaptchaEnabled?: boolean;
  captchaImageUrl?: string;
  captchaValue?: string;
  loadCaptcha?: () => void;
}
export type CardDataType =
  | {
      cardType: CardTypeENUM.STORE_CREDIT;
      data: StoreCreditDataType;
      disabled?: boolean;
      isWallet?: boolean;
      isRTL?: boolean;
      localeData: DataType;
      isContactLensCheckboxChecked: boolean;
      setIsContactLensCheckboxChecked: (arg: boolean)=>void;
      orderCreatedSuccess?: boolean;
      setRedirect?: (arg: boolean)=>void;
      setSectedPrimerCreditCard?: (arg: boolean)=>void;
      aeDesigns?: boolean,
      configData: DataType
    }
  | {
      cardType: CardTypeENUM.BANK_OFFERS;
      data: BankOffersDataType;
      disabled?: boolean;
      isWallet?: boolean;
      isRTL?: boolean;
      localeData: DataType;
      isContactLensCheckboxChecked: boolean;
      setIsContactLensCheckboxChecked: (arg: boolean)=>void;
      orderCreatedSuccess?: boolean;
      setRedirect?: (arg: boolean)=>void;
      setSectedPrimerCreditCard?: (arg: boolean)=>void;
      aeDesigns?: boolean
      configData: DataType

    }
  | {
      cardType: CardTypeENUM.CARD_WALLETS;
      data: CardWalletDataType;
      disabled?: boolean;
      isWallet?: boolean;
      isRTL?: boolean;
      localeData: DataType;
      isContactLensCheckboxChecked: boolean;
      setIsContactLensCheckboxChecked: (arg: boolean)=>void;
      orderCreatedSuccess?: boolean;
      setRedirect?: (arg: boolean)=>void;
      setSectedPrimerCreditCard?: (arg: boolean)=>void;
      configData: DataType
      aeDesigns?: boolean
    }
  | {
      cardType: CardTypeENUM.SAVED_CARD;
      data: SavedCardDataType;
      disabled?: boolean;
      isWallet?: boolean;
      isRTL?: boolean;
      localeData: DataType;
      isContactLensCheckboxChecked: boolean;
      setIsContactLensCheckboxChecked: (arg: boolean)=>void;
      orderCreatedSuccess?: boolean;
      setRedirect?: (arg: boolean)=>void;
      setSectedPrimerCreditCard?: (arg: boolean)=>void;
      configData: DataType
      aeDesigns?: boolean
    }
  | {
      cardType: CardTypeENUM.UPI;
      data: CardWalletDataType;
      disabled?: boolean;
      isWallet?: boolean;
      isRTL?: boolean;
      localeData: DataType;
      isContactLensCheckboxChecked: boolean;
      setIsContactLensCheckboxChecked: (arg: boolean)=>void;
      orderCreatedSuccess?: boolean;
      setRedirect?: (arg: boolean)=>void;
      setSectedPrimerCreditCard?: (arg: boolean)=>void;
      configData: DataType
      aeDesigns?: boolean
    }
  | {
      cardType: CardTypeENUM.UPI_QR;
      data: CardWalletDataType;
      disabled?: boolean;
      isWallet?: boolean;
      isRTL?: boolean;
      localeData: DataType;
      isContactLensCheckboxChecked: boolean;
      setIsContactLensCheckboxChecked: (arg: boolean)=>void;
      orderCreatedSuccess?: boolean;
      setRedirect?: (arg: boolean)=>void;
      setSectedPrimerCreditCard?: (arg: boolean)=>void;
      configData: DataType
      aeDesigns?: boolean
    }
  | {
      cardType: CardTypeENUM.CASH_ON_DELIVERY;
      data: CashOnDeliveryType;
      disabled?: boolean;
      isWallet?: boolean;
      isRTL?: boolean;
      localeData: DataType;
      isContactLensCheckboxChecked: boolean;
      setIsContactLensCheckboxChecked: (arg: boolean)=>void;
      orderCreatedSuccess?: boolean;
      setRedirect?: (arg: boolean)=>void;
      setSectedPrimerCreditCard?: (arg: boolean)=>void;
      configData: DataType
      aeDesigns?: boolean
    }
  | {
      cardType: CardTypeENUM.PAYMENT_CARD;
      data: PrimerCardDataType;
      disabled?: boolean;
      isWallet?: boolean;
      isRTL?: boolean;
      localeData: DataType;
      isContactLensCheckboxChecked: boolean;
      setIsContactLensCheckboxChecked: (arg: boolean)=>void;
      orderCreatedSuccess?: boolean;
      setRedirect?: (arg: boolean)=>void;
      setSectedPrimerCreditCard: (arg: boolean)=>void;
      configData: DataType
      aeDesigns?: boolean
    }
  | {
      cardType: CardTypeENUM.PAY_LATER;
      data: PrimerCardDataType;
      disabled?: boolean;
      isWallet?: boolean;
      isRTL?: boolean;
      localeData: DataType;
      isContactLensCheckboxChecked: boolean;
      setIsContactLensCheckboxChecked: (arg: boolean)=>void;
      orderCreatedSuccess: boolean;
      setRedirect: (arg: boolean)=>void;
      setSectedPrimerCreditCard: (arg: boolean)=>void;
      configData: DataType
      aeDesigns?: boolean
  } | {
    cardType: CardTypeENUM.GRABPAY;
    data: PrimerCardDataType;
    disabled?: boolean;
    isWallet?: boolean;
    isRTL?: boolean;
    localeData: DataType;
    isContactLensCheckboxChecked: boolean;
    setIsContactLensCheckboxChecked: (arg: boolean)=>void;
    orderCreatedSuccess: boolean;
    setRedirect: (arg: boolean)=>void;
    setSectedPrimerCreditCard: (arg: boolean)=>void;
    configData: DataType
    aeDesigns?: boolean
};

export enum CardTypeENUM {
    STORE_CREDIT = "STORE CREDIT",
    BANK_OFFERS = "BANK OFFERS",
    CARD_WALLETS = "CARD WALLETS",
    UPI = "UPI",
    UPI_QR = "UPI QR",
    SAVED_CARD = "SAVED CARD",
    CASH_ON_DELIVERY = "CASH ON DELIVERY",
    PAYMENT_CARD = "PAYMENT_CARD",
    PAY_LATER = "PAY_LATER",
    GRABPAY = "GRABPAY"
  }
export interface StoreCreditDataType {
    head: string;
    text: string;
    onSelect: () => void;
    selectText: string;
    isChildrenVisible: boolean;
    onSubmit: (...args: any) => Promise<DataType | undefined>;
    isRemainingAmount: boolean;
    message: string;
    isError: boolean;
    dottedBtmBorder: boolean;
    dottedTopBorder: boolean;
    children: React.ReactNode;
  }
export interface BankOffersDataType {
    head: string;
    offers: string[];
    onShowMore: () => void;
    showAll: boolean;
  }
export interface CardWalletDataType {
    img: string;
    head: string;
    text: string;
    onSelect: () => void;
    isChildrenVisible: boolean;
    children: React.ReactNode;
    onSubmit: (...args: any) => void;
    code: string;
    key: string;
    dottedTopBorder: boolean;
    dottedBtmBorder: boolean;
    paymentMethod: string;
    gatewayId: string;
    banks?: { [name: string]: any }[];
    offers?: string[];
  }

export interface PrimerCardDataType {
    isContactLensConsentEnabled: boolean | undefined;
    img: string;
    head: string;
    text: string;
    onSelect: (willRenderPrimerUI?: boolean) => void;
    isChildrenVisible: boolean;
    children: React.ReactNode;
    onSubmit: (...args: any) => void;
    code: string;
    key: string;
    dottedTopBorder: boolean;
    dottedBtmBorder: boolean;
    paymentMethod: string;
    gatewayId: string;
    banks?: { [name: string]: any }[];
    offers?: string[];
	offerText?: string,
    // showCaptcha: boolean
    // enabled: boolean
    label: string;
    payLaterAllowed: boolean | undefined;
    isContactLensCheckboxChecked: boolean;
    setIsContactLensCheckboxChecked: ()=> void;
  }
export interface SavedCardDataType {
    cardBrand: string;
    cardMode: string;
    cardToken: string;
    cardType: string;
    expired: boolean;
    expiryMonth: string;
    expiryYear: string;
    nameOnCard: string;
    number: string;
    storeCard: boolean;
    dottedTopBorder: boolean;
    dottedBtmBorder: boolean;
    head: string;
    text: string;
    img: string;
    isChildrenVisible: boolean;
    onSelect: () => void;

    onSubmit: (cvv: string, cardToken: string) => void;
  }
