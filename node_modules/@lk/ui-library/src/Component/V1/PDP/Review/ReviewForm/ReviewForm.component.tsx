import React, { useEffect, useState } from "react";
import { ComponentSizeENUM, ThemeENUM, TypographyENUM } from "../../../../../Types/general";
import { FormInput } from "../../../../Common/Input/Input.component";
import PrimaryButton from "../../../../Common/PrimaryButton";
import FormTextarea from "../../../../Common/Textarea";
import { Rating } from "../../../../Common/Rating/Rating.component";
import { ReviewFormType } from "./ReviewForm.types";
import { Form, FormActionWrapper, RatingLabel, FormTitle, RatingWrapper, InputWrapper, ReviewFormWrapper, SuccessMessage, ErrorMessage, Error, ReviewLoader } from "./ReviewForm.styles";

const ReviewForm = ({
	id= "review-form",
	loaderUrl = "https://static.lenskart.com/media/desktop/img/loader-lk.gif",
	dataLocale= {
		HOW_WOULD_YOU_RATE_PRODUCT: "How would you rate the product?",
		WRITE_A_REVIEW: "Write A Review",
		ENTER_EMAIL_ID: "Enter Email Id",
		YOUR_NAME: "Your Name",
		TITLE: "Title",
		REVIEW: "Review",
		POST_REVIEW: "POST REVIEW",
		THIS_FIELD_IS_REQUIRED: "This Field is Required",
	},
	font=TypographyENUM.defaultBook,
	reviewMessage,
	formValidation = () => console.log("submit"),
	errorMessage,
	apiFailMessage,
	reviewLoading,
	onSubmit= () => console.log("submit"),
	isRTL= false }:ReviewFormType) => {
	const [rating, setRating] = useState(0);
	const [emailData, setEmailData] = useState(" ");
	const [name, setName] = useState(" ");
	const [title, setTitle] = useState(" ");
	const [review, setReview] = useState(" ");
	const [active, setActive] = useState(false);

	const submitForm = (e:React.FormEvent<HTMLFormElement>) => {
		e.preventDefault();
		onSubmit({ email: emailData, review: { noOfStars: `${rating}`, reviewDetail: review, reviewTitle: title, reviewee: name } });
	};

	useEffect(() => {
		if(name || title || emailData || review){
			setActive(true);
		}
	}, [name, title, emailData, review]);

	useEffect(()=>{
		if(active){
			formValidation({ name });
		}
	},[name]);

	useEffect(()=>{
		if(active){
			formValidation({ emailData });
		}
	},[ emailData]);

	useEffect(()=>{
		if(active){
			formValidation({ title });
		}
	},[ title]);


	useEffect(()=>{
		if(active){
			formValidation({ review });
		}
	},[ review]);

	// useEffect(() => {
	// 	if(!rating && errorMessage?.noOfStars && fadeOut){
	// 		// setFadeOut(true);
	// 		setTimeout(() => {
	// 			setFadeOut(false);
	// 		}, 1500);
	// 	}
	// }, [rating, errorMessage?.noOfStars, fadeOut]);
	
	
	return (
		<ReviewFormWrapper id={id} styleFont={font}>
			<FormTitle>{dataLocale.WRITE_A_REVIEW}</FormTitle>
			{reviewMessage ? <SuccessMessage>
				{reviewMessage}
			</SuccessMessage> :
				<>
					<Form onSubmit={submitForm}>
						<RatingWrapper>
							<RatingLabel isRTL={false}>{dataLocale.HOW_WOULD_YOU_RATE_PRODUCT}</RatingLabel>
							{apiFailMessage ? <ErrorMessage> <Error>Error!</Error> {apiFailMessage}</ErrorMessage> : null}
							{!rating && errorMessage?.noOfStars && /*fadeOut &&*/ !apiFailMessage ? <ErrorMessage> <Error>Error!</Error> Please provide us rating</ErrorMessage> : null}
							<Rating isRTL={isRTL} isReadOnly={false} id="rating" rating={rating} maxRating={5} componentSize={ComponentSizeENUM.large} onStarsChange={(r) => setRating(r)}></Rating>
						</RatingWrapper>
						<InputWrapper>
							<FormInput hasError={Boolean(errorMessage?.email)} errorMessage={errorMessage?.email ? errorMessage?.email : null} font={font} type="text" dir="auto" label={dataLocale.ENTER_EMAIL_ID} width="100%" componentSize={ComponentSizeENUM.medium} onValueChange={e => setEmailData(e.target.value)} isRTL={isRTL}/>
							{/* <FormInputError>{dataLocale.THIS_FIELD_IS_REQUIRED}</FormInputError> */}
						</InputWrapper>
						<InputWrapper>
							<FormInput hasError={Boolean(errorMessage?.name)} errorMessage={errorMessage?.name ? errorMessage?.name : null} font={font} type="text" dir="auto" label={dataLocale.YOUR_NAME} width="100%" componentSize={ComponentSizeENUM.medium} onValueChange={e => setName(e.target.value)} isRTL={isRTL}/>
						</InputWrapper>
						<InputWrapper>
							<FormInput hasError={Boolean(errorMessage?.title)} errorMessage={errorMessage?.title ? errorMessage?.title : null} font={font} type="text" dir="auto" label={dataLocale.TITLE} width="100%" componentSize={ComponentSizeENUM.medium} onValueChange={e => setTitle(e.target.value)} isRTL={isRTL}/>
						</InputWrapper>
						<InputWrapper>
							<FormTextarea error={errorMessage?.reviewDetail ? true : false} errorMessage={errorMessage?.reviewDetail} value="" label={dataLocale.REVIEW} width="100%" componentSize={ComponentSizeENUM.medium} onChange={e => setReview(e.target.value)} isRTL={isRTL} />
						</InputWrapper>
						<FormActionWrapper hide={reviewLoading}>
							<PrimaryButton disabled={!(name || title || emailData || review)} onBtnClick={() => null} /*onBtnClick={() => setFadeOut(true)}*/ theme={ThemeENUM.primary} font={font} componentSize={ComponentSizeENUM.medium} id="btn-post-review" width="140px" primaryText={dataLocale.POST_REVIEW} height="46px"/>
						</FormActionWrapper>
					</Form>
					{reviewLoading ? <ReviewLoader><img
						alt="Loading"
						src={loaderUrl}
						title="Loading"
					/></ReviewLoader> : null}
				</>

			}

		</ReviewFormWrapper>
	);
};

export { ReviewForm };
