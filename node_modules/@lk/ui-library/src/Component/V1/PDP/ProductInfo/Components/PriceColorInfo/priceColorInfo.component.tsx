import React from "react";
import { ComponentSizeENUM, DeviceTypes, ThemeENUM, TypographyENUM } from "../../../../../../Types/general";
import Pricing from "../../../../../Common/Price/Price.component";
import Swatch from "../../../../../Common/Swatch/Swatch.component";
import { ColorOptionsContainer, DeliveryText, ExchangeText, PriceColorWrapper, PriceWrapper, ProductExtraDetail } from "./priceColorInfo.styles";
import { PriceColorInfoType } from "./priceColorInfo.types";


const PriceColorInfo = ({ taxInclusivePrice, price, font=TypographyENUM.defaultBook, InfoText="Frame + Lens", swatchOptions, isRTL=false, isExchangeFlow, classification, pid, deviceType, desktopPriceFontBold, showDelivery, locale, showPostPay, triggerCtaGA }: PriceColorInfoType) => {
	return (
		<PriceColorWrapper>
			<PriceWrapper isRTL={isRTL}>
				<Pricing id= "price"
					isDiscountPriceBigger={true}
					finalPriceColor="var(--turquoise)"
					actualPrice= {price.basePrice}
					finalPrice= {price.lkPrice}
					isMobileView={deviceType === DeviceTypes.MOBILE}
					hasSpecialPrice= {(price.lkPrice === 0 || price.lkPrice === price.basePrice) ? false : true}
					componentSize={ComponentSizeENUM.large}
					font= {font}
					strikeThroughColor= "var(--serene-gray)"
					actualPriceColor= "var(--serene-gray)"
					styleTheme={ThemeENUM.primary}
					currencyCode= {price.symbol}
					isRTL={isRTL}
					isGridView={false}
					desktopPriceFontBold={desktopPriceFontBold}
					taxInclusivePrice={taxInclusivePrice}
					dataLocale={locale}
				></Pricing>
			</PriceWrapper>
			{isExchangeFlow && <ExchangeText>EXCHANGE PRICE</ExchangeText>}
			{showPostPay && <div 
				className="postpay-widget"
				data-amount={Number(price.lkPrice) * 100}
				data-currency={price.symbol}
				data-locale="en"
				data-num-instalments={3}
				data-type="product"></div>}
			{InfoText !== "" && <ProductExtraDetail isRTL={false}>{InfoText}</ProductExtraDetail>}
			{classification !== "loyalty_services" && (<ColorOptionsContainer isRTL={false}>
				<Swatch id="product-swatch"
					hoverRotate={true}
					selectedIndexColor="var(--dark-blue-100)"
					selectedIndex={swatchOptions?.findIndex(op => op.id === pid) || 0}
					colors={swatchOptions}
					componentSize={ComponentSizeENUM.large}
					isRTL={false}
					triggerCTAGA={()=>triggerCtaGA("color-options","product-detail-page")}
				></Swatch>
			</ColorOptionsContainer>)}
			{showDelivery && (
				<DeliveryText>
					{classification === "contact_lens" ? locale.DELIVERY_CONTACT_LENSES : locale.DELIVERY_FRAME}
				</DeliveryText>
			)}
		</PriceColorWrapper>
	);
};

export default PriceColorInfo;


