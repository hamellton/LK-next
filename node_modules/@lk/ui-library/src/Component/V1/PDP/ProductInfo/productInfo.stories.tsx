import { ComponentMeta, ComponentStory } from "@storybook/react";
import React from "react";
import styled from "styled-components";
import { generateArgTypes } from "../../../../StorybookHelper";
import { ComponentSizeENUM, TypographyENUM } from "../../../../Types/general";
import { ProductInfo } from "./productInfo.component";
import { addToCartButtonsData, colorOptionsData, priceData } from "./stories-data";

const ElementWrapper = styled.div`
	width: 60%;
`;

export default {
	title: "components/v1/PDP/ProductInfo",
	component: ProductInfo,
	argTypes: {
		id: generateArgTypes({
			type: "string",
			required: true,
			description: "Unique component id",
			category: "General",
			defaultValue: 146284
		}),
		componentSize: generateArgTypes({
			type: "string",
			required: false,
			description: "Size of the component",
			category: "General",
			defaultValue: ComponentSizeENUM.small,
			control: "radio",
			options: ComponentSizeENUM,
		}),
		font: generateArgTypes({
			type: "string",
			required: true,
			description: "Typography of the component",
			category: "General",
			defaultValue: TypographyENUM.serif,
			control: "select",
			options: TypographyENUM,
		}),
		pid: generateArgTypes({
			type: "number",
			required: true,
			description: "Unique product id",
			category: "Component",
			defaultValue: 146284
		}),
		productName: generateArgTypes({
			type: "string",
			required: true,
			description: "Name of the Product",
			category: "Component",
			defaultValue: "Grey Transparent Full Rim Wayfarer Eyeglasses",
		}),
		productBrand: generateArgTypes({
			type: "string",
			required: true,
			description: "Brand Info of Product",
			category: "Component",
			defaultValue: "Lenskart Air",
		}),
		sizeText: generateArgTypes({
			type: "string",
			required: true,
			description: "Product Size",
			category: "Component",
			defaultValue: "Wide",
		}),
		InfoText: generateArgTypes({
			type: "string",
			required: true,
			description: "Product Info Text",
			category: "Component",
			defaultValue: "Frame + Lens",
		}),
		locale: generateArgTypes({
			type: "object",
			required: true,
			description: "Static Text",
			category: "Component",
			control: "object",
		}),
		wishListSelected: generateArgTypes({
			type: "boolean",
			required: true,
			description: "Boolean to show wishlist selected",
			category: "Component",
			defaultValue: false,
		}),
		showTryOn: generateArgTypes({
			type: "boolean",
			required: true,
			description: "Boolean to show try on button",
			category: "Component",
			defaultValue: false,
		}),
		price: generateArgTypes({
			type: "object",
			required: true,
			description: "Price Info",
			category: "Items",
			control: "object",
		}),
		colorOptions: generateArgTypes({
			type: "array",
			required: true,
			description: "Color Options",
			category: "Items",
			control: "array",
		}),
		onButtonClick: generateArgTypes({
			type: "function",
			required: false,
			description: "onClick handler for button",
			category: "Events",
		}),
		onTryOnClick: generateArgTypes({
			type: "function",
			required: false,
			description: "onClick handler for try on button",
			category: "Events",
		}),
		triggerWishlist: generateArgTypes({
			type: "function",
			required: true,
			description: "Trigger add to/remove from wishlist functionality",
			category: "Events"
		}),
		isRTL: generateArgTypes({
			type: "boolean",
			required: true,
			description: "Show right to left",
			category: "Status"
		})
	}
} as ComponentMeta<typeof ProductInfo>;

const Template: ComponentStory<typeof ProductInfo> = (args) => (<ElementWrapper><ProductInfo {...args} /></ElementWrapper>);

export const Overview = Template.bind({});
Overview.args = {
	id: "product-details",
	pid: 146284,
	componentSize: ComponentSizeENUM.medium,
	font: TypographyENUM.defaultBook,
	productName:"Grey Transparent Full Rim Wayfarer Eyeglasses",
	productBrand:"Lenskart Air",
	price: priceData(),
	colorOptions: colorOptionsData(),
	sizeText:"Wide",
	InfoText:"Frame + Lens",
	locale:{
		"SIZE": "Size",
	},
	showTryOn: true,
	wishListSelected: false,
	addToCartButtons: addToCartButtonsData(),
	onButtonClick: () => console.log("working"),
	onTryOnClick: () => console.log("on try on button click"),
	triggerWishlist: () => console.log("added to wishlist"),
};

export const AddOnlyFrame = Template.bind({});
AddOnlyFrame.args = {
	...Overview.args,
	addToCartButtons: [
		addToCartButtonsData()[0]
	],
};

export const WishListSelected = Template.bind({});
WishListSelected.args = {
	...Overview.args,
	wishListSelected: true,
};

export const hideTryOn = Template.bind({});
hideTryOn.args = {
	...Overview.args,
	showTryOn: false
};
