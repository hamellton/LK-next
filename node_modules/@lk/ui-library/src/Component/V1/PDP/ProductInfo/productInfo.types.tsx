import { ComponentSizeENUM, DataType, DeviceTypes, TypographyENUM } from "../../../../Types/general";
import { PriceType } from "../../../Types/price.types";
import { SwatchOptionType } from "../../../Types/swatchOptions.types";
import { AddToCartButtonItemType } from "./Components/ActionButtons/actionButtons.types";

export interface ProductDetailsType{
	type?: string;
	id: string,
	pid: number;
	componentSize: ComponentSizeENUM,
	font: TypographyENUM,
	wishListSelected: boolean
	showTryOn: boolean,
	productName:string;
	productBrand:string;
	price: PriceType;
	colorOptions: SwatchOptionType[];
	InfoText:string
	sizeText:string;
	locale:DataType;
	addToCartButtons: AddToCartButtonItemType[],
	onButtonClick: (onlyLens: boolean, withPower: boolean, qty?: string) => void,
	onTryOnClick?: () => void,
	triggerWishlist: (pid: number) => void;
	isRTL: boolean;
	showInfo: boolean,
	onInfoClick: () => void,
	isExchangeFlow?: boolean
	classification?: string;
	deviceType: DeviceTypes
	desktopPriceFontBold?: boolean
	isCygnusEnabled: boolean
	showDelivery: boolean;
	showPostPay: boolean;
	offerDetails:OfferDetails;
	showOfferBanner:boolean;
	isLoading: boolean;
	triggerCtaGA: (cta_name: string, cta_flow_and_page: string)=>void;
	taxInclusivePrice: number | undefined;
	enableQtyInput?: boolean
}

export interface OfferDetails {
	offerImage: string;
    stickyOfferImage: string;
    headline1: string;
    headline2: string;
    icon: string;
    isMobile:boolean;
    offerPrice: number;
    colorCode: string;
    showTax: boolean;
    shimmer: boolean;
}