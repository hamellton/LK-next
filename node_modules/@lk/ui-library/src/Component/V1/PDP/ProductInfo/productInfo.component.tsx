import React, { useState } from "react";
import { Heart, HeartFilled } from "../../../../Icons";
import { ProductDetailsType } from "./productInfo.types";
import {
	ProductDetailsContainer,
	ProductDetailsHeader,
	IconWrapper } from "./productInfo.styles";
import BasicDetails from "./Components/BasicDetails/basicDetails.component";
import PriceColorInfo from "./Components/PriceColorInfo/priceColorInfo.component";
import ActionButtons from "./Components/ActionButtons/actionButtons.component";
import OfferDisplay from "./Components/OfferDisplay/offerDisplay.component";
import { QtyInputPanel } from "./Components/QtyInputPanel/qtyInput.component";

const ProductInfo = ({
	id,
	pid,
	locale,
	productBrand,
	productName,
	sizeText,
	wishListSelected,
	showTryOn,
	price,
	InfoText,
	colorOptions,
	addToCartButtons,
	onTryOnClick,
	triggerWishlist,
	onButtonClick,
	font,
	isRTL = false,
	// showInfo = true,
	onInfoClick,
	isExchangeFlow,
	classification,
	deviceType,
	desktopPriceFontBold = false,
	isCygnusEnabled,
	showDelivery,
	showPostPay,
	offerDetails,
	showOfferBanner,
	isLoading,
	triggerCtaGA,
	taxInclusivePrice,
	enableQtyInput
}:ProductDetailsType) => {
	const { headline1,headline2,icon } = offerDetails;
	const [customProductQty, setCustomProductQty] = useState("1");
	return (
		<ProductDetailsContainer id={id} styleFont={font}>
			<ProductDetailsHeader isRTL={false}>
				<BasicDetails font={font} brandName={productBrand} productName={productName} size={`${locale.SIZE} : ${sizeText}`} onInfoClick={onInfoClick}/>
				<IconWrapper styleSelected={wishListSelected}>
					{wishListSelected ? <HeartFilled fill="red" onClick={() => triggerWishlist(pid)}/> :<Heart onClick={() => triggerWishlist(pid)} width="1.8em" height="1.8em" className="wishlist-icon"/>}
				</IconWrapper>
			</ProductDetailsHeader>
			<PriceColorInfo taxInclusivePrice={taxInclusivePrice} showDelivery={showDelivery} desktopPriceFontBold={desktopPriceFontBold} deviceType={deviceType} font={font} price={price} InfoText={InfoText} swatchOptions={colorOptions} isRTL={isRTL} isExchangeFlow={isExchangeFlow} classification={classification} pid={pid} locale={locale} showPostPay={showPostPay} triggerCtaGA={triggerCtaGA}/>
			{
				enableQtyInput && 
				<QtyInputPanel labelText={locale?.QTY} setCustomProductQty={setCustomProductQty} customProductQty={customProductQty} />
			}
			{showOfferBanner && !isLoading && Object.keys(offerDetails || {}).length >0 && <OfferDisplay headline1={headline1} headline2={headline2} icon={icon}/>}
			<ActionButtons isCygnusEnabled={isCygnusEnabled} font={font} addToCartButtons={addToCartButtons} onButtonClick={onButtonClick} onTryOnClick={onTryOnClick} showTryOn={showTryOn} isRTL={isRTL} locale={locale} customProductQty={ enableQtyInput ? customProductQty:""} />
		</ProductDetailsContainer>
	);

};

export { ProductInfo };
