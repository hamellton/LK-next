import { ComponentMeta, ComponentStory } from "@storybook/react";
import React from "react";
// import { generateArgTypes } from "../../../../../StorybookHelper";
// import { ComponentSizeENUM, CurrencyType, TypographyENUM } from "../../../../../Types/general";
import { CurrencySymbol } from "../../../../Types/price.types";
import ProductDetailsMobile from "./ProductDetailsMobile";

export default {
	title: "Components/V1/PDP/mobile/ProductDetailsMobile",
	component: ProductDetailsMobile,
	argTypes:{
		// productName: generateArgTypes({
		// 	type: "string",
		// 	required: false,
		// 	description: "Product Name",
		// 	category: "General",
		// }),
		// purchaseCount: generateArgTypes({
		// 	type: "number",
		// 	required: false,
		// 	description: "no of products purchased",
		// 	category: "General",
		// }),
		// displaySubname: generateArgTypes({
		// 	type: "string",
		// 	required: false,
		// 	description: "Full name of the product",
		// 	category: "General",
		// }),
		// suitedFor: generateArgTypes({
		// 	type: "string",
		// 	required: false,
		// 	description: "product is suited for ? kids or adults",
		// 	category: "General",
		// }),
		// supportedPowers: generateArgTypes({
		// 	type: "string",
		// 	required: false,
		// 	description: "powers supported",
		// 	category: "General",
		// }),
		// frameWidth: generateArgTypes({
		// 	type: "string",
		// 	required: false,
		// 	description: "frame Width",
		// 	category: "General",
		// }),
		// frameSize: generateArgTypes({
		// 	type: "string",
		// 	required: false,
		// 	description: "frame Size",
		// 	category: "General",
		// }),
		// rating: generateArgTypes({
		// 	type: "number",
		// 	required: false,
		// 	description: "average rating of the product",
		// 	category: "General"
		// }),
		// componentSize: generateArgTypes({
		// 	type: "string",
		// 	required: false,
		// 	description: "size of the components, rating etc",
		// 	category: "General",
		// 	options: ComponentSizeENUM
		// }),
		// maxRating: generateArgTypes({
		// 	type: "number",
		// 	required: false,
		// 	description: "max number rating of the product",
		// 	category: "General"
		// }),
		// noOfReviews: generateArgTypes({
		// 	type: "number",
		// 	required: false,
		// 	description: "total number of reviews",
		// 	category: "General"
		// }),
		// price: generateArgTypes({
		// 	type: "object",
		// 	required: false, 
		// 	description: "price details of product, lkprice, baseprice, currency..", 
		// 	category: "General"
		// }),
		// font: generateArgTypes({
		// 	type: "string",
		// 	required: false,
		// 	description: "font style of component",
		// 	category: "General",
		// 	defaultValue: TypographyENUM.sans,
		// 	options: TypographyENUM
		// }),
		// productOfferText: generateArgTypes({
		// 	type: "string",
		// 	category: "General",
		// 	required: false,
		// 	description: "offer text for the product",
		// }),
		// frameWidthLabels: generateArgTypes({
		// 	type: "object",
		// 	category: "General",
		// 	required: false,
		// 	description: "frame width details",
		// }),
		// taxInclusivePrice: generateArgTypes({
		// 	type: "number",
		// 	category: "General",
		// 	required: false,
		// 	description: "price of product inclusive of taxes ",
		// }),
		// additionalInfoUrl: generateArgTypes({
		// 	type: "string",
		// 	category: "General",
		// 	required: false,
		// 	description: "price of product inclusive of taxes ",
		// }),
	}
} as ComponentMeta<typeof ProductDetailsMobile>;

const Template: ComponentStory<typeof ProductDetailsMobile> = args => <ProductDetailsMobile {...args}/>;
export const Overview = Template.bind({});
Overview.args = {
	productName: "Lenskart Air",
	displaySubname: "Amber Full Rim Black Hustlr",
	purchaseCount: 2500,
	suitedFor: "Unisex",
	supportedPowers: "all", 
	frameSize: "Medium",
	frameWidth: "139mm",
	rating: 4,
	maxRating: 5,
	price: {
		basePrice: 2000,
		lkPrice: 999,
		symbol: CurrencySymbol.INR,
		currency: CurrencyType.INR
	},
	frameWidthLabels: ["Frame witdh", "Frame Size"],
	taxInclusivePrice: 1020,
	additionalInfoUrl: "this is additional info url",
	onClickAdditionalInfo: (url) => {
		console.log(url);
	}
};
