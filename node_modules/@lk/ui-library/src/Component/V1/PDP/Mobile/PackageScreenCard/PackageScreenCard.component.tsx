import { action } from "@storybook/addon-actions";
import React from "react";
import * as Icons from "../../../../../Icons/index";
import { ComponentSizeENUM, ThemeENUM } from "../../../../../Types/general";
import Pricing from "../../../../Common/Price/Price.component";
import { PackageWrapper, SpecsLI, PackageCardList, PackageCardDetails, Heading, PackagelistCardWrapper, LensPrice, PriceWrapper, PlayIconWrapper, TagsContainer, Tag, OfferContainer, FreeText, TaxText, RightSection, LeftSection, PackageImg, StrikedText, ExchangePrice, FreeWrapper, IconWrapper, PackageTitle } from "./PackageScreenCard.styles";
import { PackageScreenCardType } from "./PackageScreenCard.type";

const PackageScreenCard = ({
	id,
	font,
	specifications,
	title,
	pkgImageLink = "",
	price,
	showTaxText,
	selected,
	isRTL = false,
	PlayIcon,
	onClick,
	onClickVideo,
	tags,
	showOfferRibbon,
	offerColorCode,
	offerText1, 
	offerText2,
	offerTextHasIcon,
	onInfoIconClick,
	deviceType = "mobile",
	// videoLink = "",
	warrantyTxt = "",
	isExchangeFlow,
	productPrices,
	configData,
	localeData
}: PackageScreenCardType) => {
	const onPackageClick = (e: React.MouseEvent<HTMLElement>) => {
		e.preventDefault();
		action("on Package click")(e);
		// onClick(id,addOns);
		onClick(id, "");
	};
	// console.log("tags : ", tags);
	return (
		<PackageWrapper styleFont={font} id="package-card-wrapper" device={deviceType}>
			{deviceType === "desktop" && pkgImageLink && (
				<LeftSection>
					<PackageImg device={deviceType} pkgImageLink={pkgImageLink}>
						{pkgImageLink !== "" ? <img alt="lens-package" src={pkgImageLink} /> : <Icons.DummyImage height="100%" width="100%" viewBox="0 0 100 100" preserveAspectRatio="none" /> }
					</PackageImg>
				</LeftSection>
			)}
			<RightSection>
				<PackageCardDetails onClick={onPackageClick} showOfferRibbon={showOfferRibbon}>
					<Heading styleFont={font}>
						<PackageTitle>{title}</PackageTitle>
						{PlayIcon && deviceType !== "desktop" && (
							<PlayIconWrapper onClick={onClickVideo} isRTL={isRTL}>
								<img src="https://static.lenskart.com/media/desktop/img/DesignStudioIcons/PlayCircleFilledGreen.svg" alt="Play Icon" />
							</PlayIconWrapper>
						)}
						{deviceType !== "desktop" && (<div className="lens-checkbox-select">
							{selected && (
								<img
									alt="selected"
									className="selected-icon"
									src="https://static.lenskart.com/media/desktop/img/DesignStudioIcons/CheckCircleFilledBlack.svg"
								/>
							)}
						</div>)}
						{deviceType === "desktop" && (
							<IconWrapper isRTL={isRTL}>
								<Icons.IconRight />
							</IconWrapper>
						)}
					</Heading>
					{tags && tags.length > 0 ? (
						(tags.length === 1 && (tags[0] === "" || tags[0] === "undefined") ? (
							null
						) : (
							<TagsContainer count={tags.length}>
								{tags.map((tag, index) => {
									return (
										tag && tag?.length > 0 ? <Tag key={index}>{tag}</Tag> : null
									);
								})}
							</TagsContainer>
						))
					):null}
					<PackagelistCardWrapper>
						<PackageCardList>
							{warrantyTxt !== "" && (
								<SpecsLI styleFont={font}>
									{warrantyTxt}
								</SpecsLI>
							)}
							{specifications.map((specification, index) => {
								return specification.isEnabled ? (
									<SpecsLI styleFont={font}
										key={`specification-${index}`}
									>
										{specification.title}
									</SpecsLI>
								) : (
									""
								);
							})}
						</PackageCardList>
						{pkgImageLink && deviceType !== "desktop" && (
							<PackageImg>
								<img alt="lens-package" src={pkgImageLink} />
							</PackageImg>
						)}
					</PackagelistCardWrapper>
					<LensPrice>
						{!isExchangeFlow && (<PriceWrapper isRTL={isRTL}>
							{price.lkPrice > 0 ? (<>
								<Pricing id="price"
									isDiscountPriceBigger={true}
									finalPriceColor="var(--dark-blue-100)"
									actualPrice={price.basePrice}
									finalPrice={price.lkPrice}
									isMobileView={true}
									hasSpecialPrice={(price.lkPrice === 0 || price.lkPrice === price.basePrice) ? false : true}
									componentSize={ComponentSizeENUM.large}
									font={font}
									strikeThroughColor="var(--serene-gray)"
									actualPriceColor="var(--serene-gray)"
									styleTheme={ThemeENUM.primary}
									currencyCode={price.symbol}
									isRTL={isRTL} /> 
							
								{showTaxText && configData?.SHOW_PACKAGE_SCREEN_TAX_TEXT && <TaxText> {showTaxText}</TaxText>}
							</>
							) : (
								<FreeText>{localeData.FREE_LENS_PAC}</FreeText>
							)}
						</PriceWrapper>)}
						{isExchangeFlow && (
							<PriceWrapper isRTL={isRTL}>
								<StrikedText>{price.symbol} {price.itemExchangePrice || ((productPrices?.firstFrameFreePrice || productPrices?.lkPrice))}</StrikedText>
								<ExchangePrice>
									{Number(((productPrices.firstFrameFreePrice || productPrices?.lkPrice)) - (productPrices.remainingExchangePrice || 0)) > 0 ? (
										<span className="">{price.symbol}{((productPrices.firstFrameFreePrice || productPrices?.lkPrice)) - (productPrices.remainingExchangePrice || 0)}</span>
									) : (
										<FreeWrapper>
											<FreeText>{localeData.FREE_PAC}</FreeText>
											<Tag>{localeData.FREE_FOR_EXCHANGE}</Tag>
										</FreeWrapper>
									)}
								</ExchangePrice>
							</PriceWrapper>
						)}
					</LensPrice>
				</PackageCardDetails>
				{showOfferRibbon && (
					<OfferContainer offerColorCode={offerColorCode} onClick={onInfoIconClick}>
						<p>{offerText1}</p>
						{offerTextHasIcon ? (
							<img alt="offer action" src={offerText2} />
						) : (
							offerText2
						)}
					</OfferContainer>
				)}
			</RightSection>
		</PackageWrapper>
	);
};

export default PackageScreenCard;
