import React from "react";
import * as Icons from "../../../../../Icons/index";
import { HeartWishlist } from "../../../../../Icons";
import { ComponentSizeENUM, ThemeENUM, TypographyENUM } from "../../../../../Types/general";
import Pricing from "../../../../Common/Price/Price.component";
import PrimaryButton from "../../../../Common/PrimaryButton";
// import { Rating } from "../../../../Common/Rating/Rating.component";
import { RatingStar } from "../../../../Common/RatingStar/RatingStar.component";
import Button from "../../../Button";
import { RatingStarContainer } from "../../../ProductCardNew/styles";
import { BuyChatButton, QuestionMarkIcon, WistListButton } from "../../TechnicalInfoItem/TechnicalInfoItem.styles";
import { ButtonsContainer, ExchangeInfoText, Img, InlineWrapper, LeftSection, ProductDetailItem, ProductDetailsMobileWrapper, ProductDetailsRow, ProductSecondaryRow, ProductTitleRow, RightSection, SizeWidthWrapper, Text, TextH1 } from "./ProductDetailsMobile.styles";
import { ProductDetailsMobileType } from "./ProductDetailsMobileType.types";

const ProductDetailsMobile = (props: ProductDetailsMobileType) => {

	const { productName, purchaseCount, displaySubname, suitedFor, supportedPowers, frameWidth, frameSize, isRTL, noOfReviews, price, font = TypographyENUM.defaultBook, powerInfoText, productOfferText, frameWidthLabels, taxInclusivePrice, onReviewsClickHandler, additionalInfoUrl, onClickAdditionalInfo, supportedPowersInfoLink, onClickSupportedPowerInfoLink, productType, dataLocale, isShortListed, isExchangeFlow, buyOnChat, onWishListClick, showGST, showPostPay, onclickBuyonChat, productData } = props;

	const { BOUGHT, POWER_SUPPORTED, SYMBOL_COLON, WITH_GST, BUY_ON_CHAT } = dataLocale;
	// const wishlistButtonText = isShortListed ? WISHLISTED : WISHLIST;


	const SpecialPrice = () => {
		if(!isExchangeFlow){
			const temp = (price.lkPrice === 0 || price.lkPrice === price.basePrice) ? false : true;
			return temp;
		}

		if((price?.remainingExchangePrice || price.lkPrice) > 0) {
			return true;
		}
		return false;
	};
	const hasSpecialPrice = SpecialPrice();
	return (
		<ProductDetailsMobileWrapper>
			<ProductTitleRow>
				<ProductDetailItem>
					<Text type="primary">
						{productName}
					</Text>
				</ProductDetailItem>
				<ProductDetailItem>
					<Img alt="trending" src="https://static.lenskart.com/media/mobile/universal/assets/ic_bought.png">
					</Img>
					<Text className="boughtText" type="secondary" color='var(--red)'>
						{purchaseCount} {BOUGHT}
					</Text>
				</ProductDetailItem>
			</ProductTitleRow>

			<ProductSecondaryRow>
				<ProductDetailItem >
					<TextH1 type="secondary">
						{displaySubname}
					</TextH1>
				</ProductDetailItem>
				{productType !== "Contact Lens" && 
					productType !== "Accessories" && 
					frameWidth && frameWidthLabels && <div>
					<ProductDetailItem gap={true}>
						<Text type="secondary">
							{`${dataLocale?.FRAME_WIDTH}:`}
						</Text>
						<Text type="secondary">
							{frameWidth}
						</Text>
					</ProductDetailItem>
				</div>}
				<div>
					{(suitedFor || frameSize) && (
						<ProductDetailItem>
							<Text type="secondary">
								{suitedFor ? `${dataLocale.SUITED_FOR || "Suited For"}:` : `${dataLocale.FRAME_SIZE || "Frame Size"}:`}
							</Text>
							<SizeWidthWrapper>
								{/* {additionalInfoUrl && onClickAdditionalInfo && (<QuestionMarkIcon onClick={() => onClickAdditionalInfo(additionalInfoUrl)}>
									?
								</QuestionMarkIcon>)} */}
								<span>{suitedFor || frameSize}</span>
								{additionalInfoUrl && onClickAdditionalInfo && (<span onClick={() => onClickAdditionalInfo(additionalInfoUrl)}>
									<Icons.InfoCircle />
								</span>)}
							</SizeWidthWrapper>
							{/* {productType !== "Contact Lens" && productType !== "Accessories" && frameWidth && frameWidthLabels && <ProductDetailItem>
								<Text type="secondary">
									{frameWidth}
								</Text>
							</ProductDetailItem>
							} */}
						</ProductDetailItem>
					)}

					{supportedPowers && (
						<ProductDetailItem>
							<Text>
								{POWER_SUPPORTED}{SYMBOL_COLON} {supportedPowers}
								{supportedPowersInfoLink && onClickSupportedPowerInfoLink && (<QuestionMarkIcon onClick={() => onClickSupportedPowerInfoLink(supportedPowersInfoLink)}>
									?
								</QuestionMarkIcon>)}
							</Text>
						</ProductDetailItem>
					)}
				</div>
			</ProductSecondaryRow>
			{(<ProductDetailsRow>
				<LeftSection>
					<InlineWrapper onClick={onReviewsClickHandler}>
						{/* <Rating id={id} isReadOnly={isReadOnly} rating={rating} maxRating={maxRating} componentSize={componentSize} onStarsChange={onStarsChange} isRTL={isRTL} />
						{noOfReviews && noOfReviews > 0 ? (<Text color="#599df1">
							{noOfReviews} {REVIEWS}
						</Text>) : (<Text color="#599df1">
							{WRITE_REVIEW}
						</Text>)} */}
						{noOfReviews && noOfReviews > 0 ? (
							<RatingStarContainer visible={productData.showProductRating} isRTL={isRTL}> <RatingStar isRTL={isRTL} backgroundColor="var(--warm-grey-25)" numberOfRatings={Number(productData.totalNoOfRatings)} primaryTextColor="var(--dark-blue-100)" starColor="var(--turquoise)" secondaryTextColor="var(--dark-blue-75)" componentSize={ComponentSizeENUM.small} rating={productData.productRating} id="product-rating" font={TypographyENUM.serif} /> </RatingStarContainer>
						) : ("")}

					</InlineWrapper>
					{(<Pricing id="price"
						isDiscountPriceBigger={false}
						finalPriceColor="var(--turquoise)"
						actualPrice={price.basePrice}
						isMobileView={true}
						// actualPrice={actualPrice}
						finalPrice={price.lkPrice}
						// hasSpecialPrice={(price.lkPrice === 0 || price.lkPrice === price.basePrice) ? false : true}
						hasSpecialPrice={hasSpecialPrice}
						componentSize={ComponentSizeENUM.medium}
						font={font}
						strikeThroughColor="var(--serene-gray)"
						actualPriceColor="var(--serene-gray)"
						styleTheme={ThemeENUM.primary}
						currencyCode={price.symbol}
						isRTL={isRTL}></Pricing>)}

					{isExchangeFlow && (
						<ExchangeInfoText>
							{(price?.remainingExchangePrice || price.lkPrice) > 0 ? dataLocale?.EXCHANGE_FREE_TEXT : dataLocale?.EXCHANGE_TEXT}
						</ExchangeInfoText>
					)}
					{!isExchangeFlow && showGST && (<InlineWrapper>
						<Text>{"(" + price.symbol + taxInclusivePrice + " " + WITH_GST + ")"}   </Text>
					</InlineWrapper>)}
					{productOfferText && !isExchangeFlow && (<ProductDetailItem>
						<Text color="#99a0a9">
							{productOfferText}
						</Text>
					</ProductDetailItem>)}
					{powerInfoText && !isExchangeFlow && (<ProductDetailItem>
						<Text color="#99a0a9">
							{powerInfoText}
						</Text>
					</ProductDetailItem>)}
				</LeftSection>
				{!isExchangeFlow && (<RightSection>
					<ButtonsContainer>
						<WistListButton isShortListed={isShortListed}>
							<Button
								id="btn-proceed"
								//text={wishlistButtonText.toLocaleUpperCase()}
								theme={ThemeENUM.primary}
								onClick = { onWishListClick }
								// kind={kindENUM.background}
								font={TypographyENUM.defaultBook}
								style={{ backgroundColor:"inherit",color:"var(--turquoise)", border: "1px solid #eee",width:"40px", height:"40px", marginLeft:"auto", }}
								leftIcon = {<HeartWishlist width="2.2em" height="1.9em" className="wishlist-icon"/>}
								showLeftIcon={true}
							></Button>
						</WistListButton>
						<BuyChatButton>
							{buyOnChat && (<PrimaryButton onBtnClick={onclickBuyonChat}
								theme={ThemeENUM.primary}
								font={TypographyENUM.defaultBook}
								componentSize={ComponentSizeENUM.small}
								borderRadius="xxxs"
								padding="var(--pd-10)"
								id="btn-proceed"
								width="130px"
								height="35px"
								primaryText={BUY_ON_CHAT || "BUY ON CHAT"}
								icon="https://static1.lenskart.com/media/mobile/images/small-whatsapp.png" />)}
						</BuyChatButton>
					</ButtonsContainer>
				</RightSection>)}
			</ProductDetailsRow>)}
			{showPostPay && <div
				className="postpay-widget"
				data-amount={Number(price.lkPrice) * 100}
				data-currency={price.symbol}
				data-locale="en"
				data-num-instalments={3}
				data-type="product"></div>}
		</ProductDetailsMobileWrapper>

	);
};

export default ProductDetailsMobile;
