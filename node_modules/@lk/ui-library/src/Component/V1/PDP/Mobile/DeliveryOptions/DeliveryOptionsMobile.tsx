import { useLoadScript } from "@react-google-maps/api";
import React, { useEffect, useState } from "react";
import * as Icons from "../../../../../Icons";
import { getFormattedDate } from "../../../../../helper";
import SvgLocationLoader from "../../../../../Icons/LocationLoader";
import { Libraries } from "../../../../Common/GoogleLocationInput/GoogleLocationInput.types";
import { DeliveryInputContainer, DeliveryOptionsContainer, CurrentLocationIconContainer, Input, Loader, Title } from "./DeliveryOptionsMobile.styles";
import { DeliveryOptionsMobileTypes } from "./DeliveryOptionsMobile.types";

const DeliveryOptionsMobile = ({ deliveryDate = 1661126400000,
	pinCode,
	onChangeHandler,
	pinCodeError,
	pinCodeErrorMessage,
	dataLocale,
	getLocation,
	configData,
	isLocationLoading,
	deliveryPinCode
}: DeliveryOptionsMobileTypes) => {
	const [pin, setPin] = useState(deliveryPinCode);

	const googleMapConfig = configData.GOOGLE_MAP_CONFIG && JSON.parse(configData.GOOGLE_MAP_CONFIG as string);
	const { isLoaded } = useLoadScript({
		googleMapsApiKey: configData.GOOGLE_MAP_KEY as string ?? "AIzaSyAgBBoD8hH6dQpesH3FjcVeKgEeAqezDu4",
		libraries: configData.GOOGLE_MAP_LIBRARIES as Libraries[], preventGoogleFontsLoading: googleMapConfig.preventGoogleFontsLoading,
	});

	useEffect(() => {
		if (pinCode)
			setPin(pinCode.toString());
	}, [pinCode]);

	const { TAT_INFO, CHECK_DELIVERY, ESTIMATED_DELIVERY_AT, ENTER_PINCODE } = dataLocale;

	return (
		<>
			<DeliveryOptionsContainer>
				<Title type="primary" isHeading>
					{CHECK_DELIVERY}
				</Title>
				<DeliveryInputContainer>
					<Input value={pin} placeholder={ENTER_PINCODE} type="number" onChange={(e) => {
						if (e.target.value.length <= 6) {
							onChangeHandler(e.target.value);
							setPin(e.target.value);
						}
					}}>
					</Input>
					{pin && (
						<Icons.Cross
							style={{ color: "red", marginRight: 5 }}
							width={16}
							height={16}
							onClick={() => setPin("")}
						/>
					)}
					{isLocationLoading && (
						<Loader>
							<SvgLocationLoader width={20} height={20} />
						</Loader>
					)}
					{!isLocationLoading && isLoaded && (
						<CurrentLocationIconContainer onClick={getLocation}><Icons.CurrentLocation/></CurrentLocationIconContainer>
					)}
				</DeliveryInputContainer>

				<Title className="dTitle">{TAT_INFO}</Title>
				{pinCode && deliveryDate && !pinCodeError && <Title className="dTitle" color="#358d84">
					{ESTIMATED_DELIVERY_AT} {pinCode} by {getFormattedDate(deliveryDate)}
				</Title>}
				{pinCodeError && <Title className="dTitle" color="var(--red)"> {pinCodeErrorMessage || "Enter a Valid Pincode"}
				</Title>}
			</DeliveryOptionsContainer>
		</>
	);
};

export default DeliveryOptionsMobile;
