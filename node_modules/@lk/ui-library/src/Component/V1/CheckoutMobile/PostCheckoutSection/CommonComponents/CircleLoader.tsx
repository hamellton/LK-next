// import "./styles.css";
import styled from "styled-components";
import { useEffect, useRef, useState } from "react";
import React from "react";
import { DataType, TypographyENUM } from "../../../../../Types/general";

const InnerCircle = styled.div<{degree: number}>`
  position: absolute;
  top: -10px;
  left: -10px;
  width: 256px;
  height: 256px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  /* transition: 1s linear all; */
  background-image: ${(props) => `conic-gradient(
    #000042 0deg,
    #000042 ${props.degree}deg,
    transparent ${props.degree}deg,
    transparent ${300 - props.degree}deg
  )`};
`;
const App = styled.div`
	font-family: ${TypographyENUM.lkSansRegular};
  text-align: center;
	display: flex;
	align-items: center;
	justify-content: center;
	height: 100vh;
`;
const Circle = styled.div`
	border: 10px solid #e8e6e5;
	box-sizing: content-box;
  width: 236px;
  height: 236px;
  border-radius: 50%;
  position: relative;
`;
const HiddenCircle = styled.div`
  width: 236px;
  height: 236px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: #fff;
`;
const TextContainer = styled.div`
	h1 {
		  font-family: ${TypographyENUM.lkSerifNormal};
      font-style: normal;
      font-weight: 200;
      font-size: 34px;
      line-height: 40px;
      text-align: center;
      letter-spacing: -0.02em;
      color: #000042;
      margin: 0;
	}
	h2 {
    font-family: ${TypographyENUM.lkSansRegular};
    font-style: normal;
    font-weight: 400;
    font-size: 12px;
    line-height: 20px;
    text-align: center;
    letter-spacing: -0.02em;
    color: #66668e;
    margin: 0;
	}
`;
// const time = 300; //in seconds
function CircleLoader({ time = 300, dataLocale }: {time?: number, dataLocale: DataType}) {
	const timerRef = useRef<ReturnType<typeof setTimeout>>();
	const [degree, setDegree] = useState(0);
	useEffect(() => {
		timerRef.current = setInterval(() => {
			if (degree >= 360) clearInterval(timerRef.current);
			else setDegree((deg) => Math.min(deg + 1, 360));
		}, Math.ceil((25 * time) / 9));
		return () => {
			clearInterval(timerRef.current);
		};
	}, []);
	console.log(degree);
	// time--;
	return (
		<App>
			<Circle>
				<InnerCircle degree={degree}>
					<HiddenCircle>
						<TextContainer>
							<h1>{dataLocale.HOLD_ON_POST}</h1>
							<h2>{dataLocale.VERIFYING_PAYMENT_POST}</h2>
						</TextContainer>
					</HiddenCircle>
				</InnerCircle>
			</Circle>
			{/* </div> */}
		</App>
	);
}

export { CircleLoader };
