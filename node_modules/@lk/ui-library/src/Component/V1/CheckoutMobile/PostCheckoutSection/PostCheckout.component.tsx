import { PaymentSummaryMobileType } from "./PostCheckout.types";

import { PaymentSummaryContainer, IconContainer, PaymentHeading, MainInfo, PrescriptionSection, WhatsNextBox, WhatsNext, BoxHead, BoxMainText, BottomButtonSection, AnimatedCheckBody, ViewOrder, SecondSection, RightArrowOuter, ButtonWrapper, ThankyouPaymentHeading } from "./PostCheckout.styles";
import React, { useEffect, useRef, useState } from "react";
import { kindENUM, ThemeENUM, TypographyENUM } from "../../../../Types/general";
import Button from "../../Button";
import { PaymentFailure, PaymentSuccess } from "../../../../Icons";
import { CircleLoader } from "./CommonComponents/CircleLoader";
import { AnimatedCheck } from "./CommonComponents/AnimatedCheck";
import { RightArrow } from "../../../../Icons";
import { PaymentFailureAnimationLottie } from "./CommonComponents/PaymentFailureAnimation";

const PostCheckoutMobile = ({
	success,
	heading,
	thankYouMessage,
	onContinue,
	dataLocale,
	redirectTopayment,
	viewOrder,
	onSubmitPrescription,
	isRTL= false,
	orderData,
	isLogin,
	isStudioInfo
}: PaymentSummaryMobileType) => {


	const [step, setStep] = useState(1);
	const timerRef = useRef<ReturnType<typeof setTimeout>>();
	let powerRequired = false;
	powerRequired = orderData?.some((item: any) => {
		if (item?.powerRequired === "POWER_REQUIRED")
			return true;
		else
			return false;
	});
	// const [degree, setDegree] = useState(0);
	useEffect(() => {
		if (typeof window !== undefined) sessionStorage.removeItem("isContactLensCheckboxChecked");
		timerRef.current = setInterval(() => {
			setStep((step) => {
				if (step === 3) {
					clearInterval(timerRef.current);
					return step;
				} else if (success || !success) return step + 1;
				else return 3;
			});
		}, 2000);
		return () => {
			clearInterval(timerRef.current);
		};
	}, []);


	return step === 3 ? (
		<PaymentSummaryContainer>
			<IconContainer success={success}>
				{success ? <PaymentSuccess /> : <PaymentFailure />}
			</IconContainer>
			<PaymentHeading>{heading}</PaymentHeading>
			<ThankyouPaymentHeading>{thankYouMessage}</ThankyouPaymentHeading>
			{success && isLogin && <MainInfo>{dataLocale?.RECEIVE_CONFIRMATION_EMAIL_POST}<ViewOrder onClick={viewOrder}>{dataLocale.VIEW_ORDER_POST}</ViewOrder></MainInfo>}
			<PrescriptionSection success={success}>
				{(powerRequired || !success) &&
				<WhatsNextBox>
					<WhatsNext>
						<BoxHead>{dataLocale?.WHATS_NEXT_POST}</BoxHead>
						{/* <Cross /> */}
					</WhatsNext>
					<BoxMainText>
						<p>
							{isStudioInfo?.isStudioFlow ? dataLocale?.BOOK_APPOINTMENT_POST : success ? dataLocale?.REQUIRE_PRESCRIPTION_POST : dataLocale.WE_HAVE_CREATED_YOUR_ORDER_BUT_COMPLETE_PAYMENT}
						</p>
					</BoxMainText>
					{!isStudioInfo?.isStudioFlow ? <SecondSection onClick={()=>success ? onSubmitPrescription() : redirectTopayment()}>
						<BoxHead>{success ? dataLocale.SUBMIT_PRESCRIPTION_NOW_POST : dataLocale.RETRY_PAYMENT_NOW_POST}
						</BoxHead>
						<RightArrowOuter isRTL={isRTL}><RightArrow></RightArrow></RightArrowOuter>
					</SecondSection> : <ButtonWrapper><Button
						id="continue-shopping-button"
						theme={ThemeENUM.primary}
						kind={kindENUM.background}
						showChildren={true}
						width="100"
						font={TypographyENUM.lkSansBold}
						onClick={isStudioInfo?.link}
					>
						{dataLocale?.BOOK_APPOINTMENT_NOW}
					</Button>
					<Button
						id="continue-shopping-button"
						theme={ThemeENUM.secondary}
						kind={kindENUM.border}
						showChildren={true}
						width="100"
						font={TypographyENUM.lkSansBold}
						onClick={onContinue}
					>
						{dataLocale?.CONTINUE_SHOPPING}
					</Button>
					</ButtonWrapper>}
				</WhatsNextBox>
				}
			</PrescriptionSection>
			{!isStudioInfo?.isStudioFlow && <BottomButtonSection>
				<Button
					id="continue-shopping-button"
					theme={ThemeENUM.primary}
					kind={kindENUM.background}
					showChildren={true}
					width="100"
					font={TypographyENUM.lkSansBold}
					onClick={onContinue}
				>
					{dataLocale?.CONTINUE_SHOPPING}
				</Button>
			</BottomButtonSection>}
		</PaymentSummaryContainer>
	) : step === 2 ? (
		<AnimatedCheckBody>
			{success ? <AnimatedCheck /> :
				<PaymentFailureAnimationLottie getCallbackValue={(callbackValue) => { console.log(callbackValue); }}></PaymentFailureAnimationLottie>}
		</AnimatedCheckBody>
	) : (
		<div>
			<CircleLoader time={2} dataLocale={dataLocale}/>
		</div>
	);
};

export { PostCheckoutMobile };
