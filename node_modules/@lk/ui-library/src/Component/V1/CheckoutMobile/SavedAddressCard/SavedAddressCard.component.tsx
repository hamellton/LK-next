import React, { useState, useEffect } from "react";
import { animated, useSpring } from "react-spring";
import { TickNew } from "../../../../Icons";
import { SavedAddressType } from "./SavedAddressCard.types";
import { NameAndCheckboxContainer, SavedAddressContainer, CheckboxContainer, Address, ActionButtonWrapper, ExpectedDeliveryWrapper, ActionButton, AddressLabel } from "./styles";

const AnimatedSavedAddressContainer = animated(SavedAddressContainer);
const AnimatedCheckboxContainer = animated(CheckboxContainer);

function SavedAddressCard(props: SavedAddressType) {
	const { address, editAddress, deleteAddress, selectAddress, dataLocale, font, isPostcode, isSelected = false, configData } = props;
	const [isActive, setIsActive] = useState(false);
	useEffect(() => {
		setTimeout(() => {
			setIsActive(true);
		}, 200);
	}, []);
	
	const styles = useSpring({
		from: {
			background: "var(--white)",
			border: "1px solid var(--white)",
		},
		to: {
			background: isSelected && isActive ? "var(--ghost-white)" : "var(--white)",
			border: isSelected && isActive ? "1px solid var(--dark-blue-50)" : "1px solid var(--white)"
		},
	});

	const iconStyles = useSpring({
		from: {
			opacity: 0.5
		},
		to: {
			opacity: isSelected && isActive ? 1 : 0.5
		},
	});
	// console.log(isSelected, "isSelected");
	
	
	return (
		<AnimatedSavedAddressContainer styleFont={font} isSelected={isSelected} onClick={() => selectAddress(address.id)} style={styles}>
			<NameAndCheckboxContainer>
				<AddressLabel>{address.addressLabel}</AddressLabel>
				<AnimatedCheckboxContainer style={iconStyles} isSelected={ isSelected } ><TickNew/></AnimatedCheckboxContainer>
			</NameAndCheckboxContainer>
			{address && (
				<Address>
					<div>{address.firstName} {address.lastName}</div>
					<div>{dataLocale.PH} {address.phone}</div>
					<div>{address.addressline1} {address.addressline2}, {address.city}</div>
					<div>{address.state} {isPostcode && configData?.SHOW_PIN_CODE && `,${address.postcode}`}</div>
				</Address>
			)}
			<ActionButtonWrapper>
				<ActionButton onClick={()=>deleteAddress(address.id)}>
					{dataLocale?.DELETE}
				</ActionButton>
				<ActionButton onClick={()=>editAddress(address.id)}>{dataLocale?.EDIT}</ActionButton>
			</ActionButtonWrapper>
			{/* --> expectedDelivery doesn't come from backend as of 01.02.2023. Have added considering it will be added in future */}
			{address?.expectedDelivery && <ExpectedDeliveryWrapper>
				{dataLocale?.EXPECTED_DELIVERY_BY} {address?.expectedDelivery}
			</ExpectedDeliveryWrapper>}
		</AnimatedSavedAddressContainer>
	);
}
export { SavedAddressCard };