import React from "react";
import {
	PriceBreakupWrapper,
	BreakUp,
	HR, Text
} from "./BillDetails.styles";
import { PriceBreakupTypes } from "./BillDetails.types";

/**
 * Default PriceBreakup Component
 */
const BillDetails = ({
	id,
	width,
	font,
	priceData,
	// isRTL=false,
	currencyCode
}: PriceBreakupTypes) => {
	// const CURRENCY_SYMBOL = currencyCode ? currencyCode : "â‚¹";
	// const lkCash = priceData[1].amount;

	// const DISCOUNTS = {
	// 	implicit: "CART_DISCOUNT",
	// 	lenskart: "LK_CASH",
	// 	lenskartplus: "LK_CASH_PLUS",
	// 	gv: "GV",
	// 	sc: "STORE_CREDIT",
	// 	prepaid: "PREPAID_DISCOUNT",
	// 	exchange: "OLD_PRODUCT_DISCOUNT",
	// };

	// let scAmt = 0;

	// for (let i = 0, length = discounts.length; i < length; i++) {
	// 	if (discounts[i].type === "sc") {
	// 		scAmt += discounts[i].amount;
	// 		scObj.push(discounts[i]);
	// 	}
	// }

	// let netAmount = totals.subTotal;

	
	// netAmount = (totals.subTotal - (totals.totalDiscount - scAmt)).toFixed(2);

	// netAmount = netAmount > 0 ? netAmount : 0;

	return (
		

		<PriceBreakupWrapper id={id} width={width}>
			<>
				{priceData.map((item,idx)=>{
					
					if(item.label === "Item Total"){
						return <>
							<BreakUp key={idx}>
								<Text smallText={true} styleFont={font}>{item.label}</Text>
								<Text styleFont={font} smallText={true} weight={true} isBold={true}>{currencyCode} {item.amount}</Text>
							</BreakUp><HR /></>;
					}else if(item.label === "LK Cash"){
						return <>
							<BreakUp key={idx}>
								<Text smallText={true} styleFont={font}>{item.label}</Text>
								<Text isGreen={true} smallText={true} styleFont={font} isBold={true}>{currencyCode} {item.amount}</Text>
							</BreakUp><HR /></>;
					}else if(item.label === "Total before Tax"){
						return <>
							<BreakUp key={idx}>
								<Text smallText={true} weight={true} styleFont={font} isBold={true}>{item.label}</Text>
								<Text weight={true} smallText={true} styleFont={font} isBold={true}>{currencyCode} {item.amount}</Text>
							</BreakUp></>;
					}else if(item.label === "Taxes"){
						return <>
							<BreakUp key={idx}>
								<Text smallText={true} styleFont={font}>{item.label}</Text>
								<Text weight={true} smallText={true} styleFont={font} isBold={true}>{currencyCode} {item.amount}</Text>
							</BreakUp></>;
					}else if(item.label === "Convenience Fees"){
						return <>
							<BreakUp key={idx}>
								<Text smallText={true} styleFont={font}>{item.label}</Text>
								{item.shipping ?
									<Text weight={true} isGreen={true} smallText={false} styleFont={font} isBold={true}>+{currencyCode} {item.shipping.toFixed(2)}</Text> :
									<Text weight={true} isGreen={true} smallText={false} styleFont={font} isBold={true}>FREE</Text>}
							</BreakUp><HR /></>;
					}else if(item.label === "Total payable"){
						return <>
							<BreakUp key={idx}>
								<Text smallText={false} styleFont={font} isBold={true}>{item.label}</Text>
								<Text weight={true} smallText={false} styleFont={font} isBold={true}>{currencyCode} {item.amount}</Text>
							</BreakUp></>;
					}
				})}

				{/* <BreakUp>
          <Text styleFont={font}>ITEM_TOTAL</Text>
          <Text styleFont={font}>{currencyCode} {Math.max(0, totals.subTotal)}</Text>
        </BreakUp>
				

				{discounts.length > 0 &&
            discounts.map(discount => {
              if (discount.type !== "sc") {
              		return (
              			<div key={discount.type}>
              					<BreakUp key={discount.type}>
              						<Text styleFont={font}>{DISCOUNTS[discount.type]}</Text>
              						<Text styleFont={font}>- {currencyCode}{discount.amount.toFixed(2)}</Text>
              					</BreakUp>
              			</div>
              		);
              	}
              	return null;
        })}


				<BreakUp>
        	<Text styleFont={font}>TOTAL_BEFORE_TAX</Text>
        	<Text styleFont={font}>{currencyCode} {netAmount}</Text>
        </BreakUp>


				{totals.totalTax > 0 && (
					<BreakUp>
						<Text styleFont={font}>TAXES</Text>
						<Text styleFont={font}> + {currencyCode} {(totals.totalTax).toFixed(2)}</Text>
					</BreakUp>
				)}

				{scAmt > 0 && (
					<BreakUp>
						<Text styleFont={font}>STORE_CREDIT</Text>
						<Text styleFont={font}> - {currencyCode} {scAmt}</Text>
					</BreakUp>
				)}

				{Boolean(prepaidDiscount) && (
					<BreakUp>
						<Text styleFont={font}>PREPAID_DISCOUNT</Text>
						<Text styleFont={font}> - {currencySymbol} {prepaidDiscount.toFixed(2)}}
						</Text>
					</BreakUp>
				)}

				<BreakUp>
          <Text styleFont={font}>{TOTAL_PAYABLE}</Text>
          <Text styleFont={font}>{currencySymbol} {Math.max(0, totals.total - (prepaidDiscount || 0))}</Text>
        </BreakUp>
				 */}
			</>
		</PriceBreakupWrapper>
	);
};
export { BillDetails };
