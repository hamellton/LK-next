import React, { useEffect, useState } from "react";
import SvgAlertCircle from "../../../../Icons/AlertCircle";
import { ComponentSizeENUM, ThemeENUM, TypographyENUM } from "../../../../Types/general";
import BottomSheet from "../../../Common/BottomSheet/BottomSheet.component";
import { AwaitingPaymentBody, AwaitingPaymentScreen, AwaitingPaymentHeader, AwaitingPaymentSection, AwaitingSheetHeader, AwaitingSheetContent, AwaitingCancel, AwaitingHeading, AwaitingNotes, MinsRemaining, AwaitingProgress, AwaitingContent, AwaitHead, AwaiTimerWrapper as AwaitTimerWrapper, AwaitingTimer, AwaitBtnWrapper, AwaitBtnPayment, HeaderPrice } from "./AwaitingPayment.styles";
import { AwaitingPaymentTypes } from "./AwaitingPayment.types";
import { PaymentAnimationLottie } from "./Animation/PaymentAnimationLottie";
import PrimaryButton from "../../../Common/PrimaryButton";
import { action } from "@storybook/addon-actions";
import SvgAlertOrange from "../../../../Icons/CrossOrange";
import Timer from "../../../Common/Timer";

let runStatusCheck: NodeJS.Timeout;
let disableScrollTimeout: NodeJS.Timeout;

const AwaitingPayment = ({
	dataLocale,
	price,
	currencySymbol,
	getUpiTransactionStatus,
	orderId,
	configData,
	upiTransactionStatus,
	showStatusScreen,
	setShowStatusScreen,
	setStatusData,
	successData,
	failureData,
	userInfo,
}: AwaitingPaymentTypes) => {
	const [showSheet, setShowSheet] = useState(false);
	// const [showSheetFailed, setShowSheetFailed] = useState(false);
	const [endTimer, setEndTimer] = useState(false);

	const cartConfig = configData &&
		configData?.CART_UPI_CONFIG && JSON.parse(configData.CART_UPI_CONFIG as string);
	const duration = (cartConfig?.timerLoaderDelay && JSON.parse(cartConfig.timerLoaderDelay)) || 300;
	const checkStatusDelay = (cartConfig?.upiPaymentStatusRequest && JSON.parse(cartConfig.upiPaymentStatusRequest)) || 5000;

	useEffect(() => {
		if (getUpiTransactionStatus) {
			getUpiTransactionStatus(orderId);
		}
		return () => {
			clearTimeout(runStatusCheck);
			clearTimeout(disableScrollTimeout);
		};
	}, []);

	useEffect(() => {
		if (upiTransactionStatus === "PENDING") {
			runStatusCheck = setTimeout(() => {
				getUpiTransactionStatus(orderId);
			}, checkStatusDelay);
		} else if (!showStatusScreen && upiTransactionStatus && upiTransactionStatus !== "PENDING") {
			clearTimeout(runStatusCheck);
			if (upiTransactionStatus === "SUCCESS") {
				setStatusData(successData);
				setShowStatusScreen(true);
			} else {
				setStatusData(failureData);
				setShowStatusScreen(true);
			}
		}
	}, [upiTransactionStatus]);

	function onClickHandler() {
		setShowSheet(!showSheet);
		disableScrollTimeout = setTimeout(() => document.body.style.overflow = "hidden", 0);
	}

	function onClickHandlerFailed() {
		window.location.href = `/payment?oid=${window.btoa(orderId)}${userInfo?.email ? "&eid=" + window.btoa(userInfo.email) : ""}`;
	}

	const onYesClick = (e: MouseEvent): void => {
		e.preventDefault();
		action("on Yes click")(e);
		window.location.href = `/payment?oid=${window.btoa(orderId)}${userInfo?.email ? "&eid=" + window.btoa(userInfo.email) : ""}`;
	};

	return (
		<>
			<BottomSheet
				closebottomSheet={() => null}
				show={true}
				borderRadius="0px"
				top="55px"
				padding="0"
				showCrossIcon={false}
				backdropColor="var(--transparent)"
			>
				<AwaitingPaymentScreen>
					<AwaitingPaymentHeader>
						<AwaitHead>{dataLocale?.AWAITING_PAYMENT}</AwaitHead>
						<HeaderPrice>{ currencySymbol }{ price }</HeaderPrice>
					</AwaitingPaymentHeader>
					<AwaitingPaymentBody>
						<AwaitingContent>
							<AwaitingProgress>
								<PaymentAnimationLottie
									getCallbackValue={() => { setEndTimer(true); }}
								/>
								<AwaitTimerWrapper>
									<AwaitingTimer>
										<Timer initialTimeInSeconds={duration} />
									</AwaitingTimer>
									<MinsRemaining>{dataLocale?.MINS_REMAINING}</MinsRemaining>
								</AwaitTimerWrapper>
							</AwaitingProgress>
							<AwaitingHeading>
								{dataLocale?.APPROVE_BEFORE_TIMER_RUNS_OUT}
							</AwaitingHeading>
						</AwaitingContent>
						<AwaitingNotes>
							<strong>{dataLocale?.NOTE}: </strong>
							{dataLocale?.DONT_CLOSE_UNTIL_TRANSACTION_COMPLETE}
						</AwaitingNotes>
						<AwaitingCancel
							onClick={onClickHandler}
						>
							{dataLocale?.CANCEL_PAYMENT}
						</AwaitingCancel>
					</AwaitingPaymentBody>
				</AwaitingPaymentScreen>
			</BottomSheet>
			<BottomSheet
				closebottomSheet={onClickHandler}
				onBackdropClick={onClickHandler}
				show={showSheet}
				padding={"26px 16px 16px"}
			>
				<AwaitingPaymentSection>
					<AwaitingSheetHeader>
						<SvgAlertCircle />
						{dataLocale?.SURE_YOU_WANT_TO_CANCEL}
					</AwaitingSheetHeader>
					<AwaitingSheetContent>
						{dataLocale?.CANCELLATION_TEXT}
					</AwaitingSheetContent>
					<AwaitBtnWrapper>
						<PrimaryButton
							onBtnClick={onClickHandler}
							theme={ThemeENUM.primary}
							font={TypographyENUM.lkSansRegular}
							componentSize={ComponentSizeENUM.medium}
							id="await-btn-no"
							width="100%"
							backgroundColor="#fff"
							height="48px"
							borderColor="#A2A2B8"
							color="#000042"
							primaryText={dataLocale.NO} />

						<PrimaryButton
							onBtnClick={onYesClick}
							theme={ThemeENUM.primary}
							font={TypographyENUM.lkSansRegular}
							componentSize={ComponentSizeENUM.medium}
							id="await-btn-cancel"
							backgroundColor="#000042"
							width="100%"
							height="48px"
							primaryText={dataLocale.YES_CANCEL} />

					</AwaitBtnWrapper>
				</AwaitingPaymentSection>
			</BottomSheet>

			<BottomSheet
				closebottomSheet={onClickHandlerFailed}
				show={(upiTransactionStatus !== "SUCCESS" && showStatusScreen) || endTimer}
				padding={"26px 16px 16px"}
			>
				<AwaitingPaymentSection>
					<AwaitingSheetHeader>
						<SvgAlertOrange width={35} height={35} />
						{dataLocale?.PAYMENT_UNSUCCESSFUL_RETRY_WITH_OTHER_METHOD}
					</AwaitingSheetHeader>
					<AwaitBtnPayment onClick={onClickHandlerFailed}>
						{dataLocale.RETRY_PAYMENT}{" "}
						<i>
							<img
								src="https://static1.lenskart.com/media/desktop/img/DesignStudioIcons/RightArrow.svg"
								alt="right arrow"
							/>
						</i>
					</AwaitBtnPayment>
					<AwaitingSheetContent className="successful-text">
						{dataLocale?.UNSUCCESSFUL_DESCRIPTION}
					</AwaitingSheetContent>
				</AwaitingPaymentSection>
			</BottomSheet>
		</>
	);
};

export { AwaitingPayment };
