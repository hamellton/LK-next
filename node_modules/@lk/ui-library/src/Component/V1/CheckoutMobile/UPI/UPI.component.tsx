import React, { useCallback, useEffect, useState } from "react";
import BottomSheet from "../../../Common/BottomSheet/BottomSheet.component";
import { UPISection,UPISubSection,UPILabel,UPIMore,UPISectionFirst,UPIMoreSection, BorderLine, AddUpiSection,AddUpiHeader, InputField,AddNewId, IntentBottomSheetHeading, IntentBottomSheetSubHeading, ProceedButtonContainer, ChooseOtherPaymentContainer, IntentLogoContainer } from "./UPI.styles";
import { Group, StatusType, UPITypes } from "./UPI.types";
import FloatingLabelInput from "../../../Common/FloatingLabelInput";
import { kindENUM, ThemeENUM, TypographyENUM } from "../../../../Types/general";
import Button from "../../Button";
import { getOSType } from "../../../../helpers";
import { AwaitingPayment } from "../AwaitingPayment/AwaitingPayment.component";
import { CurrencySymbol } from "../AwaitingPayment/AwaitingPayment.types";
import { UpiIntentBottomSheet } from "../UpiIntentBottomsheet/UpiIntentBottomSheet.component";

export default function UPI({
	groups,
	hasError,
	errorMessage,
	dataLocale,
	getSubmitFunction,
	paymentData,
	localeInfo,
	router,
	configData,
	resetVpaStatus,
	getUpiTransactionStatus,
	upiTransactionStatus,
	userInfo,
	abandonedLeadsFunction
}: UPITypes) {
	const [openUPIBottomSheet1,setOpenUPIBottomSheet1] = useState(false);
	const [openUPIBottomSheet2, setOpenUPIBottomSheet2] = useState(false);
	const [showAppsTray, setShowAppsTray] = useState(false);
	const [showIntentScreen, setShowIntentScreen] = useState(false);
	// eslint-disable-next-line @typescript-eslint/no-unused-vars
	const [upiValue, setUpiValue] = useState("");
	const [showIntentFlow, setShowIntentFlow] = useState(false);
	const [showCollectFlow, setShowCollectFlow] = useState(false);
	const [showGpay, setShowGpay] = useState(false);
	const [upiValidationError, setUpiValidationError] = useState<string | null>(null);
	const [showWaitingScreen, setShowWaitingScreen] = useState(false);
	const [showStatusScreen, setShowStatusScreen] = useState(false);
	// eslint-disable-next-line @typescript-eslint/no-unused-vars
	const [statusData, setStatusData] = useState<StatusType | null>(null);

	const successData: StatusType = {
		icon: "https://static.lenskart.com/media/mobile/images/upi/paymen-success.svg",
		statusText: dataLocale?.PAYMENT_SUCCESSFUL,
		totalText: dataLocale?.TOTAL_AMOUNT,
		redirectText: dataLocale?.REDIRECT_TO_CONFIRMATION,
	};
	const failureData: StatusType = {
		icon: "https://static.lenskart.com/media/mobile/images/upi/payment-fail.svg",
		statusText: "Your payment was unsuccessful, retry with another method.",
		totalText: dataLocale?.TOTAL_AMOUNT,
		redirectText: dataLocale?.REDIRECT_TO_RETRY_PAGE,
	};
	
	function checkUpiConfig() {
		const cartUpiConfig =
      configData &&
      configData?.CART_UPI_CONFIG &&
      JSON.parse(configData.CART_UPI_CONFIG as string);

		const { INTENT, COLLECT, gPay } = cartUpiConfig || {};
		const osType = getOSType();
		if (osType === "android") {
			if (INTENT?.android === "ON" && !showIntentFlow) {
				setShowIntentFlow(true);
			}
			if (COLLECT?.android === "ON" && !showCollectFlow) {
				setShowCollectFlow(true);
			}
			if (gPay?.android === "ON" && !showGpay) {
				setShowGpay(true);
			}
		}
		if (osType === "ios") {
			if (INTENT?.ios === "ON" && !showIntentFlow) {
				setShowIntentFlow(true);
			}
			if (COLLECT?.ios === "ON" && !showCollectFlow) {
				setShowCollectFlow(true);
			}
			if (gPay?.ios === "ON" && !showGpay) {
				setShowGpay(true);
			}
		}
	}

	useEffect(() => {
		if (paymentData?.paymentDetails?.payment?.upiFlowType === "COLLECT")
			setShowWaitingScreen(true);
	}, [paymentData?.paymentDetails?.payment?.upiFlowType]);

	useEffect(() => {
		checkUpiConfig();
		window.onpopstate = null;
	}, []);

	useEffect(() => {
		if (showAppsTray) {
			window.onpopstate = onBackButtonEvent;
		}
	}, [showAppsTray]);

	useEffect(() => {
		if (upiValidationError) {
			if (!upiValue) setUpiValidationError("UPI ID is required");
		} else if (!["ERROR", "FALSE"].includes(paymentData.isValidVpa)) setUpiValidationError(null);
		else upiValue.length>0 ? setUpiValidationError("UPI ID is invalid") : setUpiValidationError(null);
	}, [upiValidationError, upiValue, paymentData?.isValidVpa]);

	const handleErrorCallback = (val: string) => {
		if (!val) setUpiValidationError("UPI ID is required");
		else if (["ERROR", "FALSE"].includes(paymentData.isValidVpa)) setUpiValidationError("UPI ID is invalid");
		else setUpiValidationError(null);
	};

	const handleError = useCallback((value?: string) => {
		if (typeof value !== "undefined") handleErrorCallback(value);
		else handleErrorCallback(upiValue);
	}, [upiValue, paymentData?.isValidVpa]);

	function onClickHandler1(){
		setOpenUPIBottomSheet1(!openUPIBottomSheet1);
	}

	function onClickHandler2() {
		setUpiValue("");
		setUpiValidationError(null);
		setOpenUPIBottomSheet2(!openUPIBottomSheet2);
		abandonedLeadsFunction();
	}

	function onBackButtonEvent() {
		window.onpopstate = null;
		const retryPage = window?.location?.pathname || null;
		let pathname;
		if (paymentData?.paymentDetails?.order?.id)
			pathname =
				paymentData?.paymentDetails?.order?.type !== "HEC"
					? `/checkout/retry?oid=${window.btoa(paymentData?.paymentDetails?.order?.id.toString())}&eid=${window.btoa(
						paymentData?.paymentDetails?.order?.customerEmail
					) || ""}`
					: `${localeInfo?.domain}/pmd/payuindex.php?oid=${window.btoa(paymentData?.paymentDetails?.order?.id.toString()) || ""}`;
		if (
			paymentData &&
			paymentData?.paymentDetails && 
			paymentData?.paymentDetails.payment &&
			paymentData?.paymentDetails.payment.upiFlowType &&
			retryPage !== "/checkout/retry"
		) {
			router.push(pathname);
		}
	}

	return <UPISection>
		<UPISectionFirst>
			{groups.filter((methodData: Group) => methodData.key === "paytm_cc").map((methodData:Group, idx:number) => (
				idx < 4 && (
					<UPISubSection key={idx} onClick={()=>getSubmitFunction(methodData.key)(methodData.code,methodData.gatewayId||null)}>
						<i>
							<img alt={methodData.label} src={methodData.logoImageUrl} />
						</i>
						<UPILabel>{methodData.label}</UPILabel>
					</UPISubSection>
				)
			))}
			{showGpay && (
				<UPISubSection key={"Google-Pay"} onClick={() => {
					getSubmitFunction("upi_payu")("payuwallet", "PU:UPI", "GOOGLEPAY");
					abandonedLeadsFunction();
				}}>
					<i>
						<img alt={dataLocale?.GOOGLE_PAY} src="https://static5.lenskart.com/media/uploads/Size=lg,_Payment_method=GooglePay.png" />
					</i>
					<UPILabel>{dataLocale?.GOOGLE_PAY}</UPILabel>
				</UPISubSection>
			)}
			{showIntentFlow && (
				<UPISubSection key="Intent-Flow" onClick={() => {
					getSubmitFunction("upi_payu")("payuwallet", "PU:UPI", "INTENT");
					abandonedLeadsFunction();
					setShowAppsTray(true);
				}}>
					<i>
						<img alt={dataLocale?.INTENT_FLOW} src="https://static1.lenskart.com/media/desktop/img/DesignStudioIcons/Upi.svg" />
					</i>
					<UPILabel>{dataLocale?.MORE_UPI_APPS}</UPILabel>
				</UPISubSection>
			)}
		</UPISectionFirst>
		{groups.length > 4 && (
			<UPIMore onClick={onClickHandler1}>+ {groups.length - 4} {dataLocale?.MORE}</UPIMore>
		)}

		{showCollectFlow && <BorderLine />}

		{showCollectFlow && (
			<AddNewId onClick={onClickHandler2}>
				<div>
					<ul>
						<li>
							<i>
								<img alt="UPI" src="https://static1.lenskart.com/media/desktop/img/DesignStudioIcons/Upi.svg"/>
							</i>
							<i>
								{dataLocale?.ADD_NEW_ID}
							</i>
							<span>
								<img
									alt="right arrow"
									src="https://static1.lenskart.com/media/desktop/img/DesignStudioIcons/RightArrow.svg"
								/>
							</span>
						</li>
					</ul>
				</div>
			</AddNewId>
		)}

		<BottomSheet closebottomSheet={onClickHandler1} show={openUPIBottomSheet1} onBackdropClick={onClickHandler1}>
			<UPIMoreSection>
				<h2>{dataLocale?.UPI}</h2>
				<div>
					<ul>
						{groups
							.map((upi, idx) => (
								<li key={idx}>
									<i>
										<img alt={upi.label} src={upi.logoImageUrl}/>
									</i>
									<i>
										{upi.label}
										{upi.warning && <div>{upi.warning}</div>}
									</i>
									<span>
										<img
											alt="right arrow"
											src="https://static1.lenskart.com/media/desktop/img/DesignStudioIcons/RightArrow.svg"
										/>
									</span>
								</li>
							))}
					</ul>
				</div>
			</UPIMoreSection>
		</BottomSheet>

		<BottomSheet
			closebottomSheet={onClickHandler2}
			show={openUPIBottomSheet2 && !(paymentData?.paymentDetails?.order?.status && showWaitingScreen)}
			onBackdropClick={onClickHandler2}
		>
			<AddUpiSection>
				<AddUpiHeader>{dataLocale?.ADD_NEW_ID}</AddUpiHeader>
				<InputField>
					<FloatingLabelInput
						hasErrorIcon={true}
						hasError={hasError || Boolean(upiValidationError)}
						handleError={() => handleError()}
						errorMessage={upiValidationError || (hasError ? errorMessage : "")}
						label={dataLocale?.YOUR_UPI_ID}
						width="100%"
						font={TypographyENUM.lkSansRegular}
						type="text"
						getInputValue={(value) => {
							setUpiValue(value);
							handleError(value);
							resetVpaStatus();
						}}
						onValueChange={(e) => {
							setUpiValue(e.target.value);
						}}
					/>
				</InputField>
				{/* {(hasError || Boolean(upiValidationError)) && <ErrorMessage>{upiValidationError || errorMessage}</ErrorMessage>} */}
				<Button 
					id={dataLocale?.VERIFT_AND_PAY}
					text={dataLocale?.VERIFT_AND_PAY}
					theme={ThemeENUM.primary}
					kind={kindENUM.background}
					font={TypographyENUM.lkSansBold}
					width="100"
					disabled={hasError || Boolean(upiValidationError) || paymentData?.vpaPaymentLoading}
					onClick={() => {
						getSubmitFunction("upi_payu")("payuwallet", "PU:UPI", "COLLECT", upiValue);
					}}
					loading={paymentData?.vpaPaymentLoading}
				/>
			</AddUpiSection>
		</BottomSheet>
		{
			paymentData?.paymentDetails?.payment?.actionInfo?.action === "DEEPLINK"
			&& paymentData?.paymentDetails?.order?.status?.status === "PENDING"
			&& showAppsTray &&
			(
				<BottomSheet
					closebottomSheet={() => setShowAppsTray(false)}
					show={showAppsTray}
					showCrossIcon={false}
					borderRadius="0px"
				>
					<IntentLogoContainer>
						<img
							className="intent-upi-icon"
							src="https://static.lenskart.com/media/mobile/images/upi/upi-big-2.svg"
							alt="UPI icon"
						/>
					</IntentLogoContainer>
					<IntentBottomSheetHeading>{dataLocale?.PAY_VIA_UPI_APPS}</IntentBottomSheetHeading>
					<IntentBottomSheetSubHeading>
						{dataLocale?.PROCEED_TO_GET_INSTALLED_UPI_APPS}
					</IntentBottomSheetSubHeading>
					<ProceedButtonContainer>
						<Button
							id="PROCEED-TO-PAY"
							text={dataLocale?.PROCEED_TO_PAY}
							theme={ThemeENUM.primary}
							kind={kindENUM.background}
							font={TypographyENUM.lkSansBold}
							disabled={false}
							onClick={() => {
								setShowIntentScreen(true);
								if(paymentData?.paymentDetails?.payment?.actionInfo?.redirectUrl)
									window.location.href = paymentData?.paymentDetails.payment.actionInfo.redirectUrl;
								setShowAppsTray(false);
							}}
						/>
					</ProceedButtonContainer>
					<ChooseOtherPaymentContainer>
						<Button
							id="Choose-other-payment-options"
							text={dataLocale?.CHOOSE_OTHER_PAYMENT_OPTIONS}
							theme={ThemeENUM.secondary}
							kind={kindENUM.tertiary}
							font={TypographyENUM.lkSansMedium}
							disabled={false}
							onClick={() => onBackButtonEvent()}
							width="auto"
						/>
					</ChooseOtherPaymentContainer>
				</BottomSheet>
			)
		}
		{
			paymentData?.paymentDetails?.order?.status?.status === "PENDING" &&
			paymentData?.paymentDetails?.payment?.upiFlowType === "INTENT" && (
				<UpiIntentBottomSheet
					show={showIntentScreen}
					dataLocale={dataLocale}
					onCancel={onBackButtonEvent}
					configData={configData}
					getUpiTransactionStatus={getUpiTransactionStatus}
					upiTransactionStatus={upiTransactionStatus}
					orderId={paymentData?.paymentDetails?.order?.id}
					showStatusScreen={showStatusScreen}
					setShowStatusScreen={setShowStatusScreen}
					setStatusData={setStatusData}
					successData={successData}
					failureData={failureData}
				/>
			)
		}
		{
			paymentData?.paymentDetails?.order?.status &&
			paymentData?.paymentDetails?.payment?.upiFlowType === "COLLECT" &&
			showWaitingScreen && (
				<AwaitingPayment
					dataLocale={dataLocale}
					price={paymentData?.paymentDetails?.order?.amount?.total}
					currencySymbol={CurrencySymbol.INR}
					getUpiTransactionStatus={getUpiTransactionStatus}
					orderId={paymentData?.paymentDetails?.order?.id}
					configData={configData}
					upiTransactionStatus={upiTransactionStatus}
					router={router}
					showStatusScreen={showStatusScreen}
					setShowStatusScreen={setShowStatusScreen}
					setStatusData={setStatusData}
					successData={successData}
					failureData={failureData}
					userInfo={userInfo}
				/>
			)
		}
	</UPISection>;
}

export { UPI };