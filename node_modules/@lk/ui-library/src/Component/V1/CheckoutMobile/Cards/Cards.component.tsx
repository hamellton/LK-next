import React, { useEffect, useState } from "react";
import BottomSheet from "../../../Common/BottomSheet/BottomSheet.component";
import { CardsSection, SavedCards, DottedLine, ATMCard, CardSheetHeader, CardSheetSection, CardSmallInput,InputError, InputWrapper, SavedSectionOpen, SavedSectionOuter, GuideLines, LearnMore, GuildeLinesContent,GuideLinesSection,GuideLinesHeader, SavedSectionInner, VerifyPayButton, InputErrorForCVV, CheckBox, GuideLinesWrapper, PrimerCardForm, PayLaterButtonWrapper, NameInputContainer, Tick, Box } from "./Cards.styles";
import { CardsTypes } from "./Cards.types";
import FloatingLabelInput from "../../../Common/FloatingLabelInput";
import { DeviceTypes, kindENUM, ThemeENUM, TypographyENUM } from "../../../../Types/general";
import Button from "../../Button";
import ContactLensConsentCheckbox from "../../NewPayment/ContactLensConsentCheckbox";
import { PayLaterBottomsheet } from "../PayLaterBottomsheet/PayLaterBottomsheet.component";
import { Radio } from "../../NewPayment/components/Radio";

export default function Cards({
	savedCards,
	dataLocale,
	methodData,
	savedCardsHandler,
	getSubmitFunction,
	borderVisible,
	setSelectedPaymentMethod,
	selectedPaymentMethod,
	renderPrimerUI,
	primerToken,
	isContactLensConsentEnabled,
	payLaterAllowed,
	isPrimerActive,
	isContactLensCheckboxChecked,
	setIsContactLensCheckboxChecked,
	currencyCode,
	totalAmount,
	setSectedPrimerCreditCard,
	showPrimerCardBottomSheet,
	configData,
	abandonedLeadsFunction
}: CardsTypes) {
	const [openAddCardSheet, setOpenAddCardSheet] = useState(false);
	const [showBottomSheet, setShowBottomSheet] = useState(true);
	const [cardNumber,setCardNumber] = useState("");
	const [cardDate,setCardDate] = useState("");
	const [cardCVV,setCardCVV] = useState("");
	const [cardName,setCardName] = useState("");
	const [storeCard, setStoreCard] = useState(true);

	// const [openCVVSection,setOpenCVVSection] = useState(false);

	const [cardNumberError,setCardNumberError] = useState("");
	const [cardDateError,setCardDateError] = useState("");
	const [cardCVVError,setCardCVVError] = useState("");
	const [cardNameError,setCardNameError] = useState("");

	const [selectAccordian,setSelectAccordian] = useState("");
	const [savedCardsCVV,setsavedCardsCVV] = useState("");

	const [openGuideLines,setOpenGuideLines] = useState(false);

	const [changeArrow,setChangeArrow] = useState("");

	const [CVVError, setCVVError] = useState("");
	// const [checked, setChecked] = useState(false);
	const toggleChecked = () => {
		setIsContactLensCheckboxChecked(!isContactLensCheckboxChecked);
	};

	const [showPayLaterModal, setShowPayLaterModal] = useState(false);

	const closePayLaterModal = () => {
		setShowPayLaterModal(false);
	};
	const paylaterPaymentMethod = getSubmitFunction("paylater");
	const handlePayLater = () => {
		paylaterPaymentMethod("paylater", null);
	};

	useEffect(() => {
		if (openAddCardSheet) setTimeout(() => {
			if(isPrimerActive)
				renderPrimerUI("PAYMENT_CARD");
		}, 0);
	}, [openAddCardSheet, isPrimerActive]);

	function onClickHandler() {
		if (selectedPaymentMethod) setSelectedPaymentMethod("");
		abandonedLeadsFunction();
		setOpenAddCardSheet(!openAddCardSheet);
		setShowBottomSheet(true);
	}

	function handleError(val:string,name:string,idx?:number | string){
		if(name === "cardNumber"){
			const regx = /^[0-9]{13,18}$/;
			regx.test(val) ? setCardNumberError("") : setCardNumberError("Please enter valid card no");
		}else if(name === "cardDate"){
			// val.length === 2 && setCardDate((currDate) => currDate + "/");
			const isValidDate = /^([0-9]{2})\/([0-9]{2})$/;
			if (!val || !isValidDate.test(val)) setCardDateError("Please enter valid expiry date");
			else {
				const month = val.toString().slice(0, 2);
				let fullyear = "20";
				const year = val.toString().slice(3);
				if (year.length === 2) {
					fullyear += year;
				}
				const today = new Date();
				const expiryDay = new Date();
				expiryDay.setFullYear(parseInt(fullyear), parseInt(month), 0);
				if(expiryDay < today || parseInt(month) > 12) setCardDateError("Please enter valid expiry date");
				else setCardDateError("");
			}
		}else if(name === "cardCVV"){
			if(/^[0-9]{3,4}$/.test(val)){
				setCardCVVError("");
				setCVVError("");
			}else{
				setCardCVVError("Please enter valid cvv");
				idx && setCVVError(idx.toString());
			}
			if(val.length<3) setCardCVVError("Please enter valid cvv");
		}else if(name === "cardName"){
			const len = val ? val.trim().length : 0;
			if (len < 1) {
				setCardNameError("This is a required field.");
			} else if (/\d/.test(val)) {
				setCardNameError("Only Alphabets are allowed.");
			}else{
				setCardNameError("");
			}
		}
	}

	useEffect(()=>{
		if((openAddCardSheet || openGuideLines) && document) {
			document.body.style.overflow = "hidden";
		}
	
		return ()=> {
			document.body.style.overflow = "auto";
			setCardNumberError("");
			setCardDateError("");
			setCardCVVError("");
			setCardNameError("");
		};},[openAddCardSheet, openGuideLines]);

	function isRequired(e:string,name:string){
		if(e.trim() === ""){
			if(name === "cardNumber"){
				setCardNumberError("This is required");
			}else if(name === "cardDate"){
				setCardDateError("This is required");
			}else if(name === "cardCVV"){
				setCardCVVError("This is required");
			}else if(name === "cardName"){
				setCardNameError("This is required");
			}
		}
	}

	// function handleError(name:string,val:string){
	// 	if(name === "cardNumber"){
	// 		const regx = /^[0-9]{13,18}$/;
	// 		regx.test(val) ? setCardNumberError("") : setCardNumberError("Please enter valid card no");
	// 	}else if(name === "cardDate"){
	// 		// const len = val ? val.trim().length : 0;
	// 		// len < 1 ? setCardDateError("Please enter valid cvv") : setCardDateError("");
	// 		setCardDateError(name);
	// 	}else if(name === "cardCVV"){
	// 		/^[0-9]{3,4}$/.test(val) ? setCardCVVError("") : setCardCVVError("Please enter valid cvv");
	// 	}else if(name === "cardName"){
	// 		const len = val ? val.trim().length : 0;
	// 		if (len < 1) {
	// 			setCardNameError("This is a required field.");
	// 		} else if (/\d/.test(val)) {
	// 			setCardNameError("Only Alphabets are allowed.");
	// 		}else{
	// 			setCardNameError("");
	// 		}
	// 	}
	// }

	function toggleFunction(idx:string){
		if (selectAccordian === idx) {
			setSelectAccordian("");
			setChangeArrow("");
			return;
		}
		setsavedCardsCVV("");
		setSelectAccordian(idx);
		setChangeArrow(idx);
	}

	function GuideLinesBottomSheet(){
		setOpenGuideLines(!openGuideLines);
	}

	function submitSavedCardHandler(cvv:any, token:string){
		savedCardsHandler(cvv,token);
	}

	function submitCredentialsHandler(){
		// handleError();
		if (methodData.key === "PAYMENT_CARD") {
			getSubmitFunction("ATOME")("primer", "PRIMER", primerToken, false);
		}
		getSubmitFunction(methodData.key)(cardNumber, cardName, cardDate.slice(0, 2),cardDate.slice(3),cardCVV,storeCard);
	}

	useEffect(()=>{
		if(!showPrimerCardBottomSheet) setShowBottomSheet(false);
	},[showPrimerCardBottomSheet]);

	// console.log(cardNumber,cardDate,cardCVV,cardName,cardNumberError,cardDateError,cardCVVError,cardNameError,savedCardsCVV);
	return <div>
		<CardsSection borderVisible={borderVisible}>
			{!isPrimerActive && savedCards && Array.isArray(savedCards) && savedCards?.map((card,idx)=>
			{return <SavedSectionOuter key={idx}>
				<SavedCards onClick={()=>{
					toggleFunction(idx.toString());
					abandonedLeadsFunction();
				}} aria-expanded={`${selectAccordian === idx.toString() ? "true" : "false"}`}>
					<ul>
						<li>
							{/* {methodData.logoImageUrl && (
								<i>
									<img alt={card.cardBrand} src={methodData.logoImageUrl || `https://static.lenskart.com/media/desktop/img/BinSeries/${card.cardBrand.toLowerCase()}.png`}/>
								</i>
							)} */}
							{
								<i>
									<img alt={card.cardBrand} src={`https://static.lenskart.com/media/desktop/img/BinSeries/${card.cardBrand.toLowerCase()}.png`} />
								</i>

							}
							<i>
								<div>{card.number.toString()/*.substr(-4)*/}</div>
							</i>
							<span>
								{changeArrow !== idx.toString() && <svg width="8" height="12" viewBox="0 0 8 12" fill="none" xmlns="http://www.w3.org/2000/svg">
									<path d="M1.5 11L6.5 6L1.5 1" stroke="#000042" strokeLinecap="square"/>
								</svg>}

								{changeArrow === idx.toString() && <svg width="12" height="8" viewBox="0 0 12 8" fill="none" xmlns="http://www.w3.org/2000/svg">
									<path d="M1 1.5L6 6.5L11 1.5" stroke="#000042" strokeLinecap="square"/>
								</svg>}
							</span>
						</li>
					</ul>
				</SavedCards>
				<SavedSectionOpen valCheck={selectAccordian === idx.toString() ? true : false}>
					{selectAccordian === idx.toString() && <SavedSectionInner>
						<FloatingLabelInput hasErrorIcon={false} hasError={CVVError === idx.toString() && cardCVVError !== "" ? true :false} label={dataLocale?.ENTER_CVV_CODE} width="40%" font={TypographyENUM.lkSansRegular} type="password" maxLength={4} isNumberOnly={true} getInputValue={(e)=>{handleError("cardCVV",e,idx);setsavedCardsCVV(e);}} handleError={(e)=>isRequired(e.target.value,"cardCVV")} onValueChange={(e)=> setsavedCardsCVV(e.target.value)}></FloatingLabelInput>
						<VerifyPayButton isDisabled={savedCardsCVV.length<=2?true:false} onClick={()=>{if(savedCardsCVV.length>2)submitSavedCardHandler(savedCardsCVV, card.cardToken);}}>{dataLocale?.VERIFY_PAY}</VerifyPayButton>
					</SavedSectionInner>}
					{CVVError === idx.toString() && <InputErrorForCVV hasError={cardCVVError !== "" ? true :false}>{cardCVVError}</InputErrorForCVV>}
				</SavedSectionOpen>
			</SavedSectionOuter>;}
			)}

			{!isPrimerActive && savedCards.length !==0 && <DottedLine></DottedLine>}

			<ATMCard isBottomsheetOpen={openAddCardSheet} onClick={onClickHandler} borderVisible={borderVisible}>
				<ul>
					<li>
						{methodData.logoImageUrl ? (
							<i>
								<img alt="Add Card image" src={methodData.logoImageUrl}/>
							</i>
						): <Radio isSelected={openAddCardSheet} />}
						<i>
							{methodData?.label}
						</i>
						<span>
							<img
								alt="right arrow"
								src="https://static1.lenskart.com/media/desktop/img/DesignStudioIcons/RightArrow.svg"
							/>
						</span>
					</li>
				</ul>
			</ATMCard>

			<BottomSheet
				style={{ display: showBottomSheet ? "block" : "none" }}
				onBackdropClick={onClickHandler}
				closebottomSheet={onClickHandler}
				show={openAddCardSheet}
			>
				<CardSheetSection>
					<CardSheetHeader>{dataLocale?.ADD_NEW_CARD}</CardSheetHeader>
					{methodData.key !== "PAYMENT_CARD" ?
						(
							<>
								<InputWrapper>
									<FloatingLabelInput hasError={cardNumberError !== "" ? true :false} hasErrorIcon={true} label={dataLocale?.CARD_NUMBER} width="100%" font={TypographyENUM.lkSansRegular} type="text" isNumberOnly={true} maxLength={18} getInputValue={(value:string)=>{handleError(value,"cardNumber");setCardNumber(value);}} handleError={(e)=>handleError(e.target.value,"cardNumber")} onValueChange={(e)=> setCardNumber(e.target.value)}></FloatingLabelInput>
									<InputError hasError={cardNumberError !== "" ? true :false}>{cardNumberError}</InputError>
								</InputWrapper>
								<CardSmallInput>
									<span>
										<InputWrapper>
											<FloatingLabelInput hasError={cardDateError !== "" ? true :false} hasErrorIcon={true} label={dataLocale?.EXPIRY} width="100%" font={TypographyENUM.lkSansRegular} type="tel" maxLength={5} isCardExpiryDatefield={true} getInputValue={(value:string)=>{handleError(value,"cardDate");setCardDate(value); }} handleError={(e)=>handleError(e.target.value,"cardDate")}></FloatingLabelInput>
											<InputError hasError={cardDateError !== "" ? true :false}>{cardDateError}</InputError>
										</InputWrapper>
										<InputWrapper>
											<FloatingLabelInput hasError={CVVError === "singleCVV" && cardCVVError !== "" ? true :false} hasErrorIcon={true} label={dataLocale?.CVV} width="100%" font={TypographyENUM.lkSansRegular} type="password" maxLength={4} getInputValue={(value:string)=>{handleError(value,"cardCVV");setCardCVV(value);}} handleError={(e)=>handleError(e.target.value,"cardCVV")} onValueChange={(e)=> setCardCVV(e.target.value)}></FloatingLabelInput>
											{CVVError === "singleCVV" && <InputError hasError={cardCVVError !== "" ? true :false}>{cardCVVError}</InputError>}
										</InputWrapper>
									</span>
								</CardSmallInput>
								<InputWrapper>
									<FloatingLabelInput hasError={cardNameError !== "" ? true :false} hasErrorIcon={true} label={dataLocale?.FULL_NAME} width="100%" font={TypographyENUM.lkSansRegular} type="text" getInputValue={(value:string)=>{handleError(value,"cardName");setCardName(value);}} handleError={(e)=>handleError(e.target.value,"cardName")} onValueChange={(e)=> setCardName(e.target.value)}></FloatingLabelInput>
									<InputError hasError={cardNameError !== "" ? true :false}>{cardNameError}</InputError>
								</InputWrapper>
								<GuideLinesWrapper>
									<CheckBox>
										<input
											type="checkbox"
											id="samePower"
											defaultChecked={storeCard}
											onChange={()=>setStoreCard((prev)=>!prev)}
										></input>
										<label htmlFor="samePower">
											<Tick />
											<Box />
											<GuideLines>{dataLocale?.SECURE_THIS_CARD}</GuideLines>
										</label>
									</CheckBox>
									<LearnMore onClick={GuideLinesBottomSheet}> {dataLocale?.LEARN_MORE}</LearnMore>
								</GuideLinesWrapper>
								<Button
									id={dataLocale?.ADD_CARD_AND_PAY}
									text={dataLocale?.ADD_CARD_AND_PAY}
									theme={ThemeENUM.secondary}
									kind={kindENUM.background}
									font={TypographyENUM.lkSansBold}
									width="100"
									onClick={submitCredentialsHandler}
									disabled={(cardNumber===""||cardName===""||cardDate.slice(0, 2)===""||cardDate.slice(3)===""||cardCVV==="" || cardNumberError !=="" || cardDateError !=="" || cardCVVError !=="" || cardNameError !== "")}
								></Button>
							</>
						) : (
							<PrimerCardForm>
								<div id="my-container" />
								<div className="inputPrimer" id="checkout-card-number-input">
									<div id="cardNumberRequired" className="error"></div>
								</div>
								<div className="inputPrimer" id="checkout-card-expiry-input">
									<div id="expiryRequired" className="error"></div>
								</div>
								<div className="inputPrimer" id="checkout-card-cvv-input">
									<div id="cvvRequired" className="error"></div>
								</div>
								<input className="inputPrimer cardHolderInput" id="checkout-card-holder-input" placeholder="Full Name"></input>
								<NameInputContainer>
									<div id="cardnameRequired" className="margin-top-error error"></div>
								</NameInputContainer>
								<button style={{ display: "none" }} className="submit-button" id={"submit-button"} />
								{isContactLensConsentEnabled && <ContactLensConsentCheckbox configData={configData} deviceType={DeviceTypes.MOBILE} dataLocale={dataLocale} checked={isContactLensCheckboxChecked} toggleChecked={toggleChecked} /> }
								<PayLaterButtonWrapper>
									{payLaterAllowed && (
										<><Button
											id="pay-later"
											showChildren={true}
											style={{
												paddingTop: "7px",
												paddingBottom: "7px",
												height: 46,
												fontSize: "16px",
											}}
											font={TypographyENUM.lkSansBold}
											width="100"
											onClick={() => setShowPayLaterModal(true)}
											theme={ThemeENUM.secondary}
											kind={kindENUM.border}
										>
											{dataLocale?.MSITE_PAY_LATER}
										</Button>
										<Button
											id={"validate-button-primer"}
											text={`${currencyCode}${totalAmount} • ${dataLocale?.PAY_AND_BOOK_APPOINTMENT}`}
											theme={ThemeENUM.primary}
											kind={kindENUM.background}
											font={TypographyENUM.lkSansBold}
											width="100"
											onClick={() => {
												setSectedPrimerCreditCard(true);
												// setShowBottomSheet(false);
											}}
											style={{ fontSize: "16px", lineHeight: "24px" }}
										></Button></>
									)}
									{
										isContactLensConsentEnabled && <Button
											id={"validate-button-primer"}
											disabled={!isContactLensCheckboxChecked}
											text={dataLocale?.PLACE_ORDER}
											theme={ThemeENUM.primary}
											kind={kindENUM.background}
											font={TypographyENUM.lkSansBold}
											width="100"
											onClick={()=>{
												setSectedPrimerCreditCard(true);
												// setShowBottomSheet(false);
											}}
											style={{ fontSize: "16px",lineHeight: "24px" }}
										></Button>
									}


									{!isContactLensConsentEnabled && !payLaterAllowed && <Button
										id={"validate-button-primer"}
										text={`${currencyCode}${totalAmount} • ${dataLocale?.PROCEED_TO_PAY}`}
										theme={ThemeENUM.primary}
										kind={kindENUM.background}
										font={TypographyENUM.lkSansBold}
										width="100"
										onClick={()=>{
											setSectedPrimerCreditCard(true);
											// setShowBottomSheet(false);
										}}
										style={{ fontSize: "16px",lineHeight: "24px" }}
									></Button>}
								</PayLaterButtonWrapper>

								{showPayLaterModal && (
									<PayLaterBottomsheet
										closeBottomSheet={closePayLaterModal}
										showBottomSheet={showPayLaterModal}
										handlePayNow={closePayLaterModal}
										handlePayLater={handlePayLater}
									/>
								)}
							</PrimerCardForm>
						)}

					<BottomSheet closebottomSheet={GuideLinesBottomSheet} show={openGuideLines}>
						<GuideLinesSection>
							<GuideLinesHeader>
								{dataLocale?.SECURE_YOUR_CARD}
							</GuideLinesHeader>
							<GuildeLinesContent>
								{dataLocale?.RBI_GUIDELINES}
								<ul>
									<li>{dataLocale?.RBI_GUIDELINE_1}</li>
									<li>{dataLocale?.RBI_GUIDELINE_2}</li>
								</ul>
								<Button
									id={dataLocale?.OK_GOT_IT}
									text={dataLocale?.OK_GOT_IT}
									theme={ThemeENUM.secondary}
									kind={kindENUM.background}
									font={TypographyENUM.lkSansBold}
									width="100"
									onClick={GuideLinesBottomSheet}
								></Button>
							</GuildeLinesContent>
						</GuideLinesSection>
					</BottomSheet>
				</CardSheetSection>
			</BottomSheet>
		</CardsSection>
	</div>;
}

export { Cards };
