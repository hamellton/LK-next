import React, { useState } from "react";
import { StoreCreditSection, Header, CreditBottomSheet, CreditBottomSheetHeader, InputWrapper,ErrorMessage, AppliedCreditsBar, AppliedCreditsCode, AppliedCreditsPrice, AppliedCreditsRemoveButton, AppliedCreditsCodeMain, AppliedCreditsRemoveButtonMain, StoreCreditInnerHead, AppliedCreditsInfo, AppliedCreditWrapper, ImgWrapper } from "./StoreCredit.styles";
import BottomSheet from "../../../Common/BottomSheet/BottomSheet.component";
import FloatingLabelInput from "../../../Common/FloatingLabelInput";
import { kindENUM, ThemeENUM, TypographyENUM } from "../../../../Types/general";
import Button from "../../Button";
import { StoreCreditTypes } from "./StoreCredit.types";


export default function StoreCredit({
	dataLocale,
	onSubmit,
	appliedCredits,
	removeStoreCredit,
	totalAmount,
	abandonedLeadsFunction
}: StoreCreditTypes) {
	const [bottomSheet,setBottomSheet] = useState(false);

	const [creditCode, setCreditCode] = useState("");
	const [creditAmount, setCreditAmount] = useState("");
	const [errorCredit,setErrorCredit] = useState("");
	const [errorAmount,setErrorAmount] = useState("");

	function openBottomSheet(){
		setBottomSheet(!bottomSheet);
		setErrorAmount("");
		setErrorCredit("");
	}

	function ErrorHandler(e:string,name:string){
		// console.log(e,name);

		if(e.trim() === "" && name === "Credit Code"){
			setErrorCredit("This is required");
		}else if(e.trim() !== "" && name === "Credit Code"){
			setErrorCredit("");
		}
		
		if(e.trim() === "" && name === "Credit Amount"){
			setErrorAmount("This is required");
		}else if((e.trim() !== "" && name === "Credit Amount")){
			setErrorAmount("");
		}
	}

	function submitHandler(code: string, amount: (number | string)) {
		onSubmit(code, amount)
			.then((d) => {
				if (d?.isError) {
					setErrorAmount(d.message);
					// setShowTextField(false);
				} else {
					setErrorAmount("");
					setCreditCode("");
					setCreditAmount("");
					// setShowTextField(false);
					setBottomSheet(false);
				}
			})
			.catch((err) => {
				setErrorAmount(err.message || "");
				// setShowTextField(false);
			});
	}

	function removeStoreCreditHandler(code: string) {
		// setShowLoader(true);
		removeStoreCredit(code)
			.then((d:any) => {
				if (d?.isError) {
					setErrorAmount(d.message);
					// setShowTextField(false);
				} else {
					setErrorAmount("");
					// setShowTextField(false);
				}
				// setShowLoader(false);
				// { message: error.message, isError: true, btnDisabled: true, btnText: "Apply", additionalText: "", isCheckoutBtn: false}
			})
			.catch((err) => {
				setErrorAmount(err.message || "");
				// setShowLoader(false);
				// setShowTextField(false);
			});
	}

	// console.log(creditCode,creditAmount);

	return <div>
		<StoreCreditSection onClick={()=>{
			if(totalAmount!=0)
				openBottomSheet();
			abandonedLeadsFunction();
		}
		}>
			<StoreCreditInnerHead>
				<Header>
					{dataLocale?.APPLY_STORE_CREDIT}
				</Header>
				<ImgWrapper show={totalAmount!==0}>
					<img
						alt="right arrow"
						src="https://static1.lenskart.com/media/desktop/img/DesignStudioIcons/RightArrow.svg"
					/>
				</ImgWrapper>
			</StoreCreditInnerHead>
			{
				appliedCredits?.map((item:any) => {
					return(
						<div key={item.code}>
							<AppliedCreditsBar >
								<AppliedCreditsCodeMain>{item.code}</AppliedCreditsCodeMain>
								<AppliedCreditsPrice>₹{item.amount}</AppliedCreditsPrice>
								<AppliedCreditsRemoveButtonMain
									onClick={(e) => {
										e.stopPropagation();
										removeStoreCreditHandler(item.code);
									}}
								>
									Remove
								</AppliedCreditsRemoveButtonMain>
							</AppliedCreditsBar>
							<AppliedCreditsInfo>Store Credit successfully applied to cart</AppliedCreditsInfo>
						</div>
					);
				})
			}
		</StoreCreditSection>

		<BottomSheet
			closebottomSheet={openBottomSheet}
			show={bottomSheet}
			onBackdropClick={openBottomSheet}
		>
			<CreditBottomSheet>
				<CreditBottomSheetHeader>{dataLocale?.STORE_CREDIT}</CreditBottomSheetHeader>
				<AppliedCreditWrapper>
					{
						appliedCredits?.map((item:any) => {
							return(
								<AppliedCreditsBar key={item.code}>
									<AppliedCreditsCode>{item.code}
										<AppliedCreditsPrice>₹{item.amount}</AppliedCreditsPrice>
									</AppliedCreditsCode>
									<AppliedCreditsRemoveButton
										onClick={() => removeStoreCreditHandler(item.code)}
									>
									Remove
									</AppliedCreditsRemoveButton>
								</AppliedCreditsBar>
							);
						})
					}
				</AppliedCreditWrapper>
				<InputWrapper>
					<FloatingLabelInput
						hasError={false}
						hasErrorIcon={true}
						label={dataLocale?.CREDIT_CODE}
						width="100%"
						font={TypographyENUM.lkSansRegular}
						type="text"
						getInputValue={(e) => {ErrorHandler(e, "Credit Code");setCreditCode(e);}}
						handleError={(e) => ErrorHandler(e.target.value, "Credit Code")}
					/>
					<ErrorMessage>{errorCredit}</ErrorMessage>
				</InputWrapper>
				<InputWrapper>
					<FloatingLabelInput
						hasError={false}
						hasErrorIcon={true}
						label={dataLocale?.CREDIT_AMOUNT}
						width="100%"
						font={TypographyENUM.lkSansRegular}
						type="text"
						isNumberOnly={true}
						getInputValue={(e) => {ErrorHandler(e, "Credit Amount");setCreditAmount(e); }}
						handleError={(e) => ErrorHandler(e.target.value, "Credit Amount")}
					/>
					<ErrorMessage>{errorAmount}</ErrorMessage>
				</InputWrapper>
				<Button
					id={dataLocale?.ADD_CREDIT}
					text={dataLocale?.ADD_CREDIT}
					theme={ThemeENUM.secondary}
					kind={kindENUM.background}
					font={TypographyENUM.lkSansBold}
					width="100"
					onClick={()=>submitHandler(creditCode,creditAmount)}
					disabled={Boolean(!creditCode||!creditAmount||errorCredit||errorAmount)}
				></Button>
			</CreditBottomSheet>
		</BottomSheet>
	</div>;
}

export { StoreCredit };