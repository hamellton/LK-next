import React, { useCallback, useEffect, useMemo, useState } from "react";

import { DeviceTypes } from "../../../../../Types/general";
import { currency } from "../../../MyAccount/MyOrder/utils";
import { DataType } from "../../../OldPayment/Payment.types";
import { A, LI, ProductBrand, ProductImg, ProductInfo, ProductLeftContainer, ProductPrice, ProductTextContainer, QrButton, QrButtonContainer, ScannerText, SearchBackButton, SearchBarContainer, SearchBarHolder, SearchDropHead, SearchDropHeadMsite, SearchHeaderMsite, SearchInputDropdown, SearchInputField, SearchInputFieldMsite, UL } from "./styles";

function debounce(callback: (...a: any) => any, delay: number){
	let timer: ReturnType<typeof setTimeout>;
	return (...args: any) => {
		if(timer) clearTimeout(timer);
		timer = setTimeout(() => {
			callback(...args);
		}, delay);
	};
}

interface trendingMenus {
	link?: string,
	text?: string
}

interface searchProps {
	searchFunction: (arg: string) => void,
	getQueryData: (arg: string) => void,
	delay?: number,
	placeholderText?: string,
	trendingMenus?: trendingMenus[],
	matchingKeywordsData?: trendingMenus[],
	productData?: {
		id: string | number,
		name: string,
		image_url: string,
		product_url: string,
		brand_name: string,
		prices: {
			name: string,
			currency_code: string,
			price: string | number
		}[]
	}[]
	isRTL?: boolean,
	path: string
	localeData: DataType
	deviceType:DeviceTypes,
	onClose?:()=>void,
	country?: string
	onQrClick: (() => void) | undefined,
	router?: any;
	subdirectoryPath?: string;
	sessionStorageHelper: any
}

// const _currencySymbol = (code: string) => {
// 	if (code === "SGD") return "$";
// 	else return code;
// };

const isNumber = (value:string) => {
	return /^\d+$/.test(value);
};

const isAlphaNumeric = (value:string) => {
	return /^[a-zA-Z0-9 ]*$/.test(value);
};

const SearchBar = ({
	deviceType,
	searchFunction,
	getQueryData,
	delay = 200,
	placeholderText = "What are you looking for ?",
	trendingMenus,
	productData = [],
	matchingKeywordsData = [],
	// isRTL = false,
	localeData,
	// path,
	onClose,
	country = "",
	onQrClick,
	router,
	subdirectoryPath,
}: searchProps) => {
	const [inputText, setInputText] = useState("");
	const [showSearchDropdown, setShowSearchDropdown] = useState(deviceType==DeviceTypes.MOBILE?true:false);
	const debouncedSearch = useMemo(() => debounce(searchFunction, delay), [searchFunction, delay]);
	const searchHandler = useCallback((val: string) => {
		if (isAlphaNumeric(val)){
			setInputText(val);
			debouncedSearch(val);
		}
	}, [setInputText, debouncedSearch]);

	useEffect(() => {
		if(!inputText && productData?.length){
			debouncedSearch(inputText);
		}
	}, [inputText]);
	

	// useEffect(() => {

	// 	if(updateSearchBarStatus){
	// 		updateSearchBarStatus(showSearchDropdown);
	// 	}
	// }, [showSearchDropdown]);
	const onClickLinkHardReload = (link: string) => {
		if(link){
			window.open(link, "_self");
		}
	};

	const onClickLink = (link: string) => {
		if (link) {
			if (router) {
				router.push(link);
				onClose?.();
			}
			else window.open(link);
		}
	};

	return (
		<>
			{deviceType==DeviceTypes.DESKTOP && <SearchBarHolder>
				<SearchBarContainer>
					<form onSubmit={(e) => e.preventDefault()}>
						<SearchInputField type="text" autoComplete="false" onKeyDown={(e)=>{
							if(e.key === "Enter" && inputText.trim().length>0){
								getQueryData(inputText.trim());
								onClose?.();
							}
						}}
						onChange={(e: React.ChangeEvent<HTMLInputElement>) => searchHandler(e.target.value)} placeholder={placeholderText}
						value={inputText}
						onFocus={() => setShowSearchDropdown(true)}
						onBlur={() => setTimeout(() => setShowSearchDropdown(false), 200)}
						/>
					</form>
					{(showSearchDropdown && ((trendingMenus?.length && !inputText) || productData?.length || matchingKeywordsData?.length)) ? <SearchInputDropdown isMsite={false}>

						{showSearchDropdown && !matchingKeywordsData?.length && trendingMenus?.length && !inputText &&<><SearchDropHead>{localeData.TRENDING_SEARCH}</SearchDropHead>
							<UL>
								{trendingMenus?.map((tm, i) => <LI key={i}><A onClick={() => onClickLinkHardReload(tm?.link ?? "")}>{tm.text}</A></LI>)}
							</UL></>}
						{matchingKeywordsData?.length !== 0 && <><SearchDropHead>{localeData.MATCHING_KEYWORDS}</SearchDropHead>
							<UL>
								{matchingKeywordsData?.map((mk:any, i) => <LI key={i}><A href={subdirectoryPath ? `${subdirectoryPath}/search?q=${mk}` : `/search?q=${mk}`}>{mk}</A></LI>)}
							</UL></>}
						{productData?.length !== 0 && country !== "us" && <><SearchDropHead>{localeData.PRODUCT_RECOMMENDATIONS}</SearchDropHead>
							<UL> {/**id, product_url, image_url, brand_name, name, prices => {price, currency_code}[] */}
								{productData?.map(pd => (
									<LI key={pd.id}>
										<A onClick={() => onClickLink(pd.product_url)}>
											<ProductLeftContainer>
												<ProductImg src={pd.image_url}/>
												<ProductTextContainer>
													<ProductBrand>{pd.brand_name}</ProductBrand>
													<ProductInfo>{pd.name}</ProductInfo>
												</ProductTextContainer>
											</ProductLeftContainer>
											<ProductPrice>
												{currency(pd.prices[0].currency_code)} {pd.prices[0].price}
											</ProductPrice>
										</A>
									</LI>
								))}
							</UL></>}
					</SearchInputDropdown> : null}
				</SearchBarContainer>
			</SearchBarHolder> }
			{deviceType==DeviceTypes.MOBILE &&

				<SearchBarContainer>


					<SearchHeaderMsite>
						<SearchBackButton onClick={onClose}>
						âž”
						</SearchBackButton>
						<SearchInputFieldMsite onKeyDown={(e)=>{
							if(e.key === "Enter"){
								getQueryData(inputText);
								onClose?.();
							}
						}} onChange={(e: React.ChangeEvent<HTMLInputElement>) => searchHandler(e.target.value)} placeholder={placeholderText} value={inputText} onFocus={() => setShowSearchDropdown(true)}/>

					</SearchHeaderMsite>
					{(showSearchDropdown && (trendingMenus?.length || productData?.length || matchingKeywordsData?.length)) ? <SearchInputDropdown isMsite={true}>
						{showSearchDropdown && !matchingKeywordsData?.length && trendingMenus?.length && !isNumber(inputText) && <><SearchDropHeadMsite >{localeData.TRENDING_SEARCH}</SearchDropHeadMsite>
							<UL>
								{trendingMenus?.map((tm, i) => <LI key={i}><A onClick={() => onClickLinkHardReload(tm?.link ?? "")}>{tm.text}</A></LI>)}
							</UL></>}
						{matchingKeywordsData?.length !== 0 && <><SearchDropHead>{localeData.MATCHING_KEYWORDS}</SearchDropHead>
							<UL>
								{matchingKeywordsData?.map((mk:any, i) => <LI key={i}><A href={subdirectoryPath ? `${subdirectoryPath}/search?q=${mk}` : `/search?q=${mk}`}>{mk}</A></LI>)}
							</UL></>}
						{productData?.length !== 0 && country !== "us" && <><SearchDropHead>{localeData.PRODUCT_RECOMMENDATIONS}</SearchDropHead>
							<UL isProductDataList>
								{productData?.map(pd => <LI key={pd.id}><A onClick={() => onClickLink(pd.product_url)}>
									<ProductLeftContainer>
										<ProductImg src={pd.image_url}/>
										<ProductTextContainer>
											<ProductBrand>{pd.brand_name}</ProductBrand>
											<ProductInfo>{pd.name}</ProductInfo>
										</ProductTextContainer>
									</ProductLeftContainer>
									<ProductPrice lineHeight="initial">{currency(pd.prices[0].currency_code)} {pd.prices[0].price}</ProductPrice>
								</A></LI>)}
							</UL></>}
					</SearchInputDropdown> : null}
					{country==="in" && <QrButtonContainer onClick={onQrClick}>
						<QrButton>
							<img alt="QR Scanner" src="https://static1.lenskart.com/media/desktop/img/DesignStudioIcons/QrScanner.svg" width="15" height="15"/>
							<ScannerText>Scan a product barcode</ScannerText>
						</QrButton>
					</QrButtonContainer>}
				</SearchBarContainer>}
			{/* <SearchBarContainer>
					<SearchInputField onKeyDown={(e)=>{
						if(e.key === "Enter"){
							getQueryData(inputText);
						}
					}} onChange={(e: React.ChangeEvent<HTMLInputElement>) => searchHandler(e.target.value)} placeholder={placeholderText} value={inputText} onFocus={() => setShowSearchDropdown(true)} onBlur={() => setTimeout(() => setShowSearchDropdown(false), 200)} />
					{(showSearchDropdown && (trendingMenus?.length || productData?.length || matchingKeywordsData?.length)) ? <SearchInputDropdown>
						{showSearchDropdown && !matchingKeywordsData?.length && trendingMenus?.length && <><SearchDropHead>{localeData.TRENDING_SEARCH}</SearchDropHead>
							<UL>
								{trendingMenus?.map((tm, i) => <LI key={i}><A href={tm.link}>{tm.text}</A></LI>)}
							</UL></>}
						{matchingKeywordsData?.length !== 0 && <><SearchDropHead>{localeData.MATCHING_KEYWORDS}</SearchDropHead>
							<UL>
								{matchingKeywordsData?.map((mk:any, i) => <LI key={i}><A href={ isRTL ? `${window.location.origin}${path || ""}/search?q=${mk}` : `${window.location.origin}/search?q=${mk}`}>{mk}</A></LI>)}
							</UL></>}
						{productData?.length !== 0 && <><SearchDropHead>{localeData.PRODUCT_RECOMMENDATIONS}</SearchDropHead>
							<UL>
								{productData?.map(pd => <LI key={pd.id}><A href={pd.product_url}>
									<ProductLeftContainer>
										<ProductImg src={pd.image_url}/>
										<ProductTextContainer>
											<ProductBrand>{pd.brand_name}</ProductBrand>
											<ProductInfo>{pd.name}</ProductInfo>
										</ProductTextContainer>
									</ProductLeftContainer>
									<ProductPrice>{pd.prices[0].price} {pd.prices[0].currency_code}</ProductPrice>
								</A></LI>)}
							</UL></>}
					</SearchInputDropdown> : null}
				</SearchBarContainer> */}

		</>

	);
};

export default SearchBar;
