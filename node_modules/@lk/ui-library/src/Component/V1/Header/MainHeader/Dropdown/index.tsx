import React, { useEffect, useState } from "react";
import * as Icons from "../../../../../Icons/index";
import { subHeaderData } from "../../mockValues3";
import { CustomFlex } from "../../styles";
import Grid from "../Grid";
import { SubHeaderDataType } from "./Dropdown.types";
import { CategoryBox, CategoryText, CategoryTextContainer, GenderBox, GenderImg, GenderText, SubMenuHead, SubMenuLinkContainer, SubMenuLinkText, Icon, HoverIcon } from "./styles";

const MainNav = ({ data, isRTL,setItem }: SubHeaderDataType) => {
	const menuData = (data || subHeaderData);
	const genders = menuData.genders; // [Man, Woman, Child]

	const defaultGender = genders.find(gd => gd.id === menuData.defaultGender); // "Man"
	const allCategories = menuData?.categories; // ["Classic 1", "Classic 2"]
	const allSubCategories = menuData.subCategories;

	const currentCtg = allCategories.filter(ctg => defaultGender?.submenuIds.includes(ctg.id));
	const defaultCategory = currentCtg?.find(ctg => ctg.id === defaultGender?.defaultCategoryId); // "Classic 1"
	const subCategories = allSubCategories.filter(sctg => defaultCategory?.submenuIds.includes(sctg.id));
	const modSubCategories = subCategories.map(sctg => {
		const categLinks = sctg.submenuIds.map(lid => menuData.links?.[lid]);
		return { ...sctg, links: categLinks };
	});

	const [genderId, setGenderId] = useState(menuData.defaultGender);
	const [categoryId, setCategoryId] = useState(defaultCategory?.id);
	const [currentCategories, setCurrentCategories] = useState(currentCtg);
	const [currentSubCategories, setCurrentSubCategories] = useState(modSubCategories);

	useEffect(() => {
		const gender = genders?.find(gd => gd.id === genderId);
		setCurrentCategories(allCategories.filter(ctg => gender?.submenuIds.includes(ctg.id)));
		setCategoryId(gender?.defaultCategoryId);
	}, [genderId]);

	useEffect(() => {
		const selectedCateg = currentCategories?.find(ctg => ctg.id === categoryId); // "Classic 1"
		const subCategories = allSubCategories.filter(sctg => selectedCateg?.submenuIds.includes(sctg.id));
		const modSubCategories = subCategories.map(sctg => {
			const categLinks = sctg.submenuIds.map(lid => menuData?.links?.[lid]);
			return { ...sctg, links: categLinks };
		});
		setCurrentSubCategories(modSubCategories);
	}, [categoryId]);

	return (
		<Grid rows={3} colWidths="260px 260px" defaultColWidth="minmax(250px, 1fr)">
			<div/>
			<CustomFlex />
			<CustomFlex column={true}>
				{genders?.map(gd => <GenderBox active={gd.id === genderId} onMouseOver={() => setGenderId(gd.id)} key={gd.id}>
					<GenderImg className="getGaData" src={gd.img} alt={gd?.text as string} />
					<GenderText>{gd?.text}</GenderText>
					<Icon>
						{
							isRTL ? (<Icons.IconLeft/>) : (<Icons.IconRight/>)
						}
					</Icon>
				</GenderBox>)}
			</CustomFlex>
			<SubMenuHead>SELECT CATEGORY</SubMenuHead>
			<CustomFlex borderColor="#dfdfdf"/>
			<CustomFlex column={true}>
				{currentCategories?.map((ctg: { id: string | number, text: string | number, subtext: string, url?: string }) => <CategoryBox className="getGaData" href={ctg?.url || ""} active={ctg.id === categoryId} onMouseOver={() => setCategoryId(ctg.id)} key={ctg.id}>
					<CategoryTextContainer>
						<CategoryText>{ctg?.text}</CategoryText>
						<CategoryText dangerouslySetInnerHTML={{ __html: ctg.subtext }} />
					</CategoryTextContainer>
					<Icon>
						{
							isRTL ? (<Icons.IconLeft/>) : (<Icons.IconRight/>)
						}
					</Icon>
					{/* <ArrowRight/> */}
				</CategoryBox>)}
			</CustomFlex>
			{currentSubCategories?.map(hd => <React.Fragment key={hd.id}>
				<SubMenuHead>{hd?.text}</SubMenuHead>
				<CustomFlex borderColor="#dfdfdf"/>
				<CustomFlex column={true}>
					{hd?.links?.map(lk => <SubMenuLinkContainer key={lk?.id}><SubMenuLinkText className="getGaData" href={lk?.url} onClick={() =>setItem?.(lk)}>{lk?.text}</SubMenuLinkText>
						<HoverIcon isRTL={isRTL}>
							{
								isRTL ? (<Icons.IconLeft/>) : (<Icons.IconRight/>)
							}
						</HoverIcon>
					</SubMenuLinkContainer>)}
				</CustomFlex>
			</React.Fragment>)}
		</Grid>
	);
};

export default MainNav;
