import React, { /*useState*/ } from "react";
import { DropdownContainer, HeaderImageLink, LastRowContainer, LastRowLink, LastRowLinkContainer } from "./styles";
import GenderDropdown from "../Dropdown";
import ListGrid from "../ListGrid";
import ImgLayout from "../ImgLayout";
import StoreLayout from "../StoreLayout";
import { CustomFlex, PaddingContainer } from "../../styles";
import { LastRowType } from "../../mockValues3";

const LastRow = ({ lastRowData, isRTL, subdirectoryPath, reDirection, setGAEvent, setItem }: { lastRowData: LastRowType, isRTL: boolean, subdirectoryPath?: string, reDirection?: (props: string, home: boolean) => void, setGAEvent?: () => void, setItem?: () => void }) => {
	// const [currentMenu, setCurrentMenu] = useState("three-col-layout");
	// const menuSwitcher = (menuType: string, menuData: any, menuId: string | number) => {
	// 	switch (menuType) {
	// 	case "three-col-layout":
	// 		return <GenderDropdown data={menuData} id={menuId} isRTL={isRTL} />;
	// 	case "img-layout":
	// 		return <ImgLayout data={menuData} />;
	// 	case "list-grid":
	// 		return <ListGrid isRTL={isRTL} data={menuData} />;
	// 	case "two-col-layout-1":
	// 		return <StoreLayout data={menuData} />;
	// 	case "two-col-layout-2":
	// 		return <StoreLayout data={menuData} />;
	// 	default:
	// 		return <div/>;
	// 	}
	// };

	const Nav = ({ data, id, type }: { data: any, id: string, type: string }) => {
		return (<>
			{(type === "three-col-layout") && <GenderDropdown setItem={setItem} data={data} id={id} isRTL={isRTL} />}
			{(type === "img-layout") && <ImgLayout data={data} />}
			{(type === "list-grid") && <ListGrid data={data} isRTL={isRTL} />}
			{(type === "two-col-layout-1") && <ListGrid data={data} />}
			{(type === "two-col-layout-2") && <StoreLayout data={data} />}
		</>);
	};

	const customHref = (url: string, alt: string) => {
		if (subdirectoryPath && reDirection && alt === "3D try on") {
			reDirection(subdirectoryPath, true);
		} else {
			window.location.href = url;
		}
		if (alt === "3D try on")
			setGAEvent?.();
	};

	return (
		<PaddingContainer>
			<LastRowContainer /*onMouseOver={(e) => (e.target as HTMLDivElement)?.id && setCurrentMenu((e.target as HTMLDivElement)?.id)} onMouseLeave={() => setCurrentMenu("")}*/>
				<CustomFlex>
					{lastRowData?.menu?.map(ld => {
						return (<LastRowLinkContainer key={ld.label}>
							<LastRowLink className="getGaData" href={ld?.url} id={ld.id}>{ld.label}</LastRowLink>
							{ld.data && <DropdownContainer isRTL={isRTL} /*active={currentMenu===ld.id}*/>
								{/* {menuSwitcher(ld.type, ld.data, ld.id)} */}
								<Nav data={ld.data} id={ld.id} type={ld.type} />
							</DropdownContainer>}
						</LastRowLinkContainer>);
					})}
				</CustomFlex>
				<CustomFlex icons>
					{lastRowData?.imageLink?.map(im => <div key={im.altText} onClick={() => customHref(im?.url, im.altText)}><HeaderImageLink className="getGaData" src={im.imgLink} alt={im.altText} /></div>)}
				</CustomFlex>
			</LastRowContainer>
		</PaddingContainer>
	);
};

export default LastRow;
