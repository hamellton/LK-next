import React, { useEffect, useState } from "react";
import * as Icons from "../../../../../Icons/index";
import { DeviceTypes } from "../../../../../Types/general";
import { DataType } from "../../Header.types";
import { PaddingContainer } from "../../styles";
import SearchBar from "../SearchBar";
import { ActionLink, ActionLinksContainer, CircleFont, CircularBack, ExchangeFlowTitleContainer, HeaderIcon, HeaderImage, HeaderRightWrapper, Icon, IconImage, ImageContainer, MsiteCircleFont, MsiteImageContainer, PhoneNumberImage, SecondRowContainer, SignInDropActions, SignInDropBox, SpanButton } from "./styles";
export interface secondRowType {
	onQrClick?: () => void
	onWishlistClick: () => void,
	onSignInClick: () => void,
	onSignUpClick: () => void,
	onTrackOrderClick: () => void,
	onCartClick: () => void,
	searchFunction: () => void,
	getQueryData: (arg: string) => void,
	isLoading: boolean,
	trendingMenus: Array<{ text: string, link: string }>
	signedInData: {
		isSignedIn: boolean,
		username: string
	},
	signInDropLinks?: { link: string, text: string }[]
	wishlistCount: string | number,
	cartCount: string | number,
	productData?: ProductDataType,
	configData: DataType,
	localeData: DataType,
	logoutHandler: () => void,
	showActionLink?: boolean,
	languageText?: string,
	onLanguageChange: () => void,
	showLanguageOption: boolean,
	isRTL: boolean
	path: string,
	searchBarPlaceholder?: string
	phoneNumberImg?: string,
	deviceType: DeviceTypes,
	phoneNumber: string,
	onMenuClick: () => void,
	onMobileClick: () => void,
	showSideNav?: boolean,
	isExchangeFlow?: boolean,
	exchangeFlowText?: string,
	onExchangeBackClick?: () => void
	country?: string
	updateSearchBarStatus?: (status: boolean) => void,
	onSearchClick: () => void,
	isNewSearch?: boolean,
	showBackButton?: boolean,
	router?: any;
	onLogoClick?: () => void;
	subdirectoryPath?: string;
	sessionStorageHelper: any
}
export interface ProductDataType {
	typeAhead: any,
	productRecommendations: any
}


const SecondRow = ({ isNewSearch, showBackButton = false, onSearchClick, updateSearchBarStatus, onQrClick, onWishlistClick, onSignInClick, onSignUpClick, onTrackOrderClick, onCartClick, signedInData, wishlistCount, cartCount, isLoading, searchFunction, trendingMenus, productData, configData, localeData, logoutHandler, showActionLink = true, getQueryData, showLanguageOption, languageText, onLanguageChange, isRTL, path, searchBarPlaceholder, phoneNumberImg, signInDropLinks, deviceType, phoneNumber, onMenuClick, onMobileClick, showSideNav, isExchangeFlow, exchangeFlowText, onExchangeBackClick, country, router, onLogoClick, subdirectoryPath, sessionStorageHelper }: secondRowType) => {
	const [signInHovered, setSignInHovered] = useState(false);
	const [showSearch, setShowSearch] = useState(false);

	useEffect(() => {

		if (updateSearchBarStatus) {
			updateSearchBarStatus(showSearch);
		}
	}, [showSearch]);

	return (
		<>
			{deviceType == DeviceTypes.DESKTOP &&
				<PaddingContainer>
					<SecondRowContainer>
						<ImageContainer isRTL={isRTL}>
							<a href={subdirectoryPath === "" ? "/" : `${subdirectoryPath}`} onClick={() => {
								if (router) router.push("/");
								else window.open(path || subdirectoryPath === "" ? "/" : `${subdirectoryPath}`);
							}}>
								<HeaderImage isRTL={isRTL} alt="Lenskart" src="https://static.lenskart.com/media/desktop/img/site-images/main_logo.svg" title="Lenskart" />
							</a>
							{phoneNumberImg && <PhoneNumberImage alt="ph-no" src={phoneNumberImg} />}
						</ImageContainer>
						<SearchBar onQrClick={onQrClick} country={country} deviceType={deviceType} searchFunction={searchFunction} getQueryData={getQueryData} delay={200} trendingMenus={trendingMenus} matchingKeywordsData={productData?.typeAhead} productData={productData?.productRecommendations} isRTL={isRTL} placeholderText={searchBarPlaceholder} localeData={localeData} path={path} router={router} subdirectoryPath={subdirectoryPath} sessionStorageHelper={sessionStorageHelper} />
						<ActionLinksContainer showActionLink={showActionLink}>
							{showLanguageOption && <ActionLink styleLoading={isLoading} onClick={onLanguageChange}>{languageText}</ActionLink>}
							<ActionLink styleLoading={isLoading} onClick={onTrackOrderClick}>{localeData?.TRACK_ORDER}</ActionLink>

							{!signedInData.isSignedIn ? <ActionLink styleLoading={isLoading}><SpanButton onClick={onSignInClick}>{localeData?.SIGN_IN}</SpanButton> {"&"} <SpanButton onClick={onSignUpClick}>{localeData?.SIGN_UP}</SpanButton></ActionLink>
								: <ActionLink styleLoading={isLoading} onMouseOver={() => setSignInHovered(true)} onMouseOut={() => setSignInHovered(false)}>
									{(signedInData.username)?.length > 26 ? `${(signedInData.username)?.slice(0,26)}...` : (signedInData.username)}
									<span style={{ transform: signInHovered && !isLoading ? "rotate(180deg)" : "none" }}>&#9662;</span>
									{signInHovered && !isLoading && <SignInDropBox>
										{/* <NextHead */}
										{signInDropLinks?.map(si => si ? (
											<SignInDropActions
												key={si?.text}
												onClick={() => {
													if (router)
														router.push(`/${si?.link?.charAt(0) === "/" ? si?.link?.substring(1) : si?.link}`);
													else
														window.open(`/${si?.link?.charAt(0) === "/" ? si?.link?.substring(1) : si?.link}`);
												}}
												href={`/${si?.link?.charAt(0) === "/" ? si?.link?.substring(1) : si?.link}`}
											>
												{si?.text}
											</SignInDropActions>) : null
										)}
										{/* <SignInDropActions href={`localhost:3000/en-sa/customer/account/`}>{localeData?.MY_ORDERS}</SignInDropActions>
								<SignInDropActions href={`localhost:3000/en-sa/customer/prescriptions/`}>{localeData?.MY_PRESCRIPTION}</SignInDropActions>
								<SignInDropActions href={`localhost:3000/en-sa/customer/account/storecredit/`}>{localeData?.MY_STORE_CREDIT}</SignInDropActions>
								<SignInDropActions href={`localhost:3000/en-sa/customer/ditto-profile/`}>{localeData?.MY_DITTO}</SignInDropActions>
								<SignInDropActions href={`localhost:3000/en-sa/customer/account/edit/`}>{localeData?.ACCOUNT_INFO}</SignInDropActions> */}
										<SignInDropActions onClick={logoutHandler}>{localeData?.LOGOUT}</SignInDropActions>
									</SignInDropBox>}
								</ActionLink>}

							<ActionLink styleLoading={isLoading} onClick={onWishlistClick}>
								{/* <IconImage isRTL={isRTL} styleLoading={isLoading} alt="icon" src="https://static.lenskart.com/media/desktop/img/wishlist.png"></IconImage> */}
								<IconImage isRTL={isRTL} styleLoading={isLoading}><Icons.WishListNew /></IconImage>
								<span>
									{localeData?.WISHLIST}
								</span>
								{wishlistCount > 0 && !isLoading && <CircleFont isRTL={isRTL}>{wishlistCount}</CircleFont>}
							</ActionLink>
							<ActionLink styleLoading={isLoading} onClick={onCartClick}>
								{/* <IconImage isRTL={isRTL} styleLoading={isLoading} alt="icon" src="https://static.lenskart.com/media/desktop/img/cart.png"></IconImage> */}
								<IconImage isRTL={isRTL} styleLoading={isLoading} ><Icons.ShoppingBagNew /></IconImage>
								<span>
									{localeData?.CART}
								</span>
								{cartCount > 0 && !isLoading && <CircleFont isRTL={isRTL}>{cartCount}</CircleFont>}
							</ActionLink>
						</ActionLinksContainer>
					</SecondRowContainer>
				</PaddingContainer>}
			{deviceType == DeviceTypes.MOBILE && !showSearch &&


				<SecondRowContainer isExchangeFlow={isExchangeFlow}>


					{!isExchangeFlow && (
						<MsiteImageContainer isRTL={isRTL} id="msite-image-container">
							<HeaderIcon className="mobile-menu" isSelected={showSideNav ?? false} onClick={onMenuClick}>
								{showBackButton ? <Icons.BackArrow /> : <Icons.HamburgerMenuIcon />}
							</HeaderIcon>

							<a href={subdirectoryPath === "" ? "/" :`${subdirectoryPath}`} onClick={() => {
								onLogoClick?.();
								if (router) router.push("/");
								else window.open(path || subdirectoryPath === "" ? "/" :`${subdirectoryPath}`);
							}}>
								<HeaderImage alt="Lenskart" width={100} src="https://static.lenskart.com/media/desktop/img/site-images/main_logo.svg" title="Lenskart" />
							</a>
							{phoneNumberImg && <a href={`tel:${phoneNumber}`} onClick={onMobileClick}> <PhoneNumberImage width={80} alt="ph-no" src={phoneNumberImg} /></a>}
						</MsiteImageContainer>
					)}
					{isExchangeFlow && (
						<ExchangeFlowTitleContainer>
							<CircularBack onClick={onExchangeBackClick}>&#8592;</CircularBack>
							<h1>
								{exchangeFlowText}
							</h1>
						</ExchangeFlowTitleContainer>
					)}
					<HeaderRightWrapper >
						{showLanguageOption && <ActionLink className="lanswitcher" styleLoading={isLoading} onClick={onLanguageChange}>{languageText}</ActionLink>}

						{!isExchangeFlow && configData?.SHOW_QR && (
							<ActionLink styleLoading={isLoading} onClick={onQrClick}>
								<Icon width={19} height={19} alt="qr-scanner" src="https://static1.lenskart.com/media/desktop/img/DesignStudioIcons/QrScanner.svg"></Icon>
							</ActionLink>
						)}
						{!isExchangeFlow && (
							<ActionLink styleLoading={isLoading} onClick={onWishlistClick}>
								<HeaderIcon isSelected={false}>
									<Icons.WishListNew />
								</HeaderIcon>

								{wishlistCount > 0 && !isLoading && <MsiteCircleFont isRTL={isRTL}>{wishlistCount}</MsiteCircleFont>}
							</ActionLink>
						)}
						{isNewSearch ? <HeaderIcon isSelected={false} onClick={onSearchClick}>
							<Icons.SearchNew />
						</HeaderIcon>

							: <HeaderIcon isSelected={false} onClick={() => { setShowSearch(true); onSearchClick(); }}>
								<Icons.SearchNew />
							</HeaderIcon>}
						{!isExchangeFlow && (
							<ActionLink styleLoading={isLoading} onClick={onCartClick}>
								<HeaderIcon isSelected={false}>
									<Icons.ShoppingBagNew />
								</HeaderIcon>

								{cartCount > 0 && !isLoading && <MsiteCircleFont isRTL={isRTL}>{cartCount}</MsiteCircleFont>}
							</ActionLink>
						)}
					</HeaderRightWrapper>
				</SecondRowContainer>


			}
			{deviceType == DeviceTypes.MOBILE && showSearch &&

				<SearchBar onQrClick={onQrClick} onClose={() => setShowSearch(false)} deviceType={deviceType} searchFunction={searchFunction} getQueryData={getQueryData} delay={200} trendingMenus={trendingMenus} matchingKeywordsData={productData?.typeAhead} productData={productData?.productRecommendations} isRTL={isRTL} placeholderText={searchBarPlaceholder} localeData={localeData} path={path} country={country} router={router} subdirectoryPath={subdirectoryPath} sessionStorageHelper={sessionStorageHelper} />

			}

		</>
	);
};

export default SecondRow;
