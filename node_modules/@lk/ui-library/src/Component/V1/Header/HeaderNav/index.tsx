import React, { useEffect, useState } from "react";
import Accordion from "../../Footer/FooterAccordion";
import { HeaderNavTypes } from "./HeaderNav.types";
import { menuData } from "./mockValues3";
import { ArrowRight, DayCount, DaysContainer, DaysText, DaysWrapper, NavAvatar, NavCollaspeContainer, NavigationContainer, NavigationWrapper, NavItem, NavLink, NavMenuContainer, NavTitle, NavUnitContainer, NavUserActionBtn, NavUserBelowText, NavUserContainer, NavUserContainerWrapper, NavUserInfo, NavUserText, TierName, TierWrapper } from "./styles";
// import { topLinks as mockTopLinks } from "./mockValues3";

const HeaderNav = ({ logoutHandler, configData = { GUEST_MSG: "Hi, Specsy" }, dataLocale, signedInData = { isSignedIn: true, username: "Test" }, userInfo, goToLoginOrRegister, isRTL = false, navigationData, subdirectoryPath, getGoldMembershipHandler, gaCtaClick }: HeaderNavTypes) => {
	const {
		MY_ORDERS,
		LOGOUT,
		CONTACT_US,
		REVIEWS_AND_RATINGS,
		SHOP_INSTAGRAM,
		LENSKART_INTERNATIONAL,
		MANAGE_NOTIFICATIONS,
		HI, SYMBOL_COMMA, HI_GUEST,
		DAYS_LEFT_TEXT,
		LOGIN_SIGNUP_TEXT,
		OFFER_TEXT_FOR_GOLD,
		LOGIN_OR_REGISTER,
		GET_GOLD_MEMBERSHIP,
		NUM_365_PLUS,
		MY_3D_MODAL
	} = dataLocale;

	const menuItem = navigationData || menuData; // * will take mock value if no config

	// const GOLD_TIER = { three65Enable: "ON", savings: "OFF", defaultTierName: "gold_original", RENEW_GOLD_CTA: { gold_pro: "120", gold_original: "120" } };
	// const { isLoyalty,tierLabel,firstName,lastName } = userInfo.userDetails??{};
	const { isLoyalty, loyaltyExpiryDate, tierLabel, firstName, lastName } = userInfo.userDetails ?? {};

	const currentDate = new Date().getTime();
	const difference = (loyaltyExpiryDate || 0) - currentDate;
	const daysLeft = Math.round(difference / (1000 * 60 * 60 * 24));
	const { GUEST_MSG, MOBILE_NAV_HEADER } = configData;
	const mobileNavHeader = typeof MOBILE_NAV_HEADER === "string" ? JSON.parse(MOBILE_NAV_HEADER) : MOBILE_NAV_HEADER;
	const [isExpand, setIsExpand] = useState(-1);
	const [innerHeight, setInnerHeight] = useState(0);

	const handleExpand = (index: number) => {
		if (index === isExpand) {
			setIsExpand(-1);
		} else setIsExpand(index);
	};
	const gotLoginOrRegisterFunc = () => {
		goToLoginOrRegister();
	};
	// const {firstName,lastName,isLoyalty, loyaltyExpiryDate, loyaltyDiscount, tierLabel, tierName } = userInfo;

	const getWelcomeTitle = () => {

		if (signedInData && signedInData.username) {
			return `${HI}${SYMBOL_COMMA} ${firstName} ${lastName || ""}`;
		}
		return GUEST_MSG ? GUEST_MSG : HI_GUEST;
	};
	const arrow = !isRTL ? <span>&gt;</span> : <span>&lt;</span>;
	const handleResizePres = () => {
		setInnerHeight(window?.innerHeight);
		
	};
	useEffect(() => {
		handleResizePres();
		window.addEventListener("resize", handleResizePres, { passive: true });
	
		return () => {
			window.removeEventListener("resize", handleResizePres);
		};
	}, []);
	
	return (<NavigationWrapper>
		<NavigationContainer innerHeight={innerHeight}>
			<NavCollaspeContainer>
				<NavMenuContainer id="menu-container">
					<NavUserContainerWrapper id="user-content" isRTL={isRTL}>
						<NavUserContainer id="user-container" isRTL={isRTL}>
							<NavAvatar alt="user-icon" src="https://static.lenskart.com/media/mobile/images/user-icon.svg" data-src="https://static.lenskart.com/media/mobile/images/user-icon.svg" />
							<NavUserInfo>
								<NavUserText isRTL={isRTL}>
									{getWelcomeTitle()}
								</NavUserText>


								{tierLabel && <TierWrapper>
									<TierName>
										{tierLabel}
									</TierName>
								</TierWrapper>}
								{signedInData.isSignedIn ? isLoyalty ? <DaysWrapper>
									<DaysContainer>
										<DaysText>
											{DAYS_LEFT_TEXT || "Days Left"}
										</DaysText>
										<DayCount>
											{/* {three65Enable === 'ON' && daysLeft > 365 ? NUM_365_PLUS : daysLeft} */}
											{daysLeft > 365 ? (NUM_365_PLUS || "365+") : daysLeft}
										</DayCount>
									</DaysContainer>
								</DaysWrapper> : <NavUserBelowText >
									{OFFER_TEXT_FOR_GOLD}
								</NavUserBelowText> : <NavUserBelowText >
									{LOGIN_SIGNUP_TEXT}
								</NavUserBelowText>}


							</NavUserInfo>

						</NavUserContainer>
						{signedInData.isSignedIn ? !isLoyalty ? <NavUserActionBtn onClick={getGoldMembershipHandler}
						//href={subdirectoryPath + "/customer/account/login"}
						>
							{GET_GOLD_MEMBERSHIP || "GET GOLD MEMBERSHIP"}
						</NavUserActionBtn> : <></> : <NavUserActionBtn onClick={() => gotLoginOrRegisterFunc()} >
							{LOGIN_OR_REGISTER || "Login or Register"}
						</NavUserActionBtn>}
					</NavUserContainerWrapper>
					<NavUnitContainer>
						{signedInData.isSignedIn && <>
							{mobileNavHeader?.MY_ORDERS && <NavItem onClick={()=>{gaCtaClick(MY_ORDERS);}} isRTL={isRTL} id="nav-item" href={subdirectoryPath + "/sales/order/history"}>
								<NavLink isRTL={isRTL}>
									{MY_ORDERS}
								</NavLink>
								<ArrowRight>
									{arrow}
								</ArrowRight>
							</NavItem>}
							{mobileNavHeader?.MY_3D_MODAL && <NavItem onClick={()=>{gaCtaClick(MY_3D_MODAL ?? "My 3D Modal");}} isRTL={isRTL} id="nav-item" href={subdirectoryPath + "/customer/3D-profile"}>
								<NavLink isRTL={isRTL} >
									{MY_3D_MODAL ?? "My 3D Modal"}
								</NavLink>
								<ArrowRight>
									{arrow}
								</ArrowRight>
							</NavItem>}
							{mobileNavHeader?.MANAGE_NOTIFICATIONS && <NavItem onClick={()=>{gaCtaClick(MANAGE_NOTIFICATIONS);}} isRTL={isRTL} id="nav-item" href={subdirectoryPath + "/customer/manage-notification"}>
								<NavLink isRTL={isRTL}>
									{MANAGE_NOTIFICATIONS}
								</NavLink>
								<ArrowRight>
									{arrow}
								</ArrowRight>
							</NavItem>}
						</>}
						{mobileNavHeader?.CONTACT_US && <NavItem onClick={()=>{gaCtaClick(CONTACT_US ?? "Contact Us");}} isRTL={isRTL} id="nav-item" href={subdirectoryPath + "/support"}>
							<NavLink isRTL={isRTL} >
								{CONTACT_US ?? "Contact Us"}
							</NavLink>
							<ArrowRight>
								{arrow}
							</ArrowRight>
						</NavItem>}
						{mobileNavHeader?.REVIEWS_AND_RATINGS && <NavItem onClick={()=>{gaCtaClick(REVIEWS_AND_RATINGS ?? "Reviews and Ratings");}} isRTL={isRTL} id="nav-item" href={subdirectoryPath + "/reviews"}>
							<NavLink isRTL={isRTL}>
								{REVIEWS_AND_RATINGS ?? "Reviews and Ratings"}
							</NavLink>
							<ArrowRight>
								{arrow}
							</ArrowRight>
						</NavItem>}
						{mobileNavHeader?.SHOP_INSTAGRAM && <NavItem onClick={()=>{gaCtaClick(SHOP_INSTAGRAM ?? "Shop Instagram");}} isRTL={isRTL} id="nav-item" href={subdirectoryPath + "/shop-instagram"}>
							<NavLink isRTL={isRTL}>
								{SHOP_INSTAGRAM ?? "Shop Instagram"}
							</NavLink>
							<ArrowRight>
								{arrow}
							</ArrowRight>
						</NavItem>}
						{mobileNavHeader?.LENSKART_INTERNATIONAL && <NavItem onClick={()=>{gaCtaClick(LENSKART_INTERNATIONAL ?? "Lenskart International");}} isRTL={isRTL} id="nav-item" href="https://international.lenskart.com/">
							<NavLink isRTL={isRTL}>
								{LENSKART_INTERNATIONAL ?? "Lenskart International"}
							</NavLink>
							<ArrowRight>
								{arrow}
							</ArrowRight>
						</NavItem>}

					</NavUnitContainer>

					{
						menuItem?.map((i: any) => <>
							<NavUnitContainer id="nav-unit-container">
								<NavTitle isRTL={isRTL}>
									{i.categoryTitle}
								</NavTitle>
								{
									i?.items?.map((i: any, index: number) =>
										<div key={index}>

											{i.label != "Men" && i.label != "Women" && i.label != "Kids" && <NavItem onClick={()=>{gaCtaClick(i.label);}} isRTL={isRTL} href={i.routerLink}>
												<NavLink isRTL={isRTL}>
													{i.label}
												</NavLink>
											</NavItem>}

											{i.label == "Men" && <Accordion deviceSpecificIssue={true} width="100%" isHeaderStyle={true} headerNavIcon={true} key={index} contentPadding={"0px"} borderBottomStyle={true} contentColor={"#18cfa8"} contentBgColor={"#27394e"} iconColor={{ color: "#fff" }} titleFontSize={14} btnText={""} isMaxHeight={true} canCollapse={true} icon={""} expand={isExpand == index} stylePadding={"10px 10px 10px 0"} handleExpand={() => handleExpand(index)} showBorderTop={false} backgroundColor={"#27394e"} color={"#ffff"} title={i.label} isRTL={isRTL}>
												{i.catItems.map((i: any) => <><NavItem onClick={()=>{gaCtaClick(i.label);}} isRTL={isRTL} href={i.routerLink}>
													<NavLink isRTL={isRTL}>
														{i.label}
													</NavLink>
												</NavItem></>)}

											</Accordion>}
											{i.label == "Women" && <>  <Accordion deviceSpecificIssue={true} width="100%" isHeaderStyle={true} headerNavIcon={true} key={index} contentPadding={"0px"} borderBottomStyle={true} contentColor={"#18cfa8"} contentBgColor={"#27394e"} iconColor={{ color: "#fff" }} titleFontSize={14} btnText={""} isMaxHeight={true} canCollapse={true} icon={""} expand={isExpand == index} stylePadding={"10px 10px 10px 0"} handleExpand={() => handleExpand(index)} showBorderTop={false} backgroundColor={"#27394e"} color={"#ffff"} title={i.label} isRTL={isRTL}>
												{i.catItems.map((i: any) => <><NavItem onClick={()=>{gaCtaClick(i.label);}} isRTL={isRTL} href={i.routerLink}>
													<NavLink isRTL={isRTL}>
														{i.label}
													</NavLink>
												</NavItem></>)}

											</Accordion>

											</>}
											{i.label == "Kids" && <>  <Accordion deviceSpecificIssue={true} width="100%" isHeaderStyle={true} headerNavIcon={true} key={index} contentPadding={"0px"} borderBottomStyle={true} contentColor={"#18cfa8"} contentBgColor={"#27394e"} iconColor={{ color: "#fff" }} titleFontSize={14} btnText={""} isMaxHeight={true} canCollapse={true} icon={""} expand={isExpand == index} stylePadding={"10px 10px 10px 0"} handleExpand={() => handleExpand(index)} showBorderTop={false} backgroundColor={"#27394e"} color={"#ffff"} title={i.label} isRTL={isRTL}>
												{i.catItems.map((i: any) => <><NavItem onClick={()=>{gaCtaClick(i.label);}} isRTL={isRTL} href={i.routerLink}>
													<NavLink isRTL={isRTL}>
														{i.label}
													</NavLink>
												</NavItem></>)}

											</Accordion>

											</>}

										</div>)
								}
							</NavUnitContainer>
						</>)
					}

					{signedInData?.isSignedIn && <NavUnitContainer>
						<NavItem onClick={()=>{logoutHandler(); gaCtaClick(LOGOUT ?? "Logout");}} isRTL={isRTL}>
							<NavLink isRTL={isRTL}>
								{LOGOUT ?? "Logout"}
							</NavLink>

						</NavItem>
					</NavUnitContainer>}

					{/* {mockData2.data.map((i,index) => <>
						{i.title && <NavTitle>
							{i.title}
						</NavTitle>}
						{i.label!="Men" && i.label!= "Women" &&i.label!= "Kids" && <NavUnitContainer key={index}>
							{i.items?.map(i => <><NavItem>
								<NavLink isRTL={isRTL} href={i.link}>
									{i.label}
								</NavLink>
							</NavItem></>
							)}

						</NavUnitContainer>}

						{/*{i.label=="Men" && <Accordion isHeaderStyle={true} headerNavIcon={true} key={index} contentPadding={"0px"} borderBottomStyle={true} contentColor={"#18cfa8"} contentBgColor={"#27394e"} iconColor={{ color: "#fff" }} titleFontSize={12} btnText={""} isMaxHeight={true} canCollapse={true} icon={""} expand={isExpand==index} stylePadding={"10px 0px"} handleExpand={()=>handleExpand(index)} showBorderTop={false} font={TypographyENUM.lkSansMedium} backgroundColor={"#27394e"} color={"#ffff"} title={i.label} isRTL={false}>
							{i.catItems.map((i)=><><NavItem>
								<NavLink isRTL={isRTL} href={i.routerLink}>
									{i.label}
								</NavLink>
							</NavItem></>)}

						</Accordion> }
						{i.label=="Women" && <>  <Accordion isHeaderStyle={true} headerNavIcon={true} key={index} contentPadding={"0px"} borderBottomStyle={true} contentColor={"#18cfa8"} contentBgColor={"#27394e"} iconColor={{ color: "#fff" }} titleFontSize={12} btnText={""} isMaxHeight={true} canCollapse={true} icon={""} expand={isExpand==index} stylePadding={"10px 0px"} handleExpand={()=>handleExpand(index)} showBorderTop={false} font={TypographyENUM.lkSansMedium} backgroundColor={"#27394e"} color={"#ffff"} title={i.label} isRTL={false}>
							{i.catItems.map((i)=><><NavItem>
								<NavLink isRTL={isRTL} href={i.routerLink}>
									{i.label}
								</NavLink>
							</NavItem></>)}

						</Accordion>

						</> }
						{i.label=="Kids" && <>  <Accordion isHeaderStyle={true} headerNavIcon={true} key={index} contentPadding={"0px"} borderBottomStyle={true} contentColor={"#18cfa8"} contentBgColor={"#27394e"} iconColor={{ color: "#fff" }} titleFontSize={12} btnText={""} isMaxHeight={true} canCollapse={true} icon={""} expand={isExpand==index} stylePadding={"10px 0px"} handleExpand={()=>handleExpand(index)} showBorderTop={false} font={TypographyENUM.lkSansMedium} backgroundColor={"#27394e"} color={"#ffff"} title={i.label} isRTL={false}>
							{i.catItems.map((i)=><><NavItem>
								<NavLink isRTL={isRTL} href={i.routerLink}>
									{i.label}
								</NavLink>
							</NavItem></>)}

						</Accordion>

						</> }

					</>


					)} */}

				</NavMenuContainer>
			</NavCollaspeContainer>
		</NavigationContainer>
	</NavigationWrapper>);
};

export default HeaderNav;
