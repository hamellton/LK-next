import React, { useEffect } from "react";
import { useState } from "react";
import { ComponentSizeENUM, TypographyENUM } from "../../../Types/general";
import FilterItem from "../FilterItem";
import { AccordionGroupTypes, FilterTypes, OptionTypes, filterTypeENUM, handleClickAttrs } from "./Accordion.types";
import Accordion from "./AccordionItem";
import { CheckBoxLabel, Label, FilterItemsWrapper, FlexReverse, CountText, InputWrapper } from "./styles";

const Accordions = ({ id, filters, font, onClick, filterSelected, isRTL = false, defaultExpand = -1, padding = false }: AccordionGroupTypes) => {
	const [expandIndex, setExpandIndex] = useState(defaultExpand);
	const [expandIndexId, setExpandIndexId] = useState("");
	const handleExpand = (index: number) => {
		if (index === expandIndex) {
			setExpandIndex(0);
		} else setExpandIndex(index);
	};

	const handleClick = ({ item, selectedOption, event }: handleClickAttrs) => {
		const targetValue: string = event.target.value;
		onClick({ event: targetValue, item, selectedOption });
		return null;
	};

	useEffect(() => {
		setExpandIndexId(filters[expandIndex > 0 ? expandIndex-1 : -1]?.id);
	}, [expandIndex]);

	return (
		<>
			{filters.map((item: FilterTypes, index: number) => {
				return (
					<Accordion
						font={font}
						title={item.name}
						expand={index === 0 && id !== "pdp-additional-info-details" ? true : item.canCollapse ? expandIndexId === item.id : true}
						handleExpand={() => handleExpand(index + 1)}
						key={index + 1}
						id={item?.id || id}
						canCollapse={item.canCollapse}
						showBorderTop={item.showBorderTop}
						isMaxHeight={item.type === filterTypeENUM.CHECKBOX}
						isComponent={item.type === filterTypeENUM.COMPONENT}
						padding={padding}
						height={item?.height}
						// isRTL={isRTL}
					>
						{item.type === filterTypeENUM.COMPONENT && item?.component && <>{item?.component()}</>}
						{item.type !== filterTypeENUM.COMPONENT &&
						<FilterItemsWrapper column={item.type === filterTypeENUM.CHECKBOX} isRTL={false}>
							{item.options && item.options.map((item2: OptionTypes, index: number) => (
								<FilterItemsWrapper key={index} isRTL={false}>
									<Label>
										{item.type === filterTypeENUM.IMAGE_SELECTION && (
											<FilterItem
												id={`filter-item-image-${index.toString()}`}
												checked={filterSelected?.[item.id]?.includes(item2.id)}
												componentSize={ComponentSizeENUM.medium}
												font={TypographyENUM.serif}
												disabled={false}
												title={item2.title}
												onClick={(event) => handleClick({ event, item, selectedOption: item2 })}
												imageUrl=
													{item2.imageUrl} />

										)}

										{item.type === filterTypeENUM.CHECKBOX && (
											<>

												{/* {!isRTL &&  */}
												<InputWrapper>
													<input
														type="checkbox"
														name={item2.title}
														id={`${item.id}-${index.toString()}`}
														onChange={(event) => handleClick({ event, item, selectedOption: item2 })}
														checked={filterSelected?.[item.id]?.includes(item2.id)}
														style={{ visibility: filterSelected?.[item.id]?.includes(item2.id) ? "visible" : "hidden" }}
													/>
												</InputWrapper>
												{/* } */}

												<CheckBoxLabel isRTL={isRTL}>
													{!isRTL ? item2.title +
														"(" +
														item2.productsCount +
														")" : 
														// item2.title + "(" +
														// item2.productsCount +
														// ")"
														<FlexReverse isRTL>
															<CountText>{"(" +
															item2.productsCount +
															")"}</CountText>
															<span>{item2.title}</span>

														</FlexReverse>
													}
												</CheckBoxLabel>

												{/* {isRTL && <input
													type="checkbox"
													name={item2.title}
													id=""
													onChange={(event) => handleClick({ event, item, selectedOption: item2 })}
													checked={item.selectedOption?.includes(item2.id)}
												/>} */}
											</>
										)}

									</Label>
								</FilterItemsWrapper>
							)
							)}
						</FilterItemsWrapper>
						}
					</Accordion>
				);
			})}
		</>
	);
};

export default Accordions;
