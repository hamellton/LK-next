/* eslint-disable react/prop-types */
import React, { useState, useRef, useCallback, useMemo } from "react";

export default function OverlayTrigger({ overlay, placement = "top", children, delayHide }:any) {
	const [showBox, setShowBox] = useState(false);
	const showBoxRef: React.MutableRefObject<any> = useRef();
	const timerRef: React.MutableRefObject<any> = useRef(null);
	const handleBoxToggle = useCallback((open: boolean) => {
		if (timerRef.current) {
			clearTimeout(timerRef.current);
			timerRef.current = null;
		}
		if (delayHide && !open) {
			timerRef.current = setTimeout(() => {
				setShowBox(open);
			}, delayHide);
		} else setShowBox(open);
	}, []);

	const modChild = useMemo(() => {
		if (!children) return children;
		else if (Array.isArray(children)) {
			return React.Children.map(children, child => {
				if (!child) return child;
				return React.cloneElement(child, {
					onMouseEnter: () => handleBoxToggle(true),
					onMouseLeave: () => handleBoxToggle(false),
					ref: showBoxRef,
					"data-testid": "overlay-test",
				});
			});
		} else if (children && typeof children === "object") {
			return React.cloneElement(children, {
				onMouseEnter: () => handleBoxToggle(true),
				onMouseLeave: () => handleBoxToggle(false),
				ref: showBoxRef,
				"data-testid": "overlay-test",
			});
		}
		return children;
	}, [children]);

	const modOverlay = useMemo(() => {
		if (!overlay) return overlay;
		else if (Array.isArray(overlay)) {
			return overlay.map(child => {
				if (!child) return child;
				const clonedChild = { ...child };
				clonedChild.props = {
					...clonedChild?.props,
					reference: showBoxRef.current,
					placement,
				};
				return clonedChild;
			});
		} else if (overlay && typeof overlay === "object") {
			return {
				...overlay,
				props: { ...overlay?.props, reference: showBoxRef.current, placement },
			};
		}
		return overlay;
	}, [overlay, showBoxRef.current, modChild]);

	return (
		<>
			{modChild}
			{showBox && <div data-testid="overlay-test-box">{modOverlay}</div>}
		</>
	);
}
