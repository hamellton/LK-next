import React, { useEffect, useRef, useState } from "react";
import {
	HeadWrapper,
	Cart,
	B,
	ShowCartBtn,
	PriceBreakupWrapper,
	BreakUp,
	HR,
	Text,
	Policy,
	A,
	Flex,
	InfoText,
	InfoSpan
} from "./styles";
import { CartAmountType, PriceBreakupTypes } from "./PriceBreakup.types";
import Alert from "../Alert";
import { AlertColorsENUM, ComponentSizeENUM, TypographyENUM } from "../../../../Types/general";

/**
 * Default PriceBreakup Component
 */
const NewPriceBreakup = ({
	id,
	width,
	font,
	priceData,
	onShowCartBtnClick,
	showPolicy,
	policyLinks,
	showCart,
	// isRTL = false,
	currencyCode,
	infoText="",
	isMobileView,
	enableTax
}: PriceBreakupTypes) => {

	const CURRENCY_SYMBOL = currencyCode ? currencyCode : "â‚¹";
	const [showInfo, setShowInfo] = useState(false);
	const timeoutRef = useRef<ReturnType<typeof setTimeout>>();
	function showInfoHandler() {
		setShowInfo(true);
		timeoutRef.current = setTimeout(() => {
			setShowInfo(false);
		}, 2000);
	}

	useEffect(() => {
		return () => {
			clearTimeout(timeoutRef.current);
		};
	}, []);	

	return priceData && priceData.length ? (
		<>
			<PriceBreakupWrapper id={id} width={width}>
				{showCart &&
				<>
					<HeadWrapper>
						<Cart>
							Cart: <B>{CURRENCY_SYMBOL}{priceData[priceData.length-1]?.amount}</B>
						</Cart>
						<ShowCartBtn onClick={onShowCartBtnClick}>
							<B>Show Cart</B>
						</ShowCartBtn>
					</HeadWrapper>
					<HR />
				</>
				}
				{priceData.map((price, index) => {
					if(price.type === CartAmountType.FREE) {
						return enableTax && (
							<div key={index}>
								<BreakUp>
									<Text styleFont={font}>{price.label}</Text>
									<Text styleFont={font} isBold={true} isDiscount={true}>Free</Text>
								</BreakUp>
								{price?.addDashedLine && <HR/>}
							</div>
						);
					} else if(price.type === CartAmountType.TOTAL) {
						return (
							<div key={index}>
								<BreakUp>
									<Text styleFont={font} isBold={true} isTotal={true}>{price.label}</Text>
									<Text styleFont={font} isBold={true} isTotal={true}>{CURRENCY_SYMBOL}{price?.amount || 0}</Text>
								</BreakUp>
								{price?.addDashedLine && <HR/>}
							</div>
						);
					} else if(price.type === CartAmountType.TOTALBTAX) {
						return(
							<div key={index}>
								<BreakUp>
									<Text styleFont={font} isBold={true} isTotal={false}>{price.label}</Text>
									<Text styleFont={font} isBold={true} isTotal={false}>{CURRENCY_SYMBOL}{price?.amount || 0}</Text>
								</BreakUp>
								{price?.addDashedLine && <HR />}
							</div>
						);
					} else {
						return (
							<div key={index}>
								<BreakUp>
									<Text styleFont={font} infoTooltip={(price.label === "Tax" && infoText) ? true : false}>{price.label}{(price.label === "Tax" && infoText) ? <InfoSpan><img src="https://static1.lenskart.com/media/desktop/img/DesignStudioIcons/InfoIcon.svg" onClick={showInfoHandler} /></InfoSpan> : ""}</Text>
									<Text styleFont={font} isBold={false} isDiscount = {price.type === CartAmountType.NEGATIVE}>{ price.type === CartAmountType.NEGATIVE ? "-" : ""}{CURRENCY_SYMBOL}{price?.amount || 0}</Text>
								</BreakUp>
								{price?.addDashedLine && <HR/>}
							</div>
						);
					}

				})}
			</PriceBreakupWrapper>
			{showPolicy && <Policy>By continuing, I agree to the <A target="_blank" href={policyLinks?.termsOfUse}>Terms of use</A> & <A target="_blank" href={policyLinks?.privacyPolicy}>Privacy Policy</A></Policy>}
			{infoText && <InfoText isMobileView={isMobileView} showInfo={showInfo}>{Array.isArray(infoText) && infoText?.length > 1 ? infoText.map((text: string, index: number) => <span key={index+"info"}>- {text}</span>) : <>{infoText}</> }</InfoText>}
		</>
	) : (
		<PriceBreakupWrapper id={id} width={width}>
			<Alert
				color={AlertColorsENUM.blue}
				componentSize={ComponentSizeENUM.large}
				font={TypographyENUM.lkSansRegular}
				id="Alert"
			>
				<Flex>
					<span>Your shopping cart is empty</span>
				</Flex>
			</Alert>
		</PriceBreakupWrapper>
	);
};
export default NewPriceBreakup;
