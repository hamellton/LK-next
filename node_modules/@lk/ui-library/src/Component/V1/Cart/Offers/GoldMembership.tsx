import React, { useState } from "react";
import { useEffect } from "react";
import styled, { keyframes } from "styled-components";
import { CartAmountType } from "../PriceBreakup/PriceBreakup.types";
import { CartItemPriceType, CartPrescriptionType } from "../CartCard/CartCard.types";
import { CartTotalType } from "../NewPriceBreakup/PriceBreakup.types";
import { TypographyENUM } from "../../../../Types/general";
const GoldHeadline1 = styled.div`
	font-family: ${TypographyENUM.lkSansBold};
	font-style: normal;
	/* font-weight: 700; */
	font-size: 14px;
	line-height: 20px;
	letter-spacing: -0.02em;
	color: #000042;
	display: flex;
	align-items: center;
	justify-content: space-between;
`;
const GoldHeadline2 = styled.div`
	font-family: ${TypographyENUM.lkSansRegular};
	font-style: normal;
	font-weight: 400;
	font-size: 14px;
	line-height: 20px;
	letter-spacing: -0.02em;
	color: #333368;
`;
const GoldHeadline3 = styled.div`
	font-family: ${TypographyENUM.lkSansRegular};
	font-style: normal;
	font-weight: 400;
	font-size: 14px;
	line-height: 20px;
	letter-spacing: -0.02em;
	color: #333368;
`;
const GoldBottomContainer = styled.div`
	display: flex;
	flex-direction: row;
	align-items: center;
	justify-content: space-between;
	cursor: pointer;
`;
const LineBreak = styled.hr`
	width: 100%;
	margin: 0;
	border-bottom: 1px dashed #cecedf;
	border-top: none;
	border-left: none;
	border-right: none;
	overflow: hidden;
	margin: 10px 0;
`;
const BottomContainerText = styled.div`
	font-family: ${TypographyENUM.lkSansBold};
	font-style: normal;
	/* font-weight: 700; */
	font-size: 14px;
	line-height: 20px;
	letter-spacing: -0.02em;
	color: #000042;
`;
const CartGoldAnchor = styled.a`
	text-decoration: none;
	:hover {
		text-decoration: none;
	}
`;
const shine = keyframes`
	100% {
		left: 125%;
	}
`;
const CartGoldWrapper = styled.div<{ isMobileView?: boolean; colorCode?: string; }>`
	padding: 16px;
	/* width: ${props => props.isMobileView ? "100%" : "360px"}; */
	width: 100%;
	background: #FFEFCE;
	border: 1px solid #e0c67c;
	border-radius: 12px;
	color: #000042;
	letter-spacing: -0.02em;
	display: flex;
	flex-direction: column;
	gap: 8px;
	box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.1);
	font-synthesis: none;
    position: relative;
	overflow: hidden;
    // ${props => props.colorCode ? `background-color: ${props.colorCode};` : ""};

	&::before {
		background: linear-gradient(to right, fade_out(#fff, 1) 0%, fade_out(#fff, 0.7) 100%);
		content: "";
		display: block;
		height: 100%;
		left: -75%;
		position: absolute;
		top: 0;
		transform: skewX(-25deg);
		width: 50%;
		animation: ${shine} 2s infinite;
	}
`;
const ArrowIcon = styled.div<{isRTL?: boolean}>`
	${props => props.isRTL ? "transform: rotate(180deg)" : ""};
`;
interface CartItemType {
    id: number;
    itemId: number;
    itemUrl: string;
    itemImg: string;
    tierMembershipName?: string
    itemModel: string;
    itemClassification: string;
    itemQty: number;
    itemPowerRequired: string;
    itemPrescriptionView: CartPrescriptionType;
    itemFrameType: string;
    itemLensType: string;
    itemLensCategory: string;
    showRibbon: boolean;
    ribbonMessage: string;
    showOfferMessage: boolean;
    offerMessage: string;
    itemPriceObj: CartItemPriceType;
    addOnPriceObj: CartItemPriceType | null;
}
interface OfferDetails {
    ctaLink?: string,
    ctaText?: string,
    pid?: string,
    headline1?: string,
    headline2?: string,
    colorCode?: string,
    headline3?: string
}
interface GoldMembershipType {
    offerDetails: OfferDetails,
    cartItems: CartItemType[],
    cartTotal: CartTotalType[],
	subdirectoryPath: string,
    showTax?: boolean,
    currencySymbol: string,
	cartSubTotal?: number;
    addOfferToCart: ({ productId }: { productId: string }) => void,
    isMobileView?: boolean,
	isRTL?: boolean;
}

const GoldMembershipNew = ({ offerDetails, cartSubTotal, cartTotal, cartItems, showTax, currencySymbol, addOfferToCart, isMobileView, isRTL, subdirectoryPath }: GoldMembershipType) => {
	const subTotal = Array.isArray(cartTotal) && cartTotal?.find(ct => ct.type === CartAmountType.TOTALBTAX)?.amount || cartSubTotal || 0;
	const totalDiscount = Array.isArray(cartTotal) && cartTotal?.filter(ct => ct.type === CartAmountType.NEGATIVE)?.reduce((acc, curr) => ((curr?.amount || 0) + acc), 0) || 0;
	const [offerDetail, setOfferDetail] = useState<OfferDetails | null>(null);

	const [loyaltyProductAdded, setIsLoyaltyProductAdded] = useState(false);
	const [goldDiscountAppliedOnCart, setGoldDiscountAppliedOnCart] = useState(false);

	const [categoryUrl, setCategoryUrl] = useState<string | null>(null);

	const [isSilverAdded, setIsSilverAdded] = useState<boolean | null>(null);

	useEffect(() => {
		if (offerDetails) {
			setOfferDetail(offerDetails);

			if (offerDetails?.ctaLink) {
				// const url = new URL(offerDetails?.ctaLink);
				const url = offerDetails.ctaLink;
				setCategoryUrl(url);
				// setCategoryUrl(url.pathname);
			}
		}

		if(cartItems && cartItems?.length) cartItems?.forEach(item => {
			if (item.itemClassification === "loyalty_services") {
				setIsLoyaltyProductAdded(true);
			}
		});
	}, [cartItems, offerDetails]);

	useEffect(() => {
		if (loyaltyProductAdded && cartItems?.length) {
			cartItems.forEach(item => {
				if (item.itemClassification === "loyalty_services") {
					if (item.tierMembershipName === "silver") {
						setIsSilverAdded(true);
					}
				}
			});
		}
	}, [loyaltyProductAdded]);

	useEffect(() => {
		if (Array.isArray(cartTotal) && cartTotal?.length) {
			cartTotal?.forEach(item => {
				if ((item.id === "bogoDiscount" || item.id === "goldDiscount") && item.amount > 0) {
					setGoldDiscountAppliedOnCart(true);
				}
			});
		}
	}, [cartTotal]);

	const handleAddGold = () => {
		if (!offerDetail?.pid || offerDetail?.ctaText !== "Add Gold") return;
		addOfferToCart({ productId: offerDetail?.pid });
	};

	if (offerDetail && (offerDetail?.headline1 || offerDetail?.headline2 || offerDetail?.headline3)) {
		return (
			<CartGoldWrapper
				colorCode={offerDetail && offerDetail.colorCode}
				isMobileView={isMobileView}
				onClick={() => handleAddGold()}
			>
				{offerDetail?.headline1 && (
					<GoldHeadline1>
						<div>{offerDetail.headline1.replaceAll(".", "")}</div>
						{loyaltyProductAdded && (
							<div style={{ cursor: "pointer" }}>
								{/* <a href="/loyalty"> */}
								<a href={`${!isSilverAdded ? `${subdirectoryPath}/loyalty` : `${subdirectoryPath}/silver`}`}>
									<img
										alt="Info"
										src="https://static1.lenskart.com/media/desktop/img/DesignStudioIcons/InfoIcon.svg"
										style={{ height: "20px", width: "20px" }}
									/>
								</a>
							</div>
						)}
					</GoldHeadline1>
				)}

				{offerDetail?.headline2 && (
					<GoldHeadline2>
						{offerDetail?.headline2?.replace("%s", `${currencySymbol}${subTotal}`)}
						{offerDetail?.headline2?.indexOf("%s") !== -1 &&
                            showTax && <span>(+tax)</span>}
					</GoldHeadline2>
				)}

				{offerDetail?.headline3 && <GoldHeadline3>{offerDetail.headline3}</GoldHeadline3>}

				{offerDetail?.headline3 && goldDiscountAppliedOnCart && (
					<GoldHeadline3 >
                        You are saving {currencySymbol}
						{totalDiscount} on this order.
					</GoldHeadline3>
				)}

				{/* // bottom container */}
				{(offerDetail?.ctaText || offerDetail?.ctaLink) && (
					<div>
						<LineBreak></LineBreak>
					</div>
				)}
				{offerDetail && offerDetail.ctaLink && offerDetail?.ctaText !== "Add Gold" && (
					<CartGoldAnchor href={categoryUrl || undefined}>
						<GoldBottomContainer>
							<BottomContainerText>{offerDetail?.ctaText}</BottomContainerText>

							<ArrowIcon isRTL={isRTL}>
								<img
									alt="oval-button"
									src="https://static1.lenskart.com/media/desktop/img/DesignStudioIcons/OvalButton.svg"
								/>
							</ArrowIcon>
						</GoldBottomContainer>
					</CartGoldAnchor>
				)}
				{offerDetail && offerDetail.ctaText === "Add Gold" && offerDetail?.pid && (
					<GoldBottomContainer>
						<BottomContainerText>{offerDetail?.ctaText}</BottomContainerText>

						<ArrowIcon isRTL={isRTL}>
							<img
								alt="oval-button"
								src="https://static1.lenskart.com/media/desktop/img/DesignStudioIcons/OvalButton.svg"
							/>
						</ArrowIcon>
					</GoldBottomContainer>
				)}
			</CartGoldWrapper>
		);
	}
	return null;
};

export default GoldMembershipNew;
