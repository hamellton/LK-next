import React, { useRef } from "react";
import Carousel from "../../../Common/Carousel";
import { RecentlyViewedProps } from "./CartWishlist.types";
import { Heading, ImgContainer, CustomButtons, ProductContainer, ProductImage, ProductLink, ProductName, ProductNameContainer, ProductPrice, ProductPriceContainer, RecentlyViewedWrapper, ProductDetail, OfferText, StrickOffText, Tax } from "./CartWishlist.styles";
import { productDataLocale } from "./stories-data";
import { TypographyENUM } from "../../../../Types/general";
import { RatingStar } from "../../../Common/RatingStar/RatingStar.component";
import Slider from "react-slick";
import ProductContainerStructure from "./ProductContainerStructure/ProductContainerStructure.component";

function CartWishlist({ productList, isTaxable = false, dataLocale= productDataLocale(), font=TypographyENUM.defaultBook, titleFont=TypographyENUM.lkSansRegular, mobileView, slidesToShow=4.5, isRTL, wishlistLength }: RecentlyViewedProps) {
	const { RECENTLY_VIEWED_PRODUCTS, ADD_ITEMS_FROM_YOUR_WISHLIST } = dataLocale;
	const defaultSlide = 1;
	const carouselRef = useRef<Slider>(null);

	function wheelHandler(e: WheelEvent) {
		e.deltaY > 0 ? carouselRef.current?.slickNext() : carouselRef.current?.slickPrev();
		console.log(e);
	}

	return (
		<RecentlyViewedWrapper mobileView={mobileView} isRTL={isRTL} onWheel={(e: WheelEvent | any) => wishlistLength > slidesToShow ? wheelHandler(e) : null}>
			<Heading mobileView={mobileView} styleFont={titleFont}>
				{ productList[0]?.productImageUrl ? ADD_ITEMS_FROM_YOUR_WISHLIST : RECENTLY_VIEWED_PRODUCTS }
				{(wishlistLength > slidesToShow) && <CustomButtons>
					<span onClick={() => carouselRef.current?.slickPrev()}>
						<div>
							<img src="https://static1.lenskart.com/media/desktop/img/DesignStudioIcons/ArrowLeft.svg"/>
						</div>
					</span>
					<span onClick={() => carouselRef.current?.slickNext()}>
						<div>
							<img src="https://static1.lenskart.com/media/desktop/img/DesignStudioIcons/ArrowRight.svg"/>
						</div>
					</span>
				</CustomButtons>}
			</Heading>
			<Carousel slidesToShow={slidesToShow || 3} isRTL={false} wrapperClassName="slider-custom" ref={carouselRef} mobileView={mobileView} hideArrow={true}>
				{productList.map((product, index) => (
					<Carousel.Slide id={index} currentSlide={defaultSlide} key={index}>
						<ProductContainer mobileView={mobileView} styleFont={font} isRTL={isRTL}>
							<ProductLink href={product.productUrl} rel={"noreferrer"}>
								<ImgContainer isRTL={isRTL}>
									<ProductImage src={ product.frontImage || product.imageUrl || product.productImageUrl} alt={product.brandName} />
									<RatingStar isRTL={isRTL} recentlyViewed={true} rating={product.avgRating ? parseFloat(product.avgRating) : 0} numberOfRatings={product?.numberOfReviews ? parseInt(product?.numberOfReviews) : 0} id={"rating-star"} font={TypographyENUM.lkSansBold} backgroundColor={"#EEEEF5"} primaryTextColor={"#000042"} starColor={"#0FBD95"}/>
								</ImgContainer>
								<ProductDetail isRTL={isRTL}>
									<ProductNameContainer>
										<ProductName>{product.brandName}</ProductName>
									</ProductNameContainer>
									{/* {product.productName && <ProductFeature>
										<span title={product.productName}>{product.productName}</span>
									</ProductFeature>} */}
									<ProductPriceContainer>
										<ProductPrice>
											{product.prices.symbol + product.prices.lkPrice}{" "}
											{product.prices.lkPrice !== product.prices.basePrice ? <StrickOffText isRTL={isRTL}>{product.prices.symbol + " " + product.prices.basePrice}</StrickOffText> : ""}
											{isTaxable && <Tax isRTL={isRTL}>(+ tax)</Tax>}
											{product.offer && <OfferText isRTL={isRTL}>{product.offer}% off</OfferText>}
										</ProductPrice>
									</ProductPriceContainer>
								</ProductDetail>
							</ProductLink>
						</ProductContainer>
					</Carousel.Slide>
				))}
			</Carousel>
		</RecentlyViewedWrapper>
	);
}

export { CartWishlist, ProductContainerStructure };
