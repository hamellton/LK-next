/* eslint-disable no-mixed-spaces-and-tabs */
import React, { useState } from "react";
import { TypographyENUM } from "../../../../Types/general";
import ViewUploadImage from "../../../Mobile/Cart/CartProduct/Subcomponents/ViewUploadImage";
import Accordion from "../../MyAccount/MyOrder/Accordion";
import { Header, PowerRoot, PowerText, Table, TableMobile, TableStructure, TableStructureLeft, TableStructureWrapper, LeftSpan, RightSpan, PowerLabelsSpan, LeftSpanMobile, RightSpanMobile, ViewPres, DontKnowPower, Flex } from "./styles";

const excludedPrescText = ["Call Me/Email Me for Power", "Call Me/Email Me for Color", ""];

function excludePrescValues(prescValue: string, hyphenSybmol: string) {
	if (excludedPrescText.includes(prescValue) || !prescValue) return hyphenSybmol;
	return prescValue;
}

const PowerGrid = (props: any) => {
	const {
		dataLocale,
		prescription,
		powerState,
		mobileView
	} = props;
	const [showUploadPrescModal, setShowUploadPrescModal] = useState(false);
	const left = prescription?.left;
	const right = prescription?.right;
	const userName = prescription?.userName;
	const labels = prescription?.labels;
	const imageFileName = prescription?.imageFileName;
	const pdImageFileName = prescription?.pdImageFileName;
	const handleOpenPrescriptionImageModalFn= (imageFileName: string)=> {
		if(!mobileView) props.handleOpenPrescriptionImageModal(imageFileName);
		else setShowUploadPrescModal(true);
	};
	const [userTitle, setUserTitle] = useState(userName || dataLocale?.YOUR_POWER);
	let itemPrescriptions:any;
	if (left && Object.keys(left).length) {
		itemPrescriptions = left;
	} else if (right && Object.keys(right).length) {
		itemPrescriptions = right;
	}
	if (userTitle?.toLowerCase() === "user") {
		setUserTitle(dataLocale?.YOUR_POWER);
	}

	return (
		<>
			{(left?.sph || right?.sph || left?.pd) && (!excludedPrescText.includes(left?.sph) || !excludedPrescText.includes(right?.sph) || !excludedPrescText.includes(left?.pd)) ? <PowerRoot mobileView={mobileView}>
				{!mobileView && <Header>{userTitle}</Header>}
				{
					// TODO: disabled old code used for desktop. mobile code used for both desktop and mobile.
					false &&
					<Table>
						<TableStructureLeft>
							{left?.sph && <LeftSpan style={{ marginTop: "20px" }}>LEFT</LeftSpan>}
							{right?.sph && <RightSpan>RIGHT</RightSpan>}
						</TableStructureLeft>
						<TableStructureWrapper>
							{itemPrescriptions &&
								Object.keys(itemPrescriptions).map((keys:any, index:number) => {
									if ((left &&left[keys] &&
										excludedPrescText.includes(left[keys]) &&
										right &&
										right[keys] &&
										excludedPrescText.includes(right[keys])) ||
										(left && !left[keys] && right && !right[keys]) ||
										((!left || !left[keys]) && (!right || !right[keys]))
									) {
										return null;
									}
									return (<TableStructure key={`${keys}_${index}`}>
										<PowerLabelsSpan>{labels[keys]}</PowerLabelsSpan>
										{left?.sph || left?.pd && <PowerText>{excludePrescValues(left[keys], "-")}</PowerText>}
										{right?.sph || right?.pd && <PowerText>{excludePrescValues(right[keys], "-")}</PowerText>}
									</TableStructure>);
								})
							}
						</TableStructureWrapper>
					</Table>
				}
				{itemPrescriptions?.sph !== excludedPrescText[0] ? <TableMobile >
					<div >
						{/* TODO: need to use different component for mobile and desktop */}
						{/* TODO: add condition for rendering of power tag */}
						<LeftSpanMobile header="true">POWER</LeftSpanMobile>
						{(left?.sph || left?.pd) && <RightSpanMobile margin="left">LEFT</RightSpanMobile>}
						{(right?.sph || right?.pd) && <RightSpanMobile margin="none">RIGHT</RightSpanMobile>}
					</div>
					{itemPrescriptions &&
						Object.keys(itemPrescriptions).map((keys: any, index: number) => {
							if ((left && left[keys] &&
								excludedPrescText.includes(left[keys]) &&
								right &&
								right[keys] &&
								excludedPrescText.includes(right[keys])) ||
								(left && !left[keys] && right && !right[keys]) ||
								((!left || !left[keys]) && (!right || !right[keys]))
							) {
								return null;
							}
							return (<div key={`${keys}_${index}`}>
								<LeftSpanMobile header="false">{labels[keys]}</LeftSpanMobile>
								{(left?.sph || left?.pd) && <RightSpanMobile margin="left">{excludePrescValues(left[keys], "-")}</RightSpanMobile>}
								{(right?.sph || right?.pd) && <RightSpanMobile margin="none">{excludePrescValues(right[keys], "-")}</RightSpanMobile>}
							</div>);
						})
					}
				</TableMobile> : <DontKnowPower>{dataLocale.DONT_KNOW_PRESCRIPTION_WILL_ASSIST_YOU}</DontKnowPower>}
				{/* {prescription?.pdImageFileName &&<DivTemp><PdText color={"#333333"}>PD uploaded , we might call within 24hrs & assist you if needed</PdText><PdText padding color={"#00bac6"} onClick={(e) => { e.stopPropagation(); handleOpenPrescriptionImageModalFn(prescription?.pdImageFileName);}}>VIEW PRESCRIPTION</PdText></DivTemp>} */}
				{prescription?.imageFileName && <div><ViewPres padding={15} onClick={(e) => { e.stopPropagation(); handleOpenPrescriptionImageModalFn(imageFileName);}}>{dataLocale.VIEW_PRESCRIPTION}</ViewPres></div>}
				{prescription?.pdImageFileName &&<Flex> <div>{dataLocale.ASSIST_PD_CALL} <ViewPres padding={0} onClick={(e) => { e.stopPropagation(); handleOpenPrescriptionImageModalFn(pdImageFileName);}}>{dataLocale.VIEW_PRESCRIPTION}</ViewPres></div></Flex>}
			</PowerRoot> :
				<div>
					{/* {(left?.sph || right?.sph) === "Call Me/Email Me for Power" ? <CardContentTextWarpper><CardContentText>{"Since You Donâ€™t Know Your Power, We Will Call Within 24hrs & Assist You"}</CardContentText></CardContentTextWarpper> : null } */}
					{
						powerState.section === "POWER_UPLOAD" && (mobileView ? (<div style={{ color: "#27394E" }}>{powerState.message} <span onClick={(e) => { e.stopPropagation(); handleOpenPrescriptionImageModalFn(imageFileName); }} style={{ textTransform: "uppercase", marginLeft: "8px", color: "#00bac6" }}>View Prescription</span></div>) :<Accordion icon={mobileView ? "" : powerState.icon} isRTL={false} font={TypographyENUM.defaultBook} canCollapse={true} isComponent={false} isMaxHeight={false} expand={false} handleExpand={ () => handleOpenPrescriptionImageModalFn(imageFileName)} btnText="View Details" title={powerState.message} showBorderTop={false}>
						</Accordion>)
					}
					{
						powerState.section === "CONTACT_FOR_POWER" && <Accordion icon={mobileView ? "" : powerState.icon} isRTL={false} font={TypographyENUM.defaultBook} canCollapse={false} isComponent={false} isMaxHeight={false} expand={false} handleExpand={() => handleOpenPrescriptionImageModalFn(imageFileName)} btnText="View Details" title={powerState.message} showBorderTop={false}>
						</Accordion>
					}
				</div>
			}
			{showUploadPrescModal && <ViewUploadImage showUploadPrescModal={() => setShowUploadPrescModal(false)} imageFileName={imageFileName || prescription?.pdImageFileName || ""} altText={dataLocale.UPLOAD_IMG_ALT} />}
		</>
	);
};

export default PowerGrid;
