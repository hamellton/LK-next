import React, { useEffect, useState } from "react";
import {
	CartCardWrapper,
	HR,
	ItemImageWrapper,
	ItemImage,
	ItemDetailSection,
	ItemActions,
	ItemTitle,
	ItemPrice,
	Action,
	Pipe,
	StrickOffText,
	FreeText,
	OfferText,
	RowSection,
	PriceWrapper,
	SubHeading,
	RobinWrapper,
	RobinSpan,
	CartRobinWarp,
	CardContactTitle,
	CardContentText,
	// PowerTable,
	Buttons,
	OpaqueBackDrop,
	FinalPriceText,
	FreeAmountText,
	FreePriceText,
} from "./styles";
import { CartCardTypes } from "./CartCard.types";
import AddDeleteGroup from "../AddDeleteGroup";
import { ComponentSizeENUM, TypographyENUM } from "../../../../Types/general";
import { TickNew } from "../../../../Icons";
// import PowerTable from "../../../V1/Cart/PowerTable/PowerTable.component";
import DeleteItem from "./DeleteItem";
import PowerDetailsMain from "../../../Mobile/Cart/CartProduct/PowerDetailsMain";
import KnowMoreModal from "../KnowMoreModal/KnowMoreModal.component";
import PrescriptionModal from "./PrescriptionModal/PrescriptionModal.component";

/**
 * Default CartCard Component
 */
const CartCard = ({
	id,
	onDeleteClick,
	onAddClick,
	wishlist,
	deleteAllCount,
	font = TypographyENUM.lkSansBold,
	componentSize = ComponentSizeENUM.small,
	currencyCode = "$",
	dataLocale,
	configData,
	//itemId,
	itemUrl,
	itemImg,
	itemModel,
	itemClassification,
	itemQty,
	itemPowerRequired,
	// itemPrescription,
	itemContactDisposableType,
	itemLensType,
	itemPrescriptionView,
	itemFrameSize,
	itemBrandName,
	itemFrameColor,
	// itemOptions,
	// showRibbon,
	//ribbonMessage,
	offerMessage,
	itemPriceObj,
	isFree,
	itemDiscountedPrice,
	price,
	// itemPrescription,
	addOnPriceObj,
	isRTL = false,
	cartTotal,
	subdirectoryPath,
	removeDomainName,
	itemExtraDetails,
	checkPower,
	getPowerInfo,
	prescriptionInfo
}: CartCardTypes) => {
	const { REMOVE, REPEAT, GOLD_TEXT, EXTRA_DISCOUNT, FINAL_PRICE, FREE, GOLD_BANNER_LINK } = dataLocale;

	const [showDeleteModal, setShowDeleteModal] = useState(false);
	const [screenWidth, setScreenWidth] = useState(0);
	const [knowMoreModal, setKnowMoreModal] = useState<{
		imagePath: string;
		show: boolean;
		url?: URL;
		cta: string;
	}>({
		imagePath: "",
		show: false,
		cta: ""
	});
	const [showPrescriptionModal, setShowPrescriptionModal] = useState(false);
	// const [showTable, setShowTable] = useState(true);

	const onHidePrescriptionModal = () => {
		setShowPrescriptionModal(false);
	};

	useEffect(() => {
		setScreenWidth(window.screen.width);
	}, []);
	// const prescriptionData = useMemo(() => {
	// 	const eyeData = itemPrescription;
	// 	if(eyeData && (eyeData?.left || eyeData?.right)) {
	// 		const data: {Eye: string, SPH?: string, CYL?: string, AXIS?: string, Boxes?: number}[] = [{ Eye: "left" }, { Eye: "Right" }];
	// 		const leftLensData = eyeData.left;
	// 		if(leftLensData?.sph) data[0].SPH = leftLensData.sph;
	// 		if(leftLensData?.cyl) data[0].CYL = leftLensData.cyl;
	// 		if(leftLensData?.axis) data[0].AXIS = leftLensData.axis;
	// 		if(leftLensData?.boxes) data[0].Boxes = leftLensData.boxes;
	// 		const rightLensData = eyeData.right;
	// 		if(rightLensData?.sph) data[1].SPH = rightLensData.sph;
	// 		if(rightLensData?.cyl) data[1].CYL = rightLensData.cyl;
	// 		if(rightLensData?.axis) data[1].AXIS = rightLensData.axis;
	// 		if(rightLensData?.boxes) data[1].Boxes = rightLensData.boxes;
	// 		return data;
	// 	}
	// 	return null;
	// }, [itemPrescription]);
	const hrefLink = (itemUrl: string) => {
		const link = removeDomainName(itemUrl, subdirectoryPath, "", subdirectoryPath);
		window.location.href = subdirectoryPath + link;
	};
	const handleKnowMore = (imagePath: string, url: string, cta: string) => {
		const obj = { show: true, imagePath, url: new URL(url), cta };
		setKnowMoreModal(obj);
	};
	return (
		<>
			{isFree && (
				<CartRobinWarp>
					<RobinWrapper>
						<RobinSpan isRTL={isRTL}>Free</RobinSpan>
					</RobinWrapper>
				</CartRobinWarp>
			)}

			{showDeleteModal ? (
				<DeleteItem
					itemClassification={itemClassification}
					setShowDeleteModal={setShowDeleteModal}
					onDeleteClick={onDeleteClick}
					wishlist={wishlist}
					deleteAllCount={deleteAllCount}
					itemImg={itemImg}
					dataLocale={dataLocale}
					isRTL={isRTL}
					cartTotal={cartTotal}
				/>
			) : null}
			{showDeleteModal ? (
				<OpaqueBackDrop onClick={()=>setShowDeleteModal(false)}
				/>
			) : null}
			<CartCardWrapper id={id} styledFont={font} styledSize={componentSize} onClick={() => {
				hrefLink(itemUrl);
			}}>
				<ItemImageWrapper>
					<ItemImage
						isRTL={isRTL}
						styleIsGold={itemClassification === "loyalty_services"}
						alt={itemModel}
						src={
							itemClassification === "loyalty_services"
								? GOLD_BANNER_LINK
								: itemImg
						}
					></ItemImage>
				</ItemImageWrapper>
				<ItemDetailSection>
					<RowSection>
						<ItemTitle>{screenWidth > 1024 ? itemPriceObj.itemName : `${itemBrandName} | ${itemFrameSize} | ${itemFrameColor}`} {itemQty > 1 && (` (Quantity: ${itemQty}) `)}</ItemTitle>
						{/* <ItemTitleMob>{itemPriceObj.itemName}</ItemTitleMob> */}
						<PriceWrapper>
							{itemPriceObj.showStrikeOffPrice &&
                itemPriceObj.strikeOffPrice > itemPriceObj.itemPrice && (
								<StrickOffText isRTL={isRTL}>
									{currencyCode}
									{itemPriceObj.strikeOffPrice}
								</StrickOffText>
							)}
							{itemPriceObj.showStrikeOffPrice &&
                itemPriceObj.itemPrice === 0 && <FreeText>Free</FreeText>}
							{itemPriceObj.showStrikeOffPrice && itemPriceObj.itemPrice !== 0 && (
								<ItemPrice>
									{currencyCode}
									{itemPriceObj.itemPrice}
								</ItemPrice>
							)}
							{!itemPriceObj.showStrikeOffPrice && (
								<ItemPrice>
									{currencyCode}
									{itemPriceObj.itemPrice}
								</ItemPrice>
							)}
						</PriceWrapper>
					</RowSection>

					{/* {itemOptions && itemOptions.length > 0 && (
						<div>
							<span>
								{itemOptions[0]?.name && itemOptions[0].name.toLowerCase()}
							</span>
							{itemOptions.length > 1 && (
								<span>{" "}
							with{" "}
									{itemOptions[1]?.name && itemOptions[1].name.toLowerCase()}
								</span>
							)}
						</div>
					)} */}

					{itemClassification === "contact_lens" && (
						<div>
							{itemContactDisposableType && (
								<div>
									<CardContactTitle>Usage: </CardContactTitle>
									<CardContentText>{itemContactDisposableType}</CardContentText>
								</div>
							)}
						</div>
					)}

					{itemClassification === "loyalty_services" && (
						<RowSection>
							<SubHeading>{GOLD_TEXT}</SubHeading>
						</RowSection>
					)}
					{addOnPriceObj && (
						<RowSection>
							<SubHeading>{addOnPriceObj.itemName}</SubHeading>
							<PriceWrapper>
								{addOnPriceObj?.showStrikeOffPrice && (
									<StrickOffText isRTL={isRTL}>
										{currencyCode}
										{addOnPriceObj.strikeOffPrice}
									</StrickOffText>
								)}
								{addOnPriceObj?.showStrikeOffPrice &&
                  addOnPriceObj?.itemPrice === 0 && <FreeText>Free</FreeText>}
								{addOnPriceObj?.showStrikeOffPrice &&
                  addOnPriceObj?.itemPrice !== 0 && (
									<ItemPrice>
										{currencyCode}
										{addOnPriceObj?.itemPrice}
									</ItemPrice>
								)}
								{!addOnPriceObj?.showStrikeOffPrice && (
									<ItemPrice>
										{currencyCode}
										{addOnPriceObj?.itemPrice}
									</ItemPrice>
								)}
							</PriceWrapper>
						</RowSection>
					)}
					{itemPrescriptionView &&
            itemClassification !== "loyalty_services" &&
            itemPowerRequired !== "POWER_NOT_REQUIRED" && (
						<div>
							{itemLensType !== "FRAME_ONLY" ? <span>
								{itemPowerRequired === "POWER_SUBMITTED" ?
									// <PowerTable
									// 	heading={{ Eye: "Eye", SPH: (itemPrescription?.left?.sph || itemPrescription?.right?.sph) ? "Sph" : "", CYL: (itemPrescription?.left?.cyl || itemPrescription?.right?.cyl) ? "Cyl" : "", Axis: (itemPrescription?.left?.axis || itemPrescription?.right?.axis) ? "Axis" : "", Boxes: "Boxes" }}
									// 	data={prescriptionData}
									// 	fullWidth
									// 	showTable={showTable}
									// 	userName={itemPrescription?.userName}
									// 	showFunction={() => setShowTable(showTable => !showTable)}
									// 	dataLocale={dataLocale}
									// />
									<PowerDetailsMain
										isMobileView={false}
										dataLocale={dataLocale}
										configData={configData}
										prescriptionView={itemPrescriptionView}
									/>
									:
									<SubHeading>You can upload prescription after payment</SubHeading>}
							</span> : null}
						</div>
					)}
					<HR />
					{(itemDiscountedPrice && itemDiscountedPrice?.value !== 0) && <RowSection>
						<SubHeading style={{ color: "var(--text)" }}>{EXTRA_DISCOUNT}</SubHeading>
						{price?.value && itemQty && itemDiscountedPrice?.value && (
							<SubHeading style={{ color: "#0fbd95", fontFamily: `${TypographyENUM.lkSansBold}` }}>
								-{currencyCode}
								{(price?.value * itemQty - itemDiscountedPrice?.value)
									?.toFixed(2)
									?.replace(/[.,]00$/, "")}
							</SubHeading>
						)}
					</RowSection>}
					<RowSection>
						<FinalPriceText style={{ color: "var(--text)" }}>{FINAL_PRICE}</FinalPriceText>
						<FinalPriceText>
							{isFree || (itemDiscountedPrice && itemDiscountedPrice?.value === 0) ? (
								<>
									{itemDiscountedPrice?.value !== 0 && (
										<s>
											<FreeAmountText>
												<span>{currencyCode}</span>
												<span>
													{itemDiscountedPrice
														? itemDiscountedPrice?.value
														: (price?.value && itemQty ? price?.value * itemQty : 0)}
												</span>
											</FreeAmountText>
										</s>
									)}

									<FreePriceText>{FREE}</FreePriceText>
								</>
							) : (
								<>
									<span>{currencyCode}</span>
									<span>
										{itemDiscountedPrice
											? itemDiscountedPrice?.value
											: (price?.value && itemQty ? (price?.value * itemQty) : 0)}
									</span>
								</>
							)}
						</FinalPriceText>
					</RowSection>
					<HR />
					<ItemActions>
						{itemQty === 1 || itemClassification === "contact_lens" ? (
							<Buttons>
								<Action
									rightSpacing={isRTL ? false : true}
									onClick={(ev) => {ev.stopPropagation(); setShowDeleteModal(!showDeleteModal);}}
								>
									{REMOVE}
								</Action>
								{itemClassification !== "contact_lens" && <Pipe />}
								{itemClassification !== "loyalty_services" &&
                  itemClassification !== "contact_lens" && (
									<Action
										onClick={(ev) => { ev.stopPropagation(); onAddClick(); }}
										leftSpacing={checkPower &&
											["POWER_REQUIRED", "POWER_SUBMITTED"].includes(itemPowerRequired)}
										rightSpacing={
											(isRTL ||
												(
													checkPower &&
													["POWER_REQUIRED", "POWER_SUBMITTED"].includes(itemPowerRequired)
												)
											) ? true : false}>
										{REPEAT}
									</Action>
								)}
								{itemClassification === "loyalty_services" && itemExtraDetails && (
									<Action
										onClick={(ev) => {
											ev.stopPropagation();
											handleKnowMore(
												itemExtraDetails.images.knowMore,
												itemExtraDetails.detailsUrl,
												itemExtraDetails.detailsButtonText
											);
										}}
										rightSpacing={false}
									>
										{itemExtraDetails?.detailsButtonText}
									</Action>
								)}
								{
									itemClassification !== "contact_lens" &&
									checkPower &&
									["POWER_REQUIRED", "POWER_SUBMITTED"].includes(itemPowerRequired)
									&& <Pipe />
								}
								{checkPower &&
									["POWER_REQUIRED", "POWER_SUBMITTED"].includes(itemPowerRequired) &&
									(
										<Action
											rightSpacing={false}
											onClick={(e) => {
												e.stopPropagation();
												getPowerInfo?.();
												setShowPrescriptionModal(true);
											}}
										>
										Check Power
										</Action>
									)
								}
							</Buttons>
						) : (
							<>
								<AddDeleteGroup
									id="remove"
									quantity={itemQty}
									onAddClick={onAddClick}
									onDeleteClick={onDeleteClick}
								/>
								{checkPower &&
										["POWER_REQUIRED", "POWER_SUBMITTED"].includes(itemPowerRequired) &&
										(
											<Action rightSpacing={false} onClick={() => null}>CHECK POWER</Action>
										)
								}
							</>
						)}
					</ItemActions>
					{offerMessage && (
						<RowSection>
							<OfferText isRTL={isRTL}>
								{" "}
								<TickNew width="16px" style={isRTL ? { marginLeft: "6px" } : { marginRight: "6px" }} />{" "}
								{offerMessage}
							</OfferText>
						</RowSection>
					)}
				</ItemDetailSection>
			</CartCardWrapper>
			<KnowMoreModal
				imagePath={knowMoreModal.imagePath}
				cta={knowMoreModal.cta}
				onHide={() => setKnowMoreModal(prevState => ({ ...prevState, show: false }))}
				show={knowMoreModal.show}
				url={knowMoreModal.url}
			/>
			{checkPower && <PrescriptionModal prescriptionInfo={prescriptionInfo?.fetchPowerData} show={showPrescriptionModal} onHide={onHidePrescriptionModal} />}
		</>
	);
};
export default CartCard;
