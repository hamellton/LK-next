import React from "react";
import { Cross } from "../../../Icons";
import { CrossSection, FieldInput, LeftPositioned } from "./styles";

interface AddressTextFieldType {
	value: string | number,
	type?: string,
	onChange: (e: React.ChangeEvent<HTMLInputElement>) => void,
	placeholder?: string,
	children?: React.ReactNode,
	clearText?: () => void,
	onBlur?: (e: any) => void,
	onKeyPress?: (e: any) => void,
	maxLength?: number,
	disabled?: boolean,
	isRTL: boolean,
	fontSize?: string,
	props?: any[],
	pattern?: string,
	validRegexPattern?: RegExp,
	shiftCross?: boolean
	rightPadding?: boolean
}

const AddressTextField = ({
	value,
	type = "text",
	onChange,
	placeholder = "",
	children,
	clearText,
	onBlur = () => null,
	onKeyPress = () => null,
	maxLength,
	disabled,
	isRTL,
	fontSize,
	pattern,
	validRegexPattern = /^[a-zA-Z0-9\t\n ./<>?;:"'`!@#$%^&*()[\]{}_+=|\\-]*$/,
	shiftCross,
	rightPadding = false,
	...props
}: AddressTextFieldType) => {
	// /^[A-Za-z0-9-]+[ 0-9A-Za-z#$%=@!{},`~&*()'<>?.:;_|^/+\t\r\n[\]"-]*$/,
	// const validRegexPattern = /^[a-zA-Z0-9\s\p{P}]+$/;
	const internalChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {
		// const keycode = event.which;
		if (
			!(validRegexPattern.test(event.target.value))
		) {
			event.preventDefault();
		} else {
			onChange(event);
		}
	};
	return (
		<>
			{children && <LeftPositioned>{children}</LeftPositioned>}
			<FieldInput id="input-desktop" rightPadding={rightPadding} fontSize={fontSize} isRTL={isRTL} value={value} maxLength={maxLength} onChange={internalChangeHandler} placeholder={placeholder} type={type} onBlur={onBlur} onKeyPress={onKeyPress} disabled={disabled} pattern={pattern} {...props} />
			{value && clearText && <CrossSection shiftCross={shiftCross} isRTL={isRTL} onClick={clearText}><Cross/></CrossSection>}
		</>
	);
};

export default AddressTextField;
