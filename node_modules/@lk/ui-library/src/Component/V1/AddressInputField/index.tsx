import React, { useEffect } from "react";
import { animated, useSpring } from "react-spring";
import { TypographyENUM } from "../../../Types/general";
import { Box, FieldContainer, Label, SubText } from "./styles";

interface AddressInputFieldType {
	font?: TypographyENUM,
	children?: React.ReactNode,
	label?: string,
	subText?: string,
	isError?: boolean,
	isFullWidth?: boolean,
	line?: number,
	errorMessage?: string,
	disabled?: boolean,
	isRTL?: boolean,
	rightPadding?: boolean
	value?: any
	labelLeftGap?: number;
	placeholder?: string
}

const AnimatedSubText = animated(SubText);

const AddressInputField = ({
	font = TypographyENUM.lkSansMedium,
	children,
	label = "",
	subText = "",
	isError = false,
	isFullWidth = false,
	line = 1,
	disabled,
	isRTL = false,
	value,
	labelLeftGap,
	placeholder = ""
}: AddressInputFieldType) => {
	const [styles, api] = useSpring(() => ({
		transform: "translateY(-10px)",
		opacity: 0,
	}));

	useEffect(() => {
		if (subText) {
			api({
				transform: "translateY(0px)",
				opacity: 1,
			});
		} else {
			api({
				transform: "translateY(-10px)",
				opacity: 0,
			});
		}
	}, [subText]);


	const handleOnInputContainerClick = (id: string) => {
		const elem = document.getElementById(id);
		const inputs = elem && elem.querySelectorAll("input[type='text'], input[type='number'], input[type='password']");
		if (inputs && inputs.length > 0) {
			const input = inputs[0] as HTMLInputElement;
			if (document.activeElement?.id !== input?.id) {
				input.focus();
			} else return;
		}
	};


	return (
		<Box font={font} value={!!value}>
			{label && <Label id="label1" htmlFor="input-desktop" left={!value ? labelLeftGap || 16 : 16} prefixText={!!value} isRTL={false}>{label}</Label>}
			<FieldContainer id={`container-${label || placeholder}`} label={!!label} prefixText isRTL={isRTL} fullWidth={isFullWidth} line={line} disabled={disabled} onClick={() => handleOnInputContainerClick(`container-${label || placeholder}`)}>
				{children || null}
			</FieldContainer>
			<AnimatedSubText style={styles} isError={isError}>{subText}</AnimatedSubText>
			{/* {errorMessage && <SubTextSpan>{errorMessage}</SubTextSpan>} */}
		</Box>
	);
};

export default AddressInputField;
