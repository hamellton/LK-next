import React from "react";
import Carousel from "../../../Common/Carousel";
import { ImageCarouselType } from "./ImageCarousel.types";
import { ImageWrapper, Image, ImageContainer, ButtonContainer, Arrow, Relative, MobileArrow } from "./styles";
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";
import Slider from "react-slick";
import { DeviceTypes } from "../../../../Types/general";
import * as Icons from "../../../../Icons/index";

const ImageCarousel = ({ images, courselConfig, mobileView, showCategoryCard, isRTL, showArrow = false, deviceType, getGAEvent, triggerSelectPromotion }: ImageCarouselType) => {
	const carouselRef = React.useRef<Slider>(null);
	const handleShowCategoryCard = (categoryCards: any, contentType?: string, cardCategory?: string) => {
		showCategoryCard(categoryCards, contentType, cardCategory);
	};
	return <>
		<Relative>{showArrow && images?.length > 1 && <ButtonContainer>
			{deviceType==DeviceTypes.DESKTOP && <><Arrow onClick={() => isRTL ? carouselRef.current?.slickNext() : carouselRef.current?.slickPrev()}>
				<span>{isRTL ? "❯" : "❮"}</span>
			</Arrow>
			<Arrow right onClick={() => isRTL ? carouselRef.current?.slickPrev() : carouselRef.current?.slickNext()}>
				<span>{ isRTL ? "❮" : "❯"}</span>

			</Arrow></>}

			{deviceType==DeviceTypes.MOBILE && <><MobileArrow onClick={() => isRTL ? carouselRef.current?.slickNext() : carouselRef.current?.slickPrev()}>
				<span>{ <Icons.MobileLeftArrowHomePage/>}</span>
			</MobileArrow>
			<MobileArrow right onClick={() => isRTL ? carouselRef.current?.slickPrev() : carouselRef.current?.slickNext()}>
				<span>{ <Icons.MobileRightArrowHomePage/>}</span>

			</MobileArrow></>}
		</ButtonContainer>}
		<Carousel isRTL={isRTL} slidesToShow={courselConfig?.slidesToShow} carouselConfig={{ infinite: courselConfig?.infinite || false, autoplay: courselConfig?.autoPlay, ...courselConfig }} mobileView={mobileView} wrapperClassName="home-page-slider" ref={carouselRef} hideArrow={true} >
			{images.map((image:any, index:number) => {
				
				return (
					<Carousel.Slide id={index} currentSlide={1} key={index}>
						{courselConfig?.slidesToShow > 1 &&
						<ImageContainer href={image?.redirectUrl} onClick={() => { if(image?.gaPromotionObj){ triggerSelectPromotion?.(image?.gaPromotionObj);}else{triggerSelectPromotion?.(image); }}} data-creative-name={image?.gaPromotionObj?.creativeName || image?.creativeName} data-promotion-id={image?.gaPromotionObj?.promotionId || image?.promotionId } data-promotion-name={image?.gaPromotionObj?.promotionName || image?.promotionName} data-itemlist-id={image?.gaPromotionObj?.itemlistId || image?.itemlistId} data-itemlist-name={image?.gaPromotionObj?.itemlistName || image?.itemlistName}>
							<Image onClick={() => handleShowCategoryCard(image?.categoryCards, image?.contentType, image?.cardCategory)} src={image?.source} />
						</ImageContainer>
						}
						{courselConfig?.slidesToShow === 1 &&
						<ImageWrapper className="getGaData" data-creative-name={image?.gaPromotionObj?.creativeName || image?.creativeName} data-promotion-id={image?.gaPromotionObj?.promotionId || image?.promotionId } data-promotion-name={image?.gaPromotionObj?.promotionName || image?.promotionName} data-itemlist-id={image?.gaPromotionObj?.itemlistId || image?.itemlistId} data-itemlist-name={image?.gaPromotionObj?.itemlistName || image?.itemlistName} href={image?.redirectUrl} onClick={()=> {getGAEvent?.(image?.gaObj); if(image?.gaPromotionObj){triggerSelectPromotion?.(image?.gaPromotionObj);}else{triggerSelectPromotion?.(image); }}}>
							<Image src={image?.source} />
						</ImageWrapper>
						}

					</Carousel.Slide>
				);})}
		</Carousel>
		</Relative>

	</>;
};

export default ImageCarousel;
