import { action } from "@storybook/addon-actions";
import React from "react";
import { ComponentSizeENUM, ThemeENUM, TypographyENUM } from "../../../Types/general";
import { FormInput } from "../../Common/Input/Input.component";
import { inputs } from "../../Common/Input/Input.types";
import PrimaryButton from "../../Common/PrimaryButton";
import { FormValueType, SignUpFormType } from "./SignUpForm.types";
import { AnchorTag, ButtonErrorWrapper, CheckboxInput, CheckboxLabel, ErrorContainer, ImageWhatsapp, InputWrapper, ReferralInputWrapper, ReferralText, ShowPasswordImage, SignUpFormContainer, UpdateOnWhatsappWrapper } from "./SignUpForm.styles";

const SignUpForm = ({ id, dataLocale, onSignUp, font, formError }: SignUpFormType) => {
	const [formValue, setFormValue] = React.useState<FormValueType>({
		firstName:"",
		lastName:"",
		mobile:"",
		emailAddress:"",
		password:"",
		referralCode:"",
		getUpdateOnWhatsapp:false
	});
	const [error, setError] = React.useState<FormValueType>({
		firstName:"",
		lastName:"",
		mobile:"",
		emailAddress:"",
		password:"",
		referralCode:"",
		getUpdateOnWhatsapp:false
	});
	const [showReferralInput, setShowReferralInput] = React.useState(false);
	const [showPassword, setShowPassword] = React.useState(false);

	const getUpdateOnWhatsapp = (event: React.ChangeEvent<HTMLInputElement>) => {
		setFormValue(value => ({ ...value,getUpdateOnWhatsapp:event.target.checked }));
		action("get update on whatsapp")(event, { getUpdateOnWhatsapp:event.target.checked });
	};


	const updateValue = (type:string, value:string) => {
		setFormValue({ ...formValue, [type]:value });
		setError({ ...error, [type]:"" });
		checkValidation(type,value);
	};

	const checkValidation = (type: string, value:string) => {
		const nameRegex = /^[a-zA-Z\s]*$/;
		const mobileRegex = /^[1-9][0-9]{9}$/;
		// eslint-disable-next-line no-useless-escape
		const emailRegex = /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/;

		// check for required field
		if(value.trim() === "" && type!=="referralCode"){
			setError(errorValue => ({ ...errorValue, [type]:dataLocale.THIS_IS_REQUIRED_FIELD }));
		}

		// extra fieldwise validations
		switch(type){
		case "firstName":
			if(!nameRegex.test(value.trim())){
				setError(errorValue => ({ ...errorValue, [type]:dataLocale.SPECIAL_CHARACTERS_NOT_ALLOWED }));
			}
			break;
		case "lastName":
			if(!nameRegex.test(value.trim())){
				setError(errorValue => ({ ...errorValue, [type]:dataLocale.SPECIAL_CHARACTERS_NOT_ALLOWED }));
			}
			break;
		case "mobile":
			if(!mobileRegex.test(value.trim()) && value.trim()!=""){
				setError(errorValue => ({ ...errorValue, [type]:"Please enter a valid mobile number (eg. 9987XXXXXX)." }));
			}
			break;
		case "emailAddress":
			if(!emailRegex.test(value.trim()) && value.trim()!=""){
				setError(errorValue => ({ ...errorValue, [type]:dataLocale.PLEASE_ENTER_VALID_EMAIL_ADDRESS_EG }));
			}
			break;
		case "password":
			if(value.trim().length<=6 && value.trim()!=""){
				setError(errorValue => ({ ...errorValue, [type]:dataLocale.PASSWORD_SHOULD_BE_MORE_THAN }));
			}
			break;
		}
	};

	const onRegister = (event: React.FormEvent<HTMLFormElement>) => {
		event.preventDefault();

		// validate fields
		Object.keys(formValue).forEach((fieldName:string)=> {
			return checkValidation(fieldName, formValue[fieldName as keyof FormValueType]?.toString());
		});

		// check if any field has error
		let formHasError = false;
		Object.keys(error).forEach((errorValue: string) => {
			if(error[errorValue as keyof FormValueType]){
				formHasError=true;
			}
		});

		// call sign up function if all fields are valid
		if(!formHasError){
			const { firstName, lastName, mobile, emailAddress, password, referralCode } = formValue;
			onSignUp(emailAddress, firstName, lastName, mobile, password, "+91", referralCode);
			// onSignUp(formValue);
		}

		action("sign up form submitted")(event, { formValue:formValue, errors:error });
	};
	return <SignUpFormContainer id={id} styleFont={font} onSubmit={onRegister}>
		<InputWrapper>
			<FormInput errorMessage={error.firstName} font={font} label={dataLocale.FIRST_NAME} onValueChange={(e) => updateValue("firstName",e.target.value)} width="100%" type={inputs.type.text} componentSize={ComponentSizeENUM.medium}/>
		</InputWrapper>
		<InputWrapper>
			<FormInput errorMessage={error.lastName} font={font} label={dataLocale.LAST_NAME} onValueChange={(e) => updateValue("lastName",e.target.value)} width="100%" type={inputs.type.text} componentSize={ComponentSizeENUM.medium}/>
		</InputWrapper>
		<InputWrapper>
			<FormInput errorMessage={error.mobile} font={font} countryCodePrefix="+91" label={dataLocale.MOBILE} onValueChange={(e) => updateValue("mobile",e.target.value)} width="100%" type={inputs.type.text} componentSize={ComponentSizeENUM.medium}/>
		</InputWrapper>
		<InputWrapper>
			<FormInput errorMessage={error.emailAddress} font={font} label={dataLocale.EMAIL_ADDRESS} onValueChange={(e) => updateValue("emailAddress",e.target.value)} width="100%" type={inputs.type.email} componentSize={ComponentSizeENUM.medium}/>
		</InputWrapper>
		<InputWrapper>
			<FormInput errorMessage={error.password} font={font} label={dataLocale.PASSWORD} onValueChange={(e) => updateValue("password",e.target.value)} width="100%" type={showPassword ? inputs.type.text : inputs.type.password} componentSize={ComponentSizeENUM.medium}/>
			<ShowPasswordImage hasError={error.password ? true : false} showPassword={showPassword} onClick={() => setShowPassword(!showPassword)} src="https://static.lenskart.com/media/wysiwyg/sign-register/password-eye.png"/>
		</InputWrapper>
		<InputWrapper>
			{ showReferralInput ?
				<ReferralInputWrapper>
					<FormInput font={font} label={dataLocale.REFERRAL_CODE} onValueChange={(e) => setFormValue({ ...formValue, referralCode:e.target.value })} width="100%" type={inputs.type.text} componentSize={ComponentSizeENUM.medium}/>
			({dataLocale.OPTIONAL})
				</ReferralInputWrapper>
				:
				<ReferralText onClick={() => setShowReferralInput(true)}>{dataLocale.HAVE_REFERRAL}?</ReferralText>}
		</InputWrapper>
		<ButtonErrorWrapper>
			<PrimaryButton onBtnClick={() => null} theme={ThemeENUM.primary} font={TypographyENUM.defaultBook} componentSize={ComponentSizeENUM.medium} id="btn-proceed" width="100%" height="35px" primaryText={dataLocale.REGISTER} />
			{formError && <ErrorContainer>
				{formError}
			</ErrorContainer>}
		</ButtonErrorWrapper>

		<UpdateOnWhatsappWrapper>
			<CheckboxInput type="checkbox" id="whatsapp-updates" onChange={getUpdateOnWhatsapp}/>
			<CheckboxLabel htmlFor="whatsapp-updates">Get updates on Whatsapp <ImageWhatsapp src="	https://static.lenskart.com/media/desktop/img/25-July-19/whatsapp.png"/></CheckboxLabel>
		</UpdateOnWhatsappWrapper>
		<AnchorTag href="//www.lenskart.com/terms-conditions" target="_blank">
			*{dataLocale.T_C_APPLY}
		</AnchorTag>
	</SignUpFormContainer>;
};

export { SignUpForm };
