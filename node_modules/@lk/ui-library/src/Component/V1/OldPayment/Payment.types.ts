export interface NetBankingPropsTypes {
	applyOffer: () => void,
	banksList: Array<BankListType>
	createOrderPayment: (CreateOrderPaymentType: CreateOrderPaymentType, type: string) => void
	dataLocale: DataType
	frameProduct: boolean
	loadingPlaceOrder?: boolean
	paymentCTA: PaymentCTATypes
}
export interface CreateOrderPaymentType {
	netBankingBank: string
}

export interface BankListPropsTypes {
	banksList: Array<BankListType>,
	dataLocale: DataType,
	getBankOffer: (bank: BankListType) => void
	headline: string
	type: string
}
export interface BankListType {
	bankcode: string
	logoImageUrl: string
	name: string
	offers: Array<any>
	label?: string
}

export interface DataType {
	[name: string]: string
}

export interface CartType {
	totals: any
	currencyCode: string
}

export interface StoreCreditType {
	id: string;
	applyCode: (props: any, httpMethod: any) => void,
	cartData: any,
	createOrderPayment: (isValidSC: boolean, type: string) => void,
	currencyMark: any,
	dataLocale: DataType,
	frameProduct: boolean,
	loadingPlaceOrder: boolean,
	payZero: any,
	paymentCTA: PaymentCTATypes,
	scMessage: any
}

export interface StoreCreditFormType {
	applyBtnEnable: boolean
	currencyMark: any,
	handleSubmit: (props: any) => void,
	submitting: boolean
	placeSCOrder: () => void
	removeStoreCredit: (props: string) => void
	cartData: CartType
	remainingAmount: boolean
	showErrorMsg: boolean
	dataLocale: DataType,
	loadingPlaceOrder: boolean,
	payZero: any,
	scMessage: any
	frameProduct: boolean
	paymentCTA: PaymentCTATypes
}

export interface QRCodeTypes {
	id: string
	createOrderPayment: (props: string, code: string, gatewayId: string) => void
	dataLocale: DataType
	frameProduct: boolean
	loadingPlaceOrder?: boolean
	paymentCTA: PaymentCTATypes
	walletDetails: {
		"code": string,
		"label": string,
		"gatewayId": string,
		"enabled": boolean,
		"showCaptcha": boolean,
		"banks": Array<BankListType>,
		"key": string,
		"offers": Array<any>
	}
}

export interface PaymentCardTypes {
	createOrderPayment: (data: CardDetailsType, paymentKey: string) => void
	dataLocale: DataType,
	appliedPaymentOffer: string,
	applyOffer: (data: CardDetailsType, paymentKey: string) => void,
	cardDetails: string,
	cardNumber: number | null,
	frameProduct: boolean,
	isApplyOfferEnable: boolean,
	loadingPlaceOrder: boolean | undefined,
	localeInfo: any,
	paymentCTA: PaymentCTATypes,
	paymentKey: string,
	removeOfferPopup:() => void
}

export interface PaymentCTATypes {
	mainText: string,
	subText: string
}

export interface CardDetailsType {
	paymentCardNum: string,
	paymentCardName: string,
	paymentCardExpiry: any,
	paymentCardCVV: string
}
