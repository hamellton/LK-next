/* eslint-disable react/display-name */
import React, { memo, useCallback, useState } from "react";
import { PlaceOrderText } from "../../PlaceOrderText";
import OverlayTrigger from "../../../OverlayTrigger/OverlayTrigger";
import Tooltip from "../../../ToolTip/Tooltip";
import { InputWrapper, Label, Flex, Form, ClearValueButton, PlaceOrderButton, Input, InputIcon, ErrorDiv, SecureCardViewWrapper, LearnMoreText } from "../paymentCard.styles";
import { TypographyENUM } from "../../../../../Types/general";
import { CardDetailsType } from "../../Payment.types";
// import InfoBar from "../../../../CommonComponents/InfoBar";
// import LearnMoreModal from "./LearnMoreModal";

const PaymentCardForm = memo((props: any) => {
	const [showLearnMoreModal, setShowLearnMoreModal] = useState(false);
	const [values, setValues] = useState<CardDetailsType>({ paymentCardNum: "", paymentCardName: "", paymentCardExpiry: "", paymentCardCVV: "" });
	const [errors, setError] = useState<CardDetailsType>({ paymentCardNum: "", paymentCardName: "", paymentCardExpiry: "", paymentCardCVV: "" });
	// componentDidMount() {
	// 	const form = document.forms.paymentForm;
	// 	this.inputCardExpiry = form?.elements?.paymentCardExpiry;
	// 	this.inputCardNum = form?.elements?.paymentCardNum;
	// }
	// componentDidUpdate(prevProps) {
	// 	const { appliedPaymentOffer } = this.props;
	// 	if (prevProps.appliedPaymentOffer !== appliedPaymentOffer && appliedPaymentOffer) {
	// 		this.tabIndexTimeout = setTimeout(() => {
	// 			this.inputCardExpiry.focus();
	// 		}, 0);
	// 	} else if (
	// 		prevProps.appliedPaymentOffer &&
	//   !appliedPaymentOffer &&
	//   prevProps.appliedPaymentOffer !== appliedPaymentOffer
	// 	) {
	// 		// case when card number changed
	// 		this.tabIndexTimeout = setTimeout(() => {
	// 			this.inputCardNum.focus();
	// 			// this.inputCardExpiry.blur();
	// 		}, 0);
	// 	}
	// }
	// componentWillUnmount() {
	// 	clearTimeout(this.tabIndexTimeout);
	// }
	const getCardType = (key: string) => {
		let returnType = "nocard";
		if (key) {
			if (/^(34|37)/.test(key)) {
				returnType = "amex";
			} else if (/^4/.test(key)) {
				returnType = "visa";
			} else if (/^5[0-5]/.test(key)) {
				returnType = "master";
			} else if (/^(6011|622|64[4-9]|65)/.test(key)) {
				returnType = "discover";
			} else {
				returnType = "nocard";
			}
		}
		return returnType;
	};

	const validate = (values: CardDetailsType) => {
		const {
			dataLocale: {
				PLEASE_ENTER_VALID_CARD_NUMBER,
				PLEASE_ENTER_CARDHOLDER_NAME,
				PLEASE_ENTER_VALID_EXPIRY_DATE,
				PLEASE_ENTER_VALID_CVV_NUMBER,
			},
		} = props;
		const errors = { paymentCardNum: "", paymentCardName: "", paymentCardExpiry: "", paymentCardCVV: "" };
		const isValidNum = /^[0-9]{13,18}$/;
		const isValidDate = /^[0-9]{2}[/][0-9]{4}$/;
		const isValidCVV = /^[0-9]{3,4}$/;
		const isInRange = (number: number) => {
			if (number) {
				const date = new Date();
				const currYear = date.getFullYear();
				const currMonth = date.getMonth();
				const num = number.toString().slice(0, 2);
				const year = number.toString().slice(3);
				return (
					Number(num) > 0 &&
					Number(num) <= 12 &&
					(Number(year) > currYear || (Number(year) === currYear && Number(num) - 1 >= currMonth))
				);
			}
		};
		if (!values.paymentCardNum || !isValidNum.test(values.paymentCardNum)) {
			errors.paymentCardNum = PLEASE_ENTER_VALID_CARD_NUMBER;
		}
		if (!values.paymentCardName) {
			errors.paymentCardName = PLEASE_ENTER_CARDHOLDER_NAME;
		}
		if (
			!values.paymentCardExpiry ||
			!isValidDate.test(values.paymentCardExpiry) ||
			!isInRange(values.paymentCardExpiry)
		) {
			errors.paymentCardExpiry = PLEASE_ENTER_VALID_EXPIRY_DATE;
		}
		if (!values.paymentCardCVV || !isValidCVV.test(values.paymentCardCVV)) {
			errors.paymentCardCVV = PLEASE_ENTER_VALID_CVV_NUMBER;
		}
		setValues(values);
		setError(errors);
	};

	//declared but not call
	// const saveCardview = ({
	// 	input,
	// 	label,
	// 	placeholder,
	// 	type,
	// 	classNames,
	// 	inputIcon,
	// 	showLabel,
	// 	onKeyPress,
	// 	onKeyUp,
	// 	maxLength,
	// 	meta: { touched, error },
	// }: any) => {
	// 	return (
	// 		<div className={touched && error ? `check-wrap ${classNames}` : classNames}>
	// 			<label className={showLabel && `${showLabel} control-label`}>
	// 				<input
	// 					className=""
	// 					{...input}
	// 					autoComplete="new-password"
	// 					maxLength={maxLength}
	// 					placeholder={placeholder}
	// 					type={type}
	// 					onKeyPress={onKeyPress}
	// 					onKeyUp={onKeyUp}
	// 				/>
	// 				{inputIcon && <div className={inputIcon} />}
	// 				{touched && error && <div className="help-block with-errors">{error}</div>}
	// 				<span>{label}</span>
	// 			</label>
	// 		</div>
	// 	);
	// };
	const learnMoreModal = () => {
		setShowLearnMoreModal(!showLearnMoreModal);
	};

	const SecureCardView = ({
		input,
		label,
		placeholder,
		type,
		inputIcon,
		// showLabel,
		onKeyPress,
		onKeyUp,
		maxLength,
	}: any) => {
		const { LEARN_MORE_TEXT } = props.dataLocale;
		return (
			<SecureCardViewWrapper styledFont={TypographyENUM.defaultBook}>
				<label>
					<input
						className=""
						{...input}
						maxLength={maxLength}
						placeholder={placeholder}
						type={type}
						onKeyPress={onKeyPress}
						onKeyUp={onKeyUp}
					/>
					{inputIcon && <div className={inputIcon} />}
					<span>{label}</span>
				</label>
				<LearnMoreText onClick={learnMoreModal}>
					{LEARN_MORE_TEXT}
				</LearnMoreText>
			</SecureCardViewWrapper>
		);
	};

	const RenderField = useCallback(({
		input,
		label,
		placeholder,
		type,
		// classNames,
		inputIcon,
		showLabel,
		onKeyPress,
		onKeyUp,
		onBlur,
		maxLength,
		error,
		// meta: { touched, error },
		disabled,
		removeOfferPopup,
		width,
		onChange,
		value
	}: any) => {
		const {
			dataLocale: { EDIT },
		} = props;
		return (
			<InputWrapper width={width}>
				<Label showLabel={showLabel}>{label}</Label>
				<Input
					{...input}
					value={value}
					disabled={disabled}
					maxLength={maxLength}
					placeholder={placeholder}
					type={type}
					onKeyPress={onKeyPress}
					onKeyUp={onKeyUp}
					onChange={onChange}
					onBlur={onBlur}
					isError={error}
					styledFont={TypographyENUM.defaultBook}
				/>
				{disabled && (
					<span className="edit-icon-container">
						<img
							alt={EDIT}
							src="https://static5.lenskart.com/images/cust_mailer/Apr-03/mdi_edit.png"
							onClick={() => removeOfferPopup()}
						/>
					</span>
				)}
				{inputIcon && <InputIcon cardType={inputIcon} />}
				{error && <ErrorDiv styledFont={TypographyENUM.defaultBook} >{error}</ErrorDiv>}
			</InputWrapper>
		);
	}, []);

	const {
		dataLocale,
		pristine,
		reset,
		submitting,
		loadingPlaceOrder,
		paymentCTA,
		frameProduct,
		// cardNumber,
		onSubmit,
		appliedPaymentOffer,
		removeOfferPopup,
		// cardDetails,
		localeInfo,
	} = props;
	const {
		ENTER_CARD_NUMBER,
		EXPIRY_DATE,
		MM_YY,
		HOW_TO_FIND_CVV,
		CVV,
		CARDHOLDER_NAME,
		CLEAR_VALUES,
		SECURE_CARD,
	} = dataLocale;
	return (
		<React.Fragment>
			{/* {localeInfo?.countryCode.toLowerCase() === "in" && this.state.showLearnMoreModal && (
				<LearnMoreModal
					dataLocale={dataLocale}
					learnMoreModal={this.learnMoreModal}
					showLearnMoreModal={this.state.showLearnMoreModal}
				/>
			)} */}
			<Form
			// noValidate
			// autoComplete="off"
			// autoCorrect="off"
			// name="paymentForm"
			>
				<RenderField
					autoComplete="off"
					disabled={appliedPaymentOffer}
					id="paymentCardNum"
					inputIcon={getCardType(values.paymentCardNum)}
					label={ENTER_CARD_NUMBER}
					showLabel={false}
					maxLength="18"
					name="paymentCardNum"
					placeholder={ENTER_CARD_NUMBER}
					removeOfferPopup={removeOfferPopup}
					type="text"
					onKeyPress={(event: React.KeyboardEvent<HTMLInputElement>) => {
						const keycode = event.which;
						if (
							!(
								event.shiftKey === false &&
								(keycode === 46 ||
									keycode === 8 ||
									keycode === 37 ||
									keycode === 39 ||
									(keycode >= 48 && keycode <= 57))
							)
						) {
							event.preventDefault();
						}
					}}
					onChange={(event: React.ChangeEvent<HTMLInputElement>) => validate({ ...values, paymentCardNum: event.target.value })}
					value={values.paymentCardNum}
					error={errors.paymentCardNum}
				/>
				<Flex styledFont={TypographyENUM.defaultBook}>
					<RenderField
						// autoComplete="off"
						id="paymentCardExpiry"
						label={EXPIRY_DATE}
						showLabel={false}
						maxLength="7"
						name="paymentCardExpiry"
						placeholder={MM_YY}
						type="text"
						onKeyPress={(event: React.KeyboardEvent<HTMLInputElement>) => {
							const keycode = event.which;
							const valLength = (event.target as HTMLInputElement).value.length;
							if (
								!(
									event.shiftKey === false &&
									(keycode === 46 ||
										keycode === 8 ||
										keycode === 37 ||
										keycode === 39 ||
										(keycode >= 48 && keycode <= 57))
								)
							) {
								event.preventDefault();
							}
							if (valLength === 2) {
								(event.target as HTMLInputElement).value += "/";
							}
						}}
						onChange={(event: React.ChangeEvent<HTMLInputElement>) => validate({ ...values, paymentCardExpiry: event.target.value })}
						value={values.paymentCardExpiry}
						error={errors.paymentCardExpiry}
						width={50}
					/>
					<RenderField
						autoComplete="off"
						label={
							<div className="tool-tip">
								<OverlayTrigger
									defaultShow
									overlay={
										<Tooltip className="tooltip-custom" id="cvvIcon" title={CVV}>
											<span>
												<img
													alt={HOW_TO_FIND_CVV}
													src="https://static1.lenskart.com/media/desktop/img/cvv-icon.png"
													style={{ width: "80px" }}
												/>
											</span>
										</Tooltip>
									}
									placement="bottom"
								>
									<div className="fa tool-tip-hover"></div>
								</OverlayTrigger>
							</div>
						}
						showLabel={true}
						maxLength="4"
						name="paymentCardCVV"
						placeholder={CVV}
						type="password"
						onKeyPress={(event: React.KeyboardEvent<HTMLInputElement>) => {
							const keycode = event.which;
							if (
								!(
									event.shiftKey === false &&
									(keycode === 46 ||
										keycode === 8 ||
										keycode === 37 ||
										keycode === 39 ||
										(keycode >= 48 && keycode <= 57))
								)
							) {
								event.preventDefault();
							}
						}}
						onChange={(event: React.ChangeEvent<HTMLInputElement>) => validate({ ...values, paymentCardCVV: event.target.value })}
						value={values.paymentCardCVV}
						error={errors.paymentCardCVV}
						width={45}
					/>
				</Flex>
				<RenderField
					autoComplete="off"
					label={CARDHOLDER_NAME}
					showLabel={false}
					name="paymentCardName"
					placeholder={CARDHOLDER_NAME}
					type="text"
					onKeyPress={(event: React.KeyboardEvent<HTMLInputElement>) => {
						const keycode = event.which;
						if (
							event.shiftKey === false &&
							(keycode === 46 ||
								keycode === 8 ||
								keycode === 37 ||
								keycode === 39 ||
								(keycode >= 48 && keycode <= 57))
						) {
							event.preventDefault();
						}
					}}
					onChange={(event: React.ChangeEvent<HTMLInputElement>) => validate({ ...values, paymentCardName: event.target.value })}
					value={values.paymentCardName}
					error={errors.paymentCardName}
				/>
				{/* <Field
                                name="savecard"
                                type="checkbox"
                                classNames="col-lg-12 col-md-12 col-sm-12 no-padding margin-t10 margin-b5 check-wrap"
                                component={this.saveCardview}
                                label={SAVE_FOR_FASTER_CHECKOUT}
                            /> */}
				{localeInfo?.countryCode.toLowerCase() === "in" && (
					<SecureCardView
						label={SECURE_CARD}
						name="savecard"
						type="checkbox"
					/>
				)}
				{/* {frameProduct && <InfoBar frameProduct={frameProduct} paymentCTA={paymentCTA} />} */}
				<div>
					<PlaceOrderButton
						disabled={!values.paymentCardCVV && !values.paymentCardExpiry && !values.paymentCardName && !values.paymentCardNum}
						style={{ pointerEvents: loadingPlaceOrder && "none" }}
						type="submit"
						onClick={() => onSubmit(values)}
					>
						<PlaceOrderText
							frameProduct={frameProduct}
							loadingPlaceOrder={loadingPlaceOrder}
							paymentCTA={paymentCTA}
						/>
					</PlaceOrderButton>
					<ClearValueButton
						className="hidden"
						disabled={pristine || submitting}
						type="button"
						onClick={reset}
					>
						{CLEAR_VALUES}
					</ClearValueButton>
				</div>
			</Form>
		</React.Fragment>
	);

});

export { PaymentCardForm };
