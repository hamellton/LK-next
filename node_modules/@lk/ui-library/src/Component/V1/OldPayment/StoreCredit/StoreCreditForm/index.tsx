import React from "react";
import { Heading3 } from "../../NetBanking/netBanking.styles";
import { StoreCreditFormType } from "../../Payment.types";
import { FormWrapper, InputBox, StoreCreditButton } from "../storeCredit.styles";

// const validate = (values: any) => {
// 	const errors = { storeCode: "", storeAmt: "" };
// 	const applyBtn = document.getElementById("apply-btn") || "";
// 	if (!values.storeCode) {
// 		errors.storeCode = "Please enter a valid code.";
// 		if (applyBtn && applyBtn.classList.contains("active-btn")) {
// 			applyBtn.classList.remove("active-btn");
// 		}
// 	}
// 	if (!values.storeAmt && sessionStorage.getItem("session") === null) {
// 		errors.storeAmt = "Please enter amount.";
// 		if (applyBtn && applyBtn.classList.contains("active-btn")) {
// 			applyBtn.classList.remove("active-btn");
// 		}
// 	}
// 	if (!values.storeAmt && sessionStorage.getItem("session") !== null) {
// 		values.storeAmt = 10;
// 	} else if (isNaN(Number(values.storeAmt))) {
// 		errors.storeAmt = "Please enter a valid amount.";
// 		if (applyBtn && applyBtn.classList.contains("active-btn")) {
// 			applyBtn.classList.remove("active-btn");
// 		}
// 	}
// 	if (
// 		(values.storeCode && values.storeCode.length >= 0) ||
//     (values.storeAmt && values.storeAmt.length >= 0)
// 	) {
// 		if (applyBtn) {
// 			applyBtn.classList.add("active-btn");
// 		}
// 	}
// 	return errors;
// };

const RenderField = ({
	input,
	label,
	type,
	onKeyPress,
	// meta: { touched, error },
	maxLength,
}: any) => (
	<div>
		{/* <label className="control-label label">
			<em>*</em> {label}
		</label> */}
		<InputBox
			{...input}
			maxLength={maxLength}
			placeholder={label}
			type={type}
			onKeyPress={onKeyPress}
		/>
		{/* {touched && error && <div className="help-block with-errors">{error}</div>} */}
	</div>
);

export const StoreCreditForm = (props: StoreCreditFormType) => {
	const {
		currencyMark,
		dataLocale,
		handleSubmit,
		submitting,
		placeSCOrder,
		removeStoreCredit,
		scMessage,
		cartData,
		// loadingPlaceOrder,
		remainingAmount,
		showErrorMsg,
		payZero,
	} = props;
	const {
		APPLY_STORE_CREDIT,
		ENTER_CODE,
		ENTER_AMOUNT,
		APPLY,
		REMOVE,
		PLEASE_PAY_REMAINING_AMOUNT,
		PLACE_ORDER,
		CHECKOUT,
	} = dataLocale;
	const currencyCode = cartData ? cartData?.currencyCode : dataLocale.CURRENCY_CODE;
	const currencySymbol = currencyMark[currencyCode];
	return (
		<form noValidate onSubmit={handleSubmit}>
			{!payZero && (
				<div className="store-credit-block margin-b0">
					<Heading3>{APPLY_STORE_CREDIT}</Heading3>
					<FormWrapper>
						<RenderField
							classNames="input-section"
							label={ENTER_CODE}
							maxLength="25"
							name="storeCode"
							type="text"
						/>

						<RenderField
							classNames="input-section"
							label={ENTER_AMOUNT}
							maxLength="7"
							name="storeAmt"
							type="text"
							onKeyPress={(event: any) => {
								const keycode = event.which;
								if (
									!(
										event.shiftKey === false &&
										(keycode === 46 ||
											keycode === 8 ||
											keycode === 37 ||
											keycode === 39 ||
											(keycode >= 48 && keycode <= 57))
									)
								) {
									event.preventDefault();
								}
							}}
						/>
						<StoreCreditButton
							disabled={submitting}
							id="apply-btn"
							type="submit"
						>
							{APPLY}
						</StoreCreditButton>
					</FormWrapper>
				</div>
			)}
			{scMessage && showErrorMsg && (
				<div className="alert alert-danger margin-b5 margin-t5">
					<span>{scMessage.message}</span>
				</div>
			)}
			{
				cartData?.totals?.discounts?.length > 0 && cartData?.totals.discounts.map((data: any, keySc: number) => {
					if (data.type === "sc") {
						return (
							<div key={keySc} className="alert alert-success">
								<p className="notice-msg margin-b0 display-flex justify-content-between">
									<span style={{ color: "#4f4f4f" }}>{" " + data.code}</span>
									<span className="bold" style={{ color: "#000" }}>
										{currencySymbol}
										{`${data?.amount || 0}`}
									</span>
									<button
										className="store-remove uppercase text-red"
										type="button"
										onClick={() => removeStoreCredit(data.code)}
									>
										{REMOVE}
									</button>
								</p>
							</div>
						);
					}
					return null;
				})}
			<div className="margin-t20 inline-block">
				{cartData?.totals?.discounts?.length > 0 && (
					<button
						className="active-btn storecredit-btn"
						id="scPlaceOrder"
						// style={{ pointerEvents: loadingPlaceOrder && "none" }}
						type="button"
						onClick={placeSCOrder}
					>
						{cartData?.totals?.total === 0 ? PLACE_ORDER : CHECKOUT}
					</button>
				)}
			</div>
			{remainingAmount && (
				<div className="fs13 fw700 sc-amount-left ls-6 margin-t20">
					{PLEASE_PAY_REMAINING_AMOUNT}
				</div>
			)}
		</form>
	);
};

// export default props => (
// 	<Form
// 		{...props}
// 		component={StoreCreditForm}
// 		subscription={{ submitting: true }}
// 		validate={validate}
// 	/>
// );
