/* eslint-disable react/display-name */
import React, { memo, useState } from "react";
import { StoreCreditForm } from "./StoreCreditForm";
// import config from "../../../../config";
// import "./StoreCredit.scss";
import { StoreCreditType } from "../Payment.types";

const config = { apiPath: { applySC: "/v2/carts/" } };
const StoreCredit = memo((
	{
		id = "store-credit",
		applyCode = () => console.log("Apply Code function cal"),
		cartData = { result: { walletApplied: true } },
		createOrderPayment = () => console.log("Create Order Payment function call"),
		currencyMark = { INR: "â‚¹", SGD: "$", AED: "AED", SAR: "SAR", USD: "$" },
		dataLocale = {
			APPLY: "APPLY",
			APPLY_STORE_CREDIT: "Apply Store Credit",
			CHECKOUT: "CHECKOUT",
			ENTER_AMOUNT: "Enter Amount",
			ENTER_CODE: "Enter Code",
			PLACE_ORDER: "PLACE ORDER",
			PLEASE_PAY_REMAINING_AMOUNT: "Please pay remaining amount using other payment option.",
			REMOVE: "remove"
		},
		frameProduct = false,
		loadingPlaceOrder = false,
		payZero = {},
		paymentCTA = { mainText: "Place order", subText: "(Submit Power in the Next Step)" },
		scMessage = null
	}: StoreCreditType) => {
	const [applyBtnEnable] = useState(false);
	const [remainingAmount, setRemainingAmount] = useState(false);
	const [showErrorMsg, setShowErrorMsg] = useState(false);


	const submitForm = (data: any) => {
		if (data.storeAmt && data.storeCode) {
			const walletApplied = cartData?.result?.walletApplied;
			const apiUrl = `${config.apiPath.applySC}storeCredit/${data.storeCode}/amount/${data.storeAmt}?applyWallet=`;
			applyCode(walletApplied ? `${apiUrl}true` : `${apiUrl}false`, "post");
			setShowErrorMsg(true);
		}
	};

	const placeSCOrder = () => {
		if (cartData?.result?.totals.total === 0) {
			createOrderPayment(JSON.parse(sessionStorage.getItem("isValidSC") || ""), "sc");
		} else {
			setRemainingAmount(true);
			// alert('Please select different payment method or contact our customer care.');
		}
	};

	const removeStoreCredit = (codeid: any) => {
		const data = JSON.parse(sessionStorage.getItem("isValidSC") || "");
		data.cartTotal = "1";
		window.sessionStorage.setItem("isValidSC", JSON.stringify(data));
		const isWalletApplied = cartData?.result?.walletApplied;
		const apiUrl = `${config.apiPath.applySC}storeCredit/${codeid}?applyWallet=`;
		applyCode(isWalletApplied ? `${apiUrl}true` : `${apiUrl}false`, "delete");
		setRemainingAmount(false);
	};

	return (
		<div key="sc" id={id}>
			<StoreCreditForm
				applyBtnEnable={applyBtnEnable}
				currencyMark={currencyMark}
				remainingAmount={remainingAmount}
				showErrorMsg={showErrorMsg}
				placeSCOrder={() => placeSCOrder()}
				removeStoreCredit={(codeid: any) => removeStoreCredit(codeid)}
				handleSubmit={(data: any) => submitForm(data)}
				dataLocale={dataLocale}
				frameProduct={frameProduct}
				loadingPlaceOrder={loadingPlaceOrder}
				payZero={payZero}
				paymentCTA={paymentCTA}
				scMessage={scMessage}
				submitting={false}
				cartData={cartData} />
		</div>
	);
});

export { StoreCredit };
