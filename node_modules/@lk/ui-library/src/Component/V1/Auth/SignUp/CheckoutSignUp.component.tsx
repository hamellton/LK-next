// import { ErrorField } from ""
import { DeviceTypes, kindENUM, ThemeENUM, TypographyENUM } from "../../../../Types/general";
// import SignUp from "../components/SignUp";
// import { SignInStatusType } from "@/types/state/authInfoType";
import Button from "../../Button";
import { action } from "@storybook/addon-actions";
import React, { useEffect, useState } from "react";
import { InputFieldContainer } from "../components/InputFieldContainer";
import { SelectField } from "../components/SelectField";
import { TextField } from "../components/TextField";
// import styled from "styled-components";
import { EditBtn } from "../components/EditField";
import { CheckoutSignUpContainer, ErrorField, InfoText, PolicyAnchor } from "./styles";
import { SignUpFormType } from "./SignUp.types";
import SignInHead from "../components/SignInHead";
import { getNumberLengthFromCode, isName, validateEmail, validateNumber, validatePassword } from "../../../../helpers";
import CommonLoader from "../../../Common/Loader";
import { PhoneCodeDropdownWrapper } from "../SignIn/styles";
import PhoneCodeDropdown from "../../PhonecodeDropdown";


const CheckoutSignUp = ({ id, dataLocale, onSignUp, font, signUpStatus, moveToSignIn, countryCode, userEmail, userNumber, isRTL=false, onClickCms, configData, phoneCodeConfigData, incCountryCodeFont, deviceType, supportMultipleCountries, resetErrorMessage }: SignUpFormType) => {
	const [formValue, setFormValue] = React.useState({
		firstName: "",
		lastName: "",
		mobile: userNumber || "",
		emailAddress: userEmail || "",
		password: "",
		referralCode: ""
	});
	const [clientError, setClientError] = React.useState<{[name: string]: string}>({});
	const [currentPhoneCode, setCurrentPhoneCode] = useState(countryCode);
	const isMobileView = deviceType === DeviceTypes.MOBILE;
	// const [showReferralInput, setShowReferralInput] = React.useState(false);
	// const [showPassword, setShowPassword] = React.useState(false);

	const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {
		event.preventDefault();
		action("sign up form submitted")(event);
		const { firstName, lastName, mobile, emailAddress, password, referralCode } = formValue;
		onSignUp(emailAddress, firstName, lastName, mobile, password, currentPhoneCode, referralCode);
	};

	// const getUpdateOnWhatsapp = (event: React.ChangeEvent<HTMLInputElement>) => {
	// 	action("get update on whatsapp")(event, { getUpdateOnWhatsapp:event.target.checked });
	// };

	// const validateEmail = (email: string) => {
	// 	return String(email)
	// 		.toLowerCase()
	// 		.match(
	// 			/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
	// 		);
	// };
	function validateErrors(e: any) {
		resetErrorMessage && resetErrorMessage();
		const currentErrors = { ...clientError };
		let hasError = false;
		if (!formValue.firstName) {
			currentErrors.firstName = "First Name is required";
			hasError = true;
		} else {
			currentErrors.firstName = "";
		}
		if (!formValue.lastName) {
			currentErrors.lastName = "Last Name is required";
			hasError = true;
		} else {
			currentErrors.lastName = "";
		}
		if (!formValue.mobile) {
			currentErrors.mobile = "Mobile number is required";
			hasError = true;
		} else {
			currentErrors.mobile = "";
		}
		if (!formValue.emailAddress) {
			currentErrors.emailAddress = "Email is required";
			hasError = true;
		} else if (validateEmail(formValue.emailAddress)) {
			currentErrors.emailAddress = validateEmail(formValue.emailAddress);
			hasError = true;
		} else {
			currentErrors.emailAddress = "";
		}
		if (!formValue.password) {
			currentErrors.password = "Password is required";
			hasError = true;
		} else {
			currentErrors.password = "";
		}
		setClientError(currentErrors);
		if (hasError) return;
		else onSubmit(e);
	}

	const [showError,setShowError] = useState(false);
	function errorHandler(key: string, cb: (...val: any) => string, ...val: any) {
		// setFieldSwitch(f => !f);
		const error = cb(...val);
		const newErrors = { ...clientError };
		// setErrors(err => ({ ...err, err[key]: error, isError: !!error }));
		newErrors[key] = error;
		// newErrors.isError = !!error;
		// console.log(newErrors, "newErrors");
		setClientError(newErrors);
		// setShowError(!!error);
		return !!error;
	}

	useEffect(()=> {
		setShowError(signUpStatus.isError);
		// const clrId = setTimeout(()=> {
		// 	setShowError(false);
		// },5000);
		return ()=> {
			// clearTimeout(clrId);

			setShowError(false);
		};
	},[signUpStatus.isError]);

	const handleKeyUpOnInput = (e: any) => {
		e.preventDefault();

		if (e.keyCode === 13) {
			validateErrors(e);
		}
	};

	useEffect(() => {
		if(formValue.mobile.toString().length === getNumberLengthFromCode(countryCode)){
			errorHandler("mobile", validateNumber, formValue.mobile, countryCode, null, dataLocale, true);
		}
	}, [formValue.mobile]);


	// const handleKeyUpOnInput = (e: any) => {
	// 	if(e.target.value === "" || validateEmail(e.target.value,dataLocale, true)) return;
	// 	e.preventDefault();

	// 	if (e.keyCode === 13) {
	// 		submitOtpHandler();
	// 	}
	// };

	// const [allFieldsFilledCorrect, setAllFieldsFilledCorrect] = useState(false);
	// const checkRequiredFieldsNonEmpty = () => {
	// 	const { firstName, mobile, emailAddress, password } = formValue;

	// 	if (firstName !== "" && mobile !== "" && emailAddress !== "" && password !== "") {
	// 		return true;
	// 	}
	// 	return false;
	// };

	// disable the register button unless all required fields are filled correctly
	// useEffect(() => {
	// 	// const anyEmpty = Object.values(userInputObj).some(item => item === '');

	// 	const temp = checkRequiredFieldsNonEmpty();
	// 	if (
	// 		temp &&
	// 		!clientError.firstName &&
	// 		!clientError.lastName &&
	// 		!clientError.mobile &&
	// 		!clientError.emailAddress &&
	// 		!clientError.password
	// 	) {
	// 		setAllFieldsFilledCorrect(true);
	// 	} else {
	// 		setAllFieldsFilledCorrect(false);
	// 	}
	// }, [clientError.firstName, clientError.lastName, clientError.mobile, clientError.emailAddress, clientError.password]);
	useEffect(() => {
		if(clientError.firstName || clientError.lastName || clientError.mobile || clientError.emailAddress || clientError.password){
			setShowError(false);
			resetErrorMessage && resetErrorMessage();
		}
	}, [clientError]);
	
	return <>{signUpStatus.isLoading ? <CommonLoader show={signUpStatus.isLoading}/> : <>
		<SignInHead signInText={dataLocale.CREATE_ACCOUNT} isRTL={isRTL}/>
		<div style={{ display: "flex" }}>
			<CheckoutSignUpContainer id={id} font={font} rightMargin isRTL={isRTL}>
				<InputFieldContainer isFullWidth={true} isError={Boolean(clientError.firstName)} subText={clientError.firstName}>
					<TextField autoFoc={true} value={formValue.firstName} type="text" name="firstName" onChange={(e) => setFormValue({ ...formValue, firstName: e.target.value })} placeholder={`${dataLocale.FIRST_NAME}*`} onBlur={(e) => errorHandler("firstName", isName, e.target.value, dataLocale)} onKeyPress={(e) => errorHandler("firstName", isName, e.target.value, dataLocale)} onKeyUpChange={handleKeyUpOnInput}></TextField>
				</InputFieldContainer>
				<InputFieldContainer gapZero={!isMobileView && supportMultipleCountries} forceLTR={isRTL} isFullWidth={true} isError={Boolean(clientError.mobile)} subText={clientError.mobile}>
					{configData?.SUPPORT_MULTIPLE_COUNTRIES && phoneCodeConfigData && <PhoneCodeDropdownWrapper top={incCountryCodeFont ? "0" : "2"}><PhoneCodeDropdown isMobileView={isMobileView} width={isMobileView ? "" : "68px"} showSvgArrow = {true} incCountryCodeFont={incCountryCodeFont} availableCountries={phoneCodeConfigData.availableCountries} currentPhoneCode={currentPhoneCode} onChange={(newPhoneCode: string) => setCurrentPhoneCode(newPhoneCode)} /></PhoneCodeDropdownWrapper>}
					<TextField isRTL={isRTL} value={formValue.mobile} type="text" name="mobile" onChange={(e) => setFormValue({ ...formValue, mobile: e.target.value })} placeholder={`${dataLocale.MOBILE_NO}*`} onBlur={(e) => errorHandler("mobile", validateNumber, e.target.value, countryCode, null, dataLocale, true)} maxLength={getNumberLengthFromCode(countryCode)} onKeyUpChange={handleKeyUpOnInput} onKeyPress={(event: any) => {
						const keycode = event.which;
						if (
							!(
								event.shiftKey === false &&
									(keycode === 46 ||
										keycode === 8 ||
										keycode === 37 ||
										keycode === 39 ||
										(keycode >= 48 && keycode <= 57))
							)
						) {
							event.preventDefault();
						} else {
							errorHandler("mobile", validateNumber, event.target.value, countryCode, null, dataLocale, true);
						}
					}}>
						{ !configData?.SUPPORT_MULTIPLE_COUNTRIES && countryCode}
					</TextField>
				</InputFieldContainer>
				<InputFieldContainer isFullWidth={true} isError={Boolean(clientError.password)} subText={clientError.password}>
					<TextField isRTL={isRTL} value={formValue.password} type="password" name="password" onChange={(e) => setFormValue({ ...formValue, password: e.target.value })} placeholder={`${dataLocale.PASSWORD}*`} onBlur={(e) => errorHandler("password", validatePassword, e.target.value, dataLocale)} onKeyUpChange={handleKeyUpOnInput} onKeyPress={(e) => errorHandler("password", validatePassword, e.target.value,dataLocale)}></TextField>
				</InputFieldContainer>
				{configData?.SHOW_SUBSCRIBE_LENSKART_AND_NEWSLETTER && <SelectField isRTL={isRTL} setGetsAppUpdate={() => undefined}>{dataLocale.SUBSCRIBE_TO_LENSKART_NEWSLETTER}</SelectField>}
				{/* <InfoText dangerouslySetInnerHTML={{ __html: dataLocale.AGREE_TO_PRIVACY_POLICY }}> */}

				<InfoText>
					{dataLocale.AGREE_TO_PRIVACY_POLICY_POP} <PolicyAnchor onClick={()=>onClickCms()}>{dataLocale.PRIVACY_POLICY}</PolicyAnchor>
				</InfoText>
				<Button
					id="remove-button"
					theme={ThemeENUM.primary}
					kind={kindENUM.background}
					showChildren={true}
					font={TypographyENUM.lkSansBold} //onDecreaseItem(item.id)
					width="100"
					disabled={Boolean(clientError.firstName || clientError.lastName || clientError.mobile || clientError.emailAddress || clientError.password)}
					onClick={validateErrors}
					style={{ height: "57px", borderRadius:"100px", fontSize:"16px" }}
				>
					{dataLocale.CREATE_ACCOUNT}
				</Button>
				{showError && <ErrorField>{signUpStatus.isError ? signUpStatus.errorMessage : ""}</ErrorField>}
				{configData?.SHOW_SIGN_IN && <InfoText className="checkoutSignUp">{dataLocale.HAVE_AN_ACCOUNT} <EditBtn onClick={moveToSignIn}>{dataLocale.SIGN_IN}</EditBtn></InfoText>}
			</CheckoutSignUpContainer>
			<CheckoutSignUpContainer font={font}>
				<InputFieldContainer isFullWidth={true} isError={Boolean(clientError.lastName)} subText={clientError.lastName}>
					<TextField value={formValue.lastName} type="text" name="lastName" onChange={(e) => setFormValue({ ...formValue, lastName: e.target.value })} placeholder={`${dataLocale.LAST_NAME}*`} onKeyUpChange={handleKeyUpOnInput} onBlur={(e) => errorHandler("lastName", isName, e.target.value, dataLocale)} onKeyPress={(e) => errorHandler("lastName", isName, e.target.value, dataLocale)}></TextField>
				</InputFieldContainer>
				<InputFieldContainer isFullWidth={true} isError={Boolean(clientError.emailAddress)} subText={clientError.emailAddress}>
					<TextField value={formValue.emailAddress} type="text" name="email" onChange={(e) => setFormValue({ ...formValue, emailAddress: e.target.value })} placeholder={`${dataLocale.EMAIL}*`} onKeyUpChange={handleKeyUpOnInput} onBlur={(e) => errorHandler("emailAddress", validateEmail, e.target.value, dataLocale, false)} onKeyPress={(e) => errorHandler("emailAddress", validateEmail, e.target.value, dataLocale, true)}></TextField>
				</InputFieldContainer>
			</CheckoutSignUpContainer>
		</div></>}
	</>;
};

export { CheckoutSignUp };
