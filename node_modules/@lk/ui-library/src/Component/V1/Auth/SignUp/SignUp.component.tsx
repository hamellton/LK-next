// import { ErrorField } from ""
import { DeviceTypes, kindENUM, ThemeENUM, TypographyENUM } from "../../../../Types/general";
import SignUp from "../components/SignUp";
// import { SignInStatusType } from "@/types/state/authInfoType";
import Button from "../../Button";
import { action } from "@storybook/addon-actions";
import React, { useState } from "react";
import { InputFieldContainer } from "../components/InputFieldContainer";
import { SelectField } from "../components/SelectField";
import { TextField } from "../components/TextField";
// import styled from "styled-components";
import { EditBtn } from "../components/EditField";
import { ButtonWrapper, ErrorField, FlexFullCenter, InfoText, PolicyAnchor, RefSpan } from "./styles";
import { SignUpFormType } from "./SignUp.types";
import { FlexCenter, PhoneCodeDropdownWrapper, WhatsAppText } from "../SignIn/styles";
import { getNumberLengthFromCode, isName, validateEmail, validateNumber, validatePassword } from "../../../../helpers";
import PhoneCodeDropdown from "../../PhonecodeDropdown";

// const initialErrors = {
// 	firstName: "",
// 	lastName: "",
// 	mobile: "",
// 	emailAddress: "",
// 	password: "",
// 	referralCode: ""
// };

// const initialState = {
// 	firstName: "",
// 	lastName: "",
// 	mobile: "",
// 	emailAddress: "",
// 	password: "",
// 	referralCode: ""
// };

const SignUpComponent = ({ deviceType, id, dataLocale, onSignUp, font, onClose, signUpStatus, moveToSignIn, countryCode, showWhatsAppOption, setGetWhatsAppUpdate, isRTL, onClickCms, noMargin = false, configData, phoneCodeConfigData, incCountryCodeFont ,supportMultipleCountries }: SignUpFormType) => {
	// const [formValue, setFormValue] = React.useState(initialState);
	// const [clientError, setClientError] = React.useState(initialErrors);
	const [showReferralInput, setShowReferralInput] = useState(false);
	const [currentPhoneCode, setCurrentPhoneCode] = useState(countryCode);
	// // const [showPassword, setShowPassword] = React.useState(false);

	const [getsAppUpdate, setGetsAppUpdate] = useState(false);
	console.log(getsAppUpdate);

	// const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {
	// 	event.preventDefault();
	// 	action("sign up form submitted")(event);
	// 	const { firstName, lastName, mobile, emailAddress, password, referralCode } = formValue;
	// 	onSignUp(emailAddress, firstName, lastName, mobile, password, countryCode, referralCode);
	// };

	// const getUpdateOnWhatsapp = (event: React.ChangeEvent<HTMLInputElement>) => {
	// 	action("get update on whatsapp")(event, { getUpdateOnWhatsapp:event.target.checked });
	// };

	// const validateEmail = (email: string) => {
	// 	return String(email)
	// 		.toLowerCase()
	// 		.match(
	// 			/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
	// 		);
	// };
	// const nameReg = (/^[A-Za-z]+$/);
	// const numberReg = (/^[0-9]{1,10}$/);

	// const errorHandle = (value: any, label: string) => {
	// 	if(label === "firstName"){
	// 		if (!value) {
	// 			setClientError({ ...clientError, firstName: dataLocale.FIRST_NAME_IS_REQUIRED });
	// 		} else {
	// 			setClientError({ ...clientError, firstName: "" });
	// 		}
	// 	}
	// 	if(label === "lastName"){
	// 		if (!value) {
	// 			setClientError({ ...clientError, lastName: dataLocale.LAST_NAME_IS_REQUIRED });
	// 		} else {
	// 			setClientError({ ...clientError, lastName: "" });
	// 		}
	// 	}
	// 	if(label === "mobile")
	// 		if (!value) {
	// 			setClientError({ ...clientError, mobile: dataLocale.MOBILE_NUMBER_IS_REQUIRED });
	// 		} else {
	// 			setClientError({ ...clientError, mobile: "" });
	// 		}
	// 	if(label === "emailAddress"){
	// 		if (!value) {
	// 			setClientError({ ...clientError, emailAddress: dataLocale.FIRST_NAME_IS_REQUIRED });
	// 		} else if (!validateEmail(value)) {
	// 			setClientError({ ...clientError, emailAddress: dataLocale.PLEASE_ENTER_A_VALID_EMAIL_ADDRESS });
	// 		} else {
	// 			setClientError({ ...clientError, emailAddress: "" });
	// 		}
	// 	}
	// 	if(label === "password"){
	// 		if (!value) {
	// 			setClientError({ ...clientError, password: dataLocale.PASSWORD_IS_REQUIRED });
	// 		} else if(value.length <= 6){
	// 			setClientError({ ...clientError, password: dataLocale.PASSWORD_SHOULD_BE_MORE_THAN_6_CHARACTERS });
	// 		}
	// 		else {
	// 			setClientError({ ...clientError, password: "" });
	// 		}
	// 	}
	// };

	// function validateErrors(e: any) {
	// 	const currentErrors = { ...clientError };
	// 	let hasError = false;
	// 	if (!formValue.firstName) {
	// 		currentErrors.firstName = dataLocale.FIRST_NAME_IS_REQUIRED;
	// 		hasError = true;
	// 	} else {
	// 		currentErrors.firstName = "";
	// 	}
	// 	if (!formValue.lastName) {
	// 		currentErrors.lastName = dataLocale.LAST_NAME_IS_REQUIRED;
	// 		hasError = true;
	// 	} else {
	// 		currentErrors.lastName = "";
	// 	}
	// 	if (!formValue.mobile) {
	// 		currentErrors.mobile = dataLocale.MOBILE_NUMBER_IS_REQUIRED;
	// 		hasError = true;
	// 	} else {
	// 		currentErrors.mobile = "";
	// 	}
	// 	if (!formValue.emailAddress) {
	// 		currentErrors.emailAddress = dataLocale.FIRST_NAME_IS_REQUIRED;
	// 		hasError = true;
	// 	} else if (!validateEmail(formValue.emailAddress)) {
	// 		currentErrors.emailAddress = dataLocale.PLEASE_ENTER_A_VALID_EMAIL_ADDRESS;
	// 		hasError = true;
	// 	} else {
	// 		currentErrors.emailAddress = "";
	// 	}
	// 	if (!formValue.password) {
	// 		currentErrors.password = dataLocale.PASSWORD_IS_REQUIRED;
	// 		hasError = true;
	// 	} else {
	// 		currentErrors.password = "";
	// 	}
	// 	setClientError(currentErrors);
	// 	if (hasError) return;
	// 	else onSubmit(e);
	// }
	const [formValue, setFormValue] = React.useState({
		firstName: "",
		lastName: "",
		mobile: "",
		emailAddress: "",
		password: "",
		referralCode: ""
	});
	const [clientError, setClientError] = React.useState<{[name: string]: string}>({
		firstName: "",
		lastName: "",
		mobile: "",
		emailAddress: "",
		password: "",
		referralCode: ""
	});
	// const [showReferralInput, setShowReferralInput] = React.useState(false);
	// const [showPassword, setShowPassword] = React.useState(false);

	const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {
		event.preventDefault();
		action("sign up form submitted")(event);
		const { firstName, lastName, mobile, emailAddress, password, referralCode } = formValue;
		onSignUp(emailAddress, firstName, lastName, mobile, password, currentPhoneCode, referralCode);
	};

	function validateErrors(e: any) {
		const currentErrors = { ...clientError };
		let hasError = false;
		if (!formValue.firstName) {
			currentErrors.firstName = "First Name is required";
			hasError = true;
		} else {
			currentErrors.firstName = "";
		}
		if (!formValue.lastName) {
			currentErrors.lastName = "Last Name is required";
			hasError = true;
		} else {
			currentErrors.lastName = "";
		}
		if (!formValue.mobile) {
			currentErrors.mobile = "Mobile number is required";
			hasError = true;
		} else {
			currentErrors.mobile = "";
		}
		if (!formValue.emailAddress) {
			currentErrors.emailAddress = "Email is required";
			hasError = true;
		} else if (validateEmail(formValue.emailAddress)) {
			currentErrors.emailAddress = validateEmail(formValue.emailAddress);
			hasError = true;
		} else {
			currentErrors.emailAddress = "";
		}
		if (!formValue.password) {
			currentErrors.password = "Password is required";
			hasError = true;
		} else {
			currentErrors.password = "";
		}
		setClientError(currentErrors);
		if (hasError) return;
		else onSubmit(e);
	}

	function errorHandler(key: string, cb: (...val: any) => string, ...val: any) {
		// setFieldSwitch(f => !f);
		const error = cb(...val);
		const newErrors = { ...clientError };
		// setErrors(err => ({ ...err, err[key]: error, isError: !!error }));
		newErrors[key] = error;

		// newErrors.isError = !!error;
		// console.log(newErrors, "newErrors");
		setClientError(newErrors);
		return !!error;
	}
	const isMobileView = deviceType === DeviceTypes.MOBILE;

	const handleKeyUpOnInput = (e: any) => {
		e.preventDefault();

		if (e.keyCode === 13) {
			validateErrors(e);
		}
	};
	return <SignUp isSignUp={true} noMargin={noMargin} isRTL={isRTL} isMobileView={isMobileView} onClose={()=>{setClientError({}); onClose();}} createAccountText={dataLocale.CREATE_ACCOUNT} id={id} font={font}>
		<InputFieldContainer isMobileView={isMobileView} isFullWidth={true} isError={Boolean(clientError.firstName)} subText={clientError.firstName}>
			<TextField isRTL={isRTL} value={formValue.firstName} type="text" name="firstName" onChange={(e) => setFormValue({ ...formValue, firstName: e.target.value })} placeholder={`${dataLocale.FIRST_NAME}*`} onBlur={(e) => errorHandler("firstName", isName, e.target.value, dataLocale)} onKeyPress={(e) => errorHandler("firstName", isName, e.target.value)} onKeyUpChange={handleKeyUpOnInput}></TextField>
		</InputFieldContainer>
		<InputFieldContainer isMobileView={isMobileView} isFullWidth={true} isError={Boolean(clientError.lastName)} subText={clientError.lastName}>
			<TextField isRTL={isRTL} value={formValue.lastName} type="text" name="lastName" onChange={(e) => setFormValue({ ...formValue, lastName: e.target.value })} placeholder={dataLocale.LAST_NAME} onBlur={(e) => errorHandler("lastName", isName, e.target.value, dataLocale)} onKeyPress={(e) => errorHandler("lastName", isName, e.target.value)} onKeyUpChange={handleKeyUpOnInput}></TextField>
		</InputFieldContainer>
		<InputFieldContainer gapZero={!isMobileView && supportMultipleCountries} forceLTR={isRTL} isMobileView={isMobileView} isFullWidth={true} isError={Boolean(clientError.mobile)} subText={clientError.mobile}>
			{configData?.SUPPORT_MULTIPLE_COUNTRIES && phoneCodeConfigData && <PhoneCodeDropdownWrapper top={incCountryCodeFont ? "0" : "2"}><PhoneCodeDropdown isMobileView={isMobileView} width={isMobileView ? "" : "68px"} showSvgArrow = {true} incCountryCodeFont={incCountryCodeFont} availableCountries={phoneCodeConfigData.availableCountries} currentPhoneCode={currentPhoneCode} onChange={(newPhoneCode: string) => setCurrentPhoneCode(newPhoneCode)} /></PhoneCodeDropdownWrapper>}
			<TextField isRTL={isRTL} value={formValue.mobile} type="text" name="mobile" onChange={(e) => {
				setFormValue({ ...formValue, mobile: e.target.value });
				errorHandler("mobile", validateNumber, e.target.value, countryCode, null, dataLocale, true);
			}} placeholder={`${dataLocale.MOBILE}*`} onBlur={(e) => errorHandler("mobile", validateNumber, e.target.value, countryCode, null, dataLocale, true)} maxLength={getNumberLengthFromCode(countryCode)} onKeyUpChange={handleKeyUpOnInput} onKeyPress={(event: any) => {
				const keycode = event.which;
				if (
					!(
						event.shiftKey === false &&
									(keycode === 46 ||
										keycode === 8 ||
										keycode === 37 ||
										keycode === 39 ||
										(keycode >= 48 && keycode <= 57))
					)
				) {
					event.preventDefault();
				} else {
					errorHandler("mobile", validateNumber, event.target.value, countryCode, null, dataLocale, true);
				}
			}}>
				{ !configData?.SUPPORT_MULTIPLE_COUNTRIES && countryCode}
			</TextField>
		</InputFieldContainer>
		<InputFieldContainer isMobileView={isMobileView} isFullWidth={true} isError={Boolean(clientError.emailAddress)} subText={clientError.emailAddress}>
			<TextField isRTL={isRTL} value={formValue.emailAddress} type="text" name="email" onChange={(e) => setFormValue({ ...formValue, emailAddress: e.target.value })} placeholder={`${dataLocale.EMAIL}*`} onBlur={(e) => errorHandler("emailAddress", validateEmail, e.target.value, dataLocale, false)} onKeyPress={(e) => errorHandler("emailAddress", validateEmail, e.target.value, dataLocale, true)} onKeyUpChange={handleKeyUpOnInput}></TextField>
		</InputFieldContainer>
		<InputFieldContainer isMobileView={isMobileView} isFullWidth={true} isError={Boolean(clientError.password)} subText={clientError.password}>
			<TextField isRTL={isRTL} value={formValue.password} type="password" name="password" onChange={(e) => setFormValue({ ...formValue, password: e.target.value })} placeholder={`${dataLocale.PASSWORD}*`} onBlur={(e) => errorHandler("password", validatePassword, e.target.value,dataLocale)} onKeyPress={(e) => errorHandler("password", validatePassword, e.target.value,dataLocale)} onKeyUpChange={handleKeyUpOnInput}></TextField>
		</InputFieldContainer>
		{showReferralInput && <InputFieldContainer isMobileView={isMobileView} isFullWidth={true}>
			<TextField isRTL={isRTL} value={formValue.referralCode} type="text" name="referral" onChange={(e) => setFormValue({ ...formValue, referralCode: e.target.value })} placeholder={dataLocale?.REFERRAL_CODE_OPTIONAL_NEW} onKeyUpChange={handleKeyUpOnInput}></TextField>
		</InputFieldContainer>}
		{!showReferralInput && <InfoText><RefSpan onClick={()=>setShowReferralInput(true)}>{dataLocale.GOT_A_REFERRAL_CODE}</RefSpan>( {dataLocale.OPTIONAL} )</InfoText>}
		{showWhatsAppOption ? <SelectField isRTL={isRTL} isPreChecked={true} setGetsAppUpdate={setGetWhatsAppUpdate}><FlexCenter><WhatsAppText>{dataLocale.GET_UPDATES_ON_WHATSAPP_NEW || "Get updates on Whatsapp"} </WhatsAppText><img width={25} src="https://static.lenskart.com/media/desktop/img/25-July-19/whatsapp.png" alt="Whatsapp"/></FlexCenter></SelectField> : configData?.SHOW_SUBSCRIBE_LENSKART_AND_NEWSLETTER && <SelectField isRTL={isRTL} setGetsAppUpdate={setGetsAppUpdate}>{dataLocale.SUBSCRIBE_TO_LENSKART_NEWSLETTER}</SelectField> }
		{/* <InfoText isMobileView={isMobileView} dangerouslySetInnerHTML={{ __html: dataLocale.AGREE_TO_PRIVACY_POLICY }}></InfoText> */}
		{signUpStatus.isError && <ErrorField>{signUpStatus.isError ? signUpStatus.errorMessage : ""}</ErrorField>}
		<InfoText>
			{dataLocale.AGREE_TO_PRIVACY_POLICY_POP} <PolicyAnchor onClick={()=>{setClientError({});onClickCms();}}>{dataLocale.PRIVACY_POLICY}</PolicyAnchor>
		</InfoText>
		<ButtonWrapper>
			<Button
				id="remove-button"
				theme={ThemeENUM.primary}
				kind={kindENUM.background}
				showChildren={true}
				font={TypographyENUM.lkSansBold} //onDecreaseItem(item.id)
				width="100"
				disabled={Boolean(clientError.firstName || clientError.lastName || clientError.mobile || clientError.emailAddress || clientError.password || formValue.firstName === "" || formValue.lastName === "" || formValue.emailAddress ==="" || formValue.mobile === "" || formValue.password === "")}
				onClick={validateErrors}
			>
				{dataLocale.CREATE_ACCOUNT}
			</Button>
		</ButtonWrapper>

		{!isMobileView && <FlexFullCenter><InfoText>{dataLocale.HAVE_AN_ACCOUNT_NEW} <EditBtn onClick={moveToSignIn} padding={"0px 4px"}>{dataLocale.SIGN_IN}</EditBtn></InfoText></FlexFullCenter>}
		{ isMobileView && <ButtonWrapper>
			<Button
				id="remove-button"
				theme={ThemeENUM.signInPrimary}
				kind={kindENUM.background}
				showChildren={true}
				font={TypographyENUM.lkSansBold} //onDecreaseItem(item.id)
				width="100"
				// disabled={Boolean(clientError.firstName || clientError.lastName || clientError.mobile || clientError.emailAddress || clientError.password)}
				onClick={moveToSignIn}
				style={{ background: "#F3FBEF", border: "1.5px solid #737397" }}
			>
				{dataLocale.SIGN_IN}
			</Button>
		</ButtonWrapper>
		}
	</SignUp>;
};

export { SignUpComponent };
