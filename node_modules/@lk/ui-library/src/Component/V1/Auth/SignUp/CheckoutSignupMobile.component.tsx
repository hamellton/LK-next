// import { ErrorField } from ""
import { kindENUM, ThemeENUM, TypographyENUM } from "../../../../Types/general";
import SignUp from "../components/SignUp";
// import { SignInStatusType } from "@/types/state/authInfoType";
import Button from "../../Button";
import { action } from "@storybook/addon-actions";
import React, { useState } from "react";
import { InputFieldContainer } from "../components/InputFieldContainer";
import { SelectField } from "../components/SelectField";
import { TextField } from "../components/TextField";
// import styled from "styled-components";
import { ErrorField, InfoText, PolicyAnchor, RefSpan } from "./styles";
import { SignUpFormType } from "./SignUp.types";
import { FlexCenter, WhatsAppText, PrivacyPolicyText, PhoneCodeDropdownWrapper } from "../SignIn/styles";
import { getNumberLengthFromCode, isName, validateEmail, validateNumber, validateRequired } from "../../../../helpers";
import CommonLoader from "../../../Common/Loader";
import PhoneCodeDropdown from "../../PhonecodeDropdown";

// const initialErrors = {
// 	firstName: "",
// 	lastName: "",
// 	mobile: "",
// 	emailAddress: "",
// 	password: "",
// 	referralCode: ""
// };

// const initialState = {
// 	firstName: "",
// 	lastName: "",
// 	mobile: "",
// 	emailAddress: "",
// 	password: "",
// 	referralCode: ""
// };

const CheckoutSignupMobile = ({ id, dataLocale, onSignUp, font, onClose, signUpStatus, countryCode, showWhatsAppOption, setGetWhatsAppUpdate, isRTL, isMobileView = false, userNumber, userEmail, onClickCms, cartSignUp = false, configData, phoneCodeConfigData, incCountryCodeFont }: SignUpFormType) => {
	// const [formValue, setFormValue] = React.useState(initialState);
	// const [clientError, setClientError] = React.useState(initialErrors);
	const [showReferralInput, setShowReferralInput] = useState(false);
	// // const [showPassword, setShowPassword] = React.useState(false);

	const [getsAppUpdate, setGetsAppUpdate] = useState(false);
	console.log(getsAppUpdate);
	const [currentPhoneCode, setCurrentPhoneCode] = useState(countryCode);

	// const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {
	// 	event.preventDefault();
	// 	action("sign up form submitted")(event);
	// 	const { firstName, lastName, mobile, emailAddress, password, referralCode } = formValue;
	// 	onSignUp(emailAddress, firstName, lastName, mobile, password, countryCode, referralCode);
	// };

	// const getUpdateOnWhatsapp = (event: React.ChangeEvent<HTMLInputElement>) => {
	// 	action("get update on whatsapp")(event, { getUpdateOnWhatsapp:event.target.checked });
	// };

	// const validateEmail = (email: string) => {
	// 	return String(email)
	// 		.toLowerCase()
	// 		.match(
	// 			/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
	// 		);
	// };
	// const nameReg = (/^[A-Za-z]+$/);
	// const numberReg = (/^[0-9]{1,10}$/);

	// const errorHandle = (value: any, label: string) => {
	// 	if(label === "firstName"){
	// 		if (!value) {
	// 			setClientError({ ...clientError, firstName: dataLocale.FIRST_NAME_IS_REQUIRED });
	// 		} else {
	// 			setClientError({ ...clientError, firstName: "" });
	// 		}
	// 	}
	// 	if(label === "lastName"){
	// 		if (!value) {
	// 			setClientError({ ...clientError, lastName: dataLocale.LAST_NAME_IS_REQUIRED });
	// 		} else {
	// 			setClientError({ ...clientError, lastName: "" });
	// 		}
	// 	}
	// 	if(label === "mobile")
	// 		if (!value) {
	// 			setClientError({ ...clientError, mobile: dataLocale.MOBILE_NUMBER_IS_REQUIRED });
	// 		} else {
	// 			setClientError({ ...clientError, mobile: "" });
	// 		}
	// 	if(label === "emailAddress"){
	// 		if (!value) {
	// 			setClientError({ ...clientError, emailAddress: dataLocale.FIRST_NAME_IS_REQUIRED });
	// 		} else if (!validateEmail(value)) {
	// 			setClientError({ ...clientError, emailAddress: dataLocale.PLEASE_ENTER_A_VALID_EMAIL_ADDRESS });
	// 		} else {
	// 			setClientError({ ...clientError, emailAddress: "" });
	// 		}
	// 	}
	// 	if(label === "password"){
	// 		if (!value) {
	// 			setClientError({ ...clientError, password: dataLocale.PASSWORD_IS_REQUIRED });
	// 		} else if(value.length <= 6){
	// 			setClientError({ ...clientError, password: dataLocale.PASSWORD_SHOULD_BE_MORE_THAN_6_CHARACTERS });
	// 		}
	// 		else {
	// 			setClientError({ ...clientError, password: "" });
	// 		}
	// 	}
	// };

	// function validateErrors(e: any) {
	// 	const currentErrors = { ...clientError };
	// 	let hasError = false;
	// 	if (!formValue.firstName) {
	// 		currentErrors.firstName = dataLocale.FIRST_NAME_IS_REQUIRED;
	// 		hasError = true;
	// 	} else {
	// 		currentErrors.firstName = "";
	// 	}
	// 	if (!formValue.lastName) {
	// 		currentErrors.lastName = dataLocale.LAST_NAME_IS_REQUIRED;
	// 		hasError = true;
	// 	} else {
	// 		currentErrors.lastName = "";
	// 	}
	// 	if (!formValue.mobile) {
	// 		currentErrors.mobile = dataLocale.MOBILE_NUMBER_IS_REQUIRED;
	// 		hasError = true;
	// 	} else {
	// 		currentErrors.mobile = "";
	// 	}
	// 	if (!formValue.emailAddress) {
	// 		currentErrors.emailAddress = dataLocale.FIRST_NAME_IS_REQUIRED;
	// 		hasError = true;
	// 	} else if (!validateEmail(formValue.emailAddress)) {
	// 		currentErrors.emailAddress = dataLocale.PLEASE_ENTER_A_VALID_EMAIL_ADDRESS;
	// 		hasError = true;
	// 	} else {
	// 		currentErrors.emailAddress = "";
	// 	}
	// 	if (!formValue.password) {
	// 		currentErrors.password = dataLocale.PASSWORD_IS_REQUIRED;
	// 		hasError = true;
	// 	} else {
	// 		currentErrors.password = "";
	// 	}
	// 	setClientError(currentErrors);
	// 	if (hasError) return;
	// 	else onSubmit(e);
	// }

	const [formValue, setFormValue] = React.useState({
		firstName: "",
		lastName: "",
		mobile: userNumber || "",
		emailAddress: userEmail || "",
		password: "",
		referralCode: ""
	});
	const [clientError, setClientError] = React.useState<{[name: string]: string}>({
		firstName: "",
		lastName: "",
		mobile: "",
		emailAddress: "",
		password: "",
		referralCode: ""
	});
	// const [showReferralInput, setShowReferralInput] = React.useState(false);
	// const [showPassword, setShowPassword] = React.useState(false);

	const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {
		event.preventDefault();
		action("sign up form submitted")(event);
		const { firstName, lastName, mobile, emailAddress, password, referralCode } = formValue;
		onSignUp(emailAddress, firstName, lastName, mobile, password, currentPhoneCode, referralCode);
	};

	function validateErrors(e: any) {
		const currentErrors = { ...clientError };
		let hasError = false;
		if (!formValue.firstName) {
			currentErrors.firstName = "First Name is required";
			hasError = true;
		} else {
			currentErrors.firstName = "";
		}
		if (!formValue.lastName) {
			currentErrors.lastName = "Last Name is required";
			hasError = true;
		} else {
			currentErrors.lastName = "";
		}
		if (!formValue.mobile) {
			currentErrors.mobile = "Mobile number is required";
			hasError = true;
		} else {
			currentErrors.mobile = "";
		}
		if (!formValue.emailAddress) {
			currentErrors.emailAddress = "Email is required";
			hasError = true;
		} else if (validateEmail(formValue.emailAddress)) {
			currentErrors.emailAddress = validateEmail(formValue.emailAddress);
			hasError = true;
		} else {
			currentErrors.emailAddress = "";
		}
		if (!formValue.password) {
			currentErrors.password = "Password is required";
			hasError = true;
		} else {
			currentErrors.password = "";
		}
		setClientError(currentErrors);
		if (hasError) return;
		else onSubmit(e);
	}

	function errorHandler(key: string, cb: (...val: any) => string, ...val: any) {
		// setFieldSwitch(f => !f);
		const error = cb(...val);
		const newErrors = { ...clientError };
		// setErrors(err => ({ ...err, err[key]: error, isError: !!error }));
		newErrors[key] = error;
		// newErrors.isError = !!error;
		// console.log(newErrors, "newErrors");
		setClientError(newErrors);
		return !!error;
	}

	return <> {signUpStatus.isLoading ? <CommonLoader show={signUpStatus.isLoading} /> : <SignUp cartSignUp={cartSignUp} isRTL={isRTL} onClose={onClose} createAccountText={dataLocale.CREATE_ACCOUNT} id={id} font={font} isMobileView={isMobileView}>
		<InputFieldContainer isFullWidth={true} isError={Boolean(clientError.firstName)} subText={clientError.firstName} isMobileView={isMobileView}>
			<TextField value={formValue.firstName} type="text" name="firstName" onChange={(e) => setFormValue({ ...formValue, firstName: e.target.value })} placeholder={`${dataLocale.FIRST_NAME} ${dataLocale?.SYMBOL_ASTRIX}`} onBlur={(e) => errorHandler("firstName", isName, e.target.value)} onKeyPress={(e) => errorHandler("firstName", isName, e.target.value)}></TextField>
		</InputFieldContainer>
		<InputFieldContainer isFullWidth={true} isError={Boolean(clientError.lastName)} subText={clientError.lastName} isMobileView={isMobileView}>
			<TextField value={formValue.lastName} type="text" name="lastName" onChange={(e) => setFormValue({ ...formValue, lastName: e.target.value })} placeholder={dataLocale.LAST_NAME} onBlur={(e) => errorHandler("lastName", isName, e.target.value)} onKeyPress={(e) => errorHandler("lastName", isName, e.target.value)}></TextField>
		</InputFieldContainer>
		<InputFieldContainer forceLTR={isRTL} isFullWidth={true} isError={Boolean(clientError.mobile)} subText={clientError.mobile} isMobileView={isMobileView}>
			{configData?.SUPPORT_MULTIPLE_COUNTRIES && phoneCodeConfigData && <PhoneCodeDropdownWrapper top={incCountryCodeFont ? "0" : "2"}><PhoneCodeDropdown isMobileView={isMobileView} showSvgArrow = {true} incCountryCodeFont={incCountryCodeFont} availableCountries={phoneCodeConfigData.availableCountries} currentPhoneCode={currentPhoneCode} onChange={(newPhoneCode: string) => setCurrentPhoneCode(newPhoneCode)} /></PhoneCodeDropdownWrapper>}
			<TextField isRTL={isRTL} value={formValue.mobile} type="text" name="mobile" onChange={(e) => setFormValue({ ...formValue, mobile: e.target.value })} placeholder={`${dataLocale.MOBILE} ${dataLocale?.SYMBOL_ASTRIX}`} onBlur={(e) => errorHandler("mobile", validateNumber, e.target.value, countryCode)} maxLength={getNumberLengthFromCode(countryCode)} onKeyPress={(event: any) => {
				const keycode = event.which;
				if (
					!(
						event.shiftKey === false &&
									(keycode === 46 ||
										keycode === 8 ||
										keycode === 37 ||
										keycode === 39 ||
										(keycode >= 48 && keycode <= 57))
					)
				) {
					event.preventDefault();
				} else {
					errorHandler("mobile", validateNumber, event.target.value, countryCode);
				}
			}}>
				{ !configData?.SUPPORT_MULTIPLE_COUNTRIES && countryCode}
			</TextField>
		</InputFieldContainer>
		<InputFieldContainer isFullWidth={true} isError={Boolean(clientError.emailAddress)} subText={clientError.emailAddress} isMobileView={isMobileView}>
			<TextField value={formValue.emailAddress} type="text" name="email" onChange={(e) => setFormValue({ ...formValue, emailAddress: e.target.value })} placeholder={`${dataLocale.EMAIL} ${dataLocale?.SYMBOL_ASTRIX}`} onBlur={(e) => errorHandler("emailAddress", validateEmail, e.target.value)} onKeyPress={(e) => errorHandler("emailAddress", validateEmail, e.target.value)}></TextField>
		</InputFieldContainer>
		<InputFieldContainer isFullWidth={true} isError={Boolean(clientError.password)} subText={clientError.password} isMobileView={isMobileView}>
			<TextField isRTL={isRTL} value={formValue.password} type="password" name="password" onChange={(e) => setFormValue({ ...formValue, password: e.target.value })} placeholder={`${dataLocale.PASSWORD} ${dataLocale?.SYMBOL_ASTRIX}`} onBlur={(e) => errorHandler("password", validateRequired, e.target.value)} onKeyPress={(e) => errorHandler("password", validateRequired, e.target.value)}></TextField>
		</InputFieldContainer>
		{showReferralInput && <InputFieldContainer isFullWidth={true} isMobileView={isMobileView}>
			<TextField value={formValue.referralCode} type="text" name="referral" onChange={(e) => setFormValue({ ...formValue, referralCode: e.target.value })} placeholder={"Referral Code (optional)"} onKeyUpChange={() => null}></TextField>
		</InputFieldContainer>}
		{!showReferralInput && <InfoText isMobileView={isMobileView}><RefSpan onClick={()=>setShowReferralInput(true)}>{dataLocale.GOT_A_REFERRAL_CODE}</RefSpan>( {dataLocale.OPTIONAL} )</InfoText>}
		{showWhatsAppOption ? <SelectField setGetsAppUpdate={setGetWhatsAppUpdate}><FlexCenter><WhatsAppText>{dataLocale.GET_UPDATES_ON_WHATSAPP || "Get updates on Whatsapp"} </WhatsAppText><img width={25} src="https://static.lenskart.com/media/desktop/img/25-July-19/whatsapp.png" alt="Whatsapp"/></FlexCenter></SelectField> : configData?.SHOW_SUBSCRIBE_LENSKART_AND_NEWSLETTER && <SelectField setGetsAppUpdate={setGetsAppUpdate} isMobileView={isMobileView}>{dataLocale.SUBSCRIBE_TO_LENSKART_NEWSLETTER}</SelectField> }
		{/* <InfoText dangerouslySetInnerHTML={{ __html: dataLocale.AGREE_TO_PRIVACY_POLICY }} isMobileView={isMobileView}></InfoText> */}
		<PrivacyPolicyText cartSignUp={cartSignUp}>{dataLocale.AGREE_TO_PRIVACY_POLICY_POP} <PolicyAnchor onClick={()=>onClickCms()}>{dataLocale.PRIVACY_POLICY}</PolicyAnchor></PrivacyPolicyText>
		<Button
			id="remove-button"
			theme={ThemeENUM.primary}
			kind={kindENUM.background}
			showChildren={true}
			font={TypographyENUM.lkSansRegular} //onDecreaseItem(item.id)
			width="100"
			disabled={Boolean(clientError.firstName || clientError.lastName || clientError.mobile || clientError.emailAddress || clientError.password)}
			onClick={validateErrors}
			loading={signUpStatus?.isLoading}
		>
			{signUpStatus?.isLoading ? "" : dataLocale.CREATE_ACCOUNT}
		</Button>
		{cartSignUp && <ErrorField>{signUpStatus.isError ? signUpStatus.errorMessage : ""}</ErrorField>}
	</SignUp>}</>;
};

export { CheckoutSignupMobile };
