import React from "react";
import styled, { css } from "styled-components";
import { BackArrow } from "../../../../Icons";
import { TypographyENUM } from "../../../../Types/general";

interface SignInHeadType {
	arrowAction?: () => void,
	signInText: string,
    isRTL?:boolean,
    isCompact?: boolean,
	isCheckout?: boolean
}
const Wrapper = styled.div<{ isCheckout?:boolean, isCompact?: boolean}>`
    display: flex;
    align-items: center;
    margin-bottom: ${props => props.isCompact ? "4px" : "15px"};
	margin-bottom: ${props => props.isCheckout ? "4px" : "25px"};
	@media screen and (max-width:767px){
		margin-bottom: ${props => props.isCheckout ? "4px" : "20px"};
	}
	@media screen and (max-width: 1300px) and (max-height: 900px) and (orientation: landscape) {
		margin-bottom: ${props => props.isCompact ? "4px" : "15px"};
		margin-bottom: ${props => props.isCheckout ? "4px" : "15px"};
	}
    div {
        font-family: ${TypographyENUM.lkSerifNormal};
        font-style: normal;
        font-weight: 400;
        line-height: 36px;
		font-size: 24px;
        letter-spacing: -0.02em;
        color: var(--text);
		${props => !props.isCheckout && css`
		@media screen and (min-width:768px) and (max-width:1439px){
			font-size: 18px;
		}
		@media screen and (max-width: 1300px) and (max-height: 900px) and (orientation: landscape) {
			font-size: 18px;
		}`}
		@media screen and (max-width:389px){
			font-size: 22px;
		}
    }
`;
const ArrowContainer = styled.div<{isRTL?: boolean}>`
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 6px 6px 6px 0;
    cursor: pointer;
    svg {
        height: 13px;
        transform: ${(props)=>props.isRTL ? "scaleX(-1)" : ""};
    }
`;
const SignInHead = ({ arrowAction, signInText, isRTL, isCompact, isCheckout }: SignInHeadType) => {
	return (
		<Wrapper isCompact={isCompact} isCheckout={isCheckout}>
			{arrowAction && <ArrowContainer isRTL={isRTL} onClick={arrowAction}><BackArrow/></ArrowContainer>}
			<div>{signInText}</div>
		</Wrapper>
	);
};

export default SignInHead;
