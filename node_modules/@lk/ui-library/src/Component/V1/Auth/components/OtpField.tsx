import React, { ForwardedRef, useEffect, /*useRef,*/ useState } from "react";
import { TextTypeENUM } from "./Auth.types";
import styled, { css } from "styled-components";
import { TypographyENUM } from "../../../../Types/general";

interface OtpFieldType {
	value: string | number | null,
	onChange: (val: string | number) => void,
	type: TextTypeENUM,
	showText?: boolean,
	onKeyUpChange?: (ev: any) => void;
	autoSubmitOTP?: () => void;
	isMobileView?: boolean,
	submitRef?: ForwardedRef<HTMLElement>;
	isCheckout?: boolean
}
// interface InputFieldType {
// 	value: string,
// 	onChange: (val: string, index?: number, focusIndex?: number) => void,
// 	type: TextTypeENUM,
// 	index: number,
// 	activeIndex: number
// 	isMobileView?: boolean
// }

const OtpTextField = styled.input<{ isMobileView?: boolean, isCheckout?: boolean}>`
    display: flex;
    flex-direction: row;
    // padding: 4px;
    width: 100%;
    height: 56px;
	outline: none;
    background: ${props => props.isMobileView ? "var(--white)" : ""};
    border: 1px solid var(--light-purple-10);
    box-shadow: 0px 1px 2px rgba(16, 24, 40, 0.05);
    border-radius: 8px;
    font-family: ${TypographyENUM.lkSansRegular};
    font-style: normal;
    font-weight: 400;
    font-size: 20px;
    line-height: 30px;
    color: var(--dark-blue-100);
	user-select: initial;
	&::before, &::after {
    	user-select: initial;
	}
	letter-spacing: 41px;
    padding-left: 29px;
	border: 1px solid rgb(226, 226, 238);
    border-radius: 12px;

	${props => !props.isCheckout && css`@media screen and (min-width:768px) and (max-width:1439px){
		height: 3vw;
	}`}
`;

const OtpWrapper = styled.div`
    display: flex;
	margin-left: -15px;
	min-width: 200px;
	margin-top:-10px;
	margin-bottom:0px;
	@media screen and (min-width:768px){
		margin-bottom:-10px;
	}
`;
// function valueSplitter(value: string | number | null) {
// 	if (value && typeof value === "string") return value.split("");
// 	if (value && typeof value === "number") {
// 		const digits = value.toString().split("");
// 		const realDigits = digits;
// 		return realDigits;
// 	}
// 	return [];
// }
// function validValues(arr: string[]) {
// 	let isValid = true;
// 	arr.forEach(d => {
// 		if(!d || !parseInt(d)) isValid = false;
// 	});
// 	return isValid;
// }
// const InputField = ({ isMobileView, index, activeIndex, type, value, onChange }: InputFieldType) => {
// 	const inputBox = useRef<HTMLInputElement>(null);
// 	// let which;
// 	useEffect(() => {
// 		if (index === activeIndex) inputBox.current?.focus();
// 	}, [index, activeIndex]);
// 	const onOtpKeyDown = (ev: any) => {
// 		// ev.persist();
// 		if (ev.which === 13) return;
// 		// which = ev.which;
// 		const keycode = ev.which;
// 		// console.log("on otp down", ev.target.value, ev);
// 		if (
// 			!(
// 				ev.shiftKey === false &&
// 					(keycode === 46 ||
// 						keycode === 8 ||
// 						keycode === 37 ||
// 						keycode === 39 ||
// 						(keycode >= 48 && keycode <= 57))
// 			)
// 		) {
// 			ev.preventDefault();
// 		} else if(keycode === 37) {
// 			onChange(value, index, Math.max(index-1, 0));
// 		} else if(keycode === 39) {
// 			onChange(value, index, Math.min(index+1, 3));
// 		} else if(!(keycode === 37 || keycode === 39)) {
// 			if((keycode === 46 || keycode === 8) && !value) onChange("", index, Math.max(index-1, 0)); //deleting on a field with no value
// 			else if(value && !(keycode === 46 || keycode === 8) && index < 3) onChange(ev.key, index+1, index+1); //adding on field with existing value
// 			else if(value && (keycode === 46 || keycode === 8)) onChange("", index, Math.max(index-1, 0)); //deleting on field with existing value
// 			else if(!value && !(keycode === 46 || keycode === 8)) onChange(ev.key, index, index+1); //normal input => adding on a field with no value
// 		}
// 		// else if (
// 		// 	!(
// 		// 		ev.shiftKey === false &&
// 		// 			(keycode === 46 ||
// 		// 				keycode === 8 ||
// 		// 				keycode === 37 ||
// 		// 				keycode === 39 ||
// 		// 				(keycode >= 48 && keycode <= 57))
// 		// 	)
// 		// ) {
// 		// 	ev.preventDefault();
// 		// }
// 	};
// 	return (
// 		<OtpTextField isMobileView={isMobileView} maxLength={1} ref={inputBox} type={type} value={value} onKeyDown={onOtpKeyDown} />
// 	);
// };
// onChange={(e: React.ChangeEvent<HTMLInputElement>) => onChange(e.target.value)}
const OtpField = ({ /*isMobileView, value, type, showText,*/ onChange, autoSubmitOTP, onKeyUpChange, /*submitRef*/ isCheckout }: OtpFieldType) => {
	// const [valueArr, setValueArr] = useState<(string)[]>(valueSplitter(value));
	// const [currentFocusIdx, setCurrentFocusIdx] = useState(0);
	const [otp, setOtp] = useState("");
	useEffect(
		() => {
			if(otp.length === 4 /*&& validValues(valueArr)*/) {
				if(autoSubmitOTP && typeof autoSubmitOTP === "function"){
					autoSubmitOTP();
					// if(submitRef?.current) {
					// 	submitRef.current.focus();
					// }
				}
				// console.log("AutoSubmit");
			}
		},[otp.length, autoSubmitOTP]);

	// function changeHandler(text: string, index: number, focusIndex?: number) {
	// 	const oldValue = [...valueArr];
	// 	if (type === TextTypeENUM.number) {
	// 		// oldValue[index] = parseInt(text);
	// 		oldValue[index] = text;
	// 		setValueArr(oldValue);
	// 		const newValue = oldValue.join("");
	// 		onChange(parseInt(newValue));
	// 	} else {
	// 		oldValue[index] = text;
	// 		setValueArr(oldValue);
	// 		const newValue = oldValue.join("");
	// 		onChange(newValue);
	// 	}
	// 	setCurrentFocusIdx(focusIndex ? focusIndex : (text ? index + 1 : Math.max((index - 1), 0)));
	// }
	function changeHandler(e: any) {
		const numCheck = (/^[0-9]+$/);
		if(!e.target.value || ((e.target.value.length <= 4) && numCheck.test(e.target.value))) {
			setOtp(e.target.value);
			onChange(e.target.value === "" ? "" : parseInt(e.target.value));
		}
	}
	return (
		<OtpWrapper>
			{/* {Array.from({ length: 4 }).map((d, i) => <InputField isMobileView={isMobileView} key={i} index={i} activeIndex={currentFocusIdx} type={showText ? TextTypeENUM.text : TextTypeENUM.password} value={valueArr?.[i] || ""} onChange={(val: string, index?: number, focusIndex?: number) => changeHandler(val, index || i, focusIndex)}></InputField>)} */}
			<OtpTextField
				value={otp}
				type={TextTypeENUM.text}
				inputMode="numeric"
				onChange={changeHandler}
				onKeyUp={onKeyUpChange}
				autoComplete="one-time-code"
				isCheckout={isCheckout}
			/>
		</OtpWrapper>
	);
};

export default OtpField;
