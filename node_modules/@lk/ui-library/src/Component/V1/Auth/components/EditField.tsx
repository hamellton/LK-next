import React from "react";
import styled from "styled-components";
// import { EditEmailSignIn } from "../../../../Icons";
import { DataType, TypographyENUM } from "../../../../Types/general";

const FieldContainer = styled.div<{isMobileView:boolean, isCompact?: boolean, isCheckout?: boolean}>`
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    width: 100%;
    margin-bottom: ${props => props.isMobileView ? "0" : "15px"};
	margin-top: ${props => props.isMobileView ? "0" : "15px"};
    ${props => props.isCompact ? "margin-bottom: 20px" : ""};
	margin-top: ${props => props.isCheckout ? "0" : "15px"};
	@media screen and (max-width: 1300px) and (max-height: 900px) and (orientation: landscape) {
		margin-top: ${props => props.isMobileView ? "0" : "-5px"};
        margin-bottom: 12px;
    }
`;
const TopLabel = styled.div<{isMobileView: boolean; isOtpField?: boolean}>`
    font-family: ${props => props.isMobileView ? TypographyENUM.lkSansRegular : TypographyENUM.lkSansRegular};
    font-style: normal;
    /* font-weight: 700; */
    font-size: ${props => props.isOtpField ? "20px" : "14px"};
    line-height: 20px;
    letter-spacing: -0.02em;
	color: #66668E;
	margin-bottom: 3px;
	@media screen and (max-width: 1300px) and (max-height: 900px) and (orientation: landscape) {
		font-size: ${props => props.isOtpField ? "20px" : "12px"};
		margin-bottom: 0px;
    }
`;
const MainField = styled.div<{longText?: boolean}>`
    font-family: ${TypographyENUM.lkSansRegular};
    font-style: normal;
    font-weight: 400;
    font-size: ${props => props.longText ? "12px" : "20px"};
    line-height: 20px;
    letter-spacing: -0.02em;
    color: var(--dark-blue-100);
	margin-bottom:2px;
	@media screen and (max-width: 1300px) and (max-height: 900px) and (orientation: landscape) {
		font-size: ${props => props.longText ? "12px" : "16px"};
		margin-bottom:2px;
    }
	@media screen and (max-width:767px){
		font-size: ${props => props.longText ? "12px" : "18px"};
	}
`;
export const EditBtn = styled.button<{ disabled?: boolean, fullWidth?: boolean,padding?:string, isOtpField?: boolean }>`
    font-family: ${TypographyENUM.lkSansBold};
    font-style: normal;
    /* font-weight: 700; */
    font-size: ${props => props.isOtpField ? "14px" : "14px"};
    line-height: 20px;
    letter-spacing: -0.02em;
    text-decoration-line: underline;
    border: none;
    outline: none;
    background: transparent;
    ${props => !props.disabled ? `
        color: var(--dark-blue-100);
        cursor: pointer;
    ` : " color: var(--dark-blue-100);"}
	${props => props.fullWidth && `
		width: 100%;
	`}
    ${props => props.padding && `
		padding: ${props.padding};
	`}
`;

const EditFiled = styled.div`
	display: flex;
	-webkit-box-align: center;
	align-items: center;
	@media screen and (max-width:767px){
		margin-bottom: 12px;
	}
	svg{
		position: relative;
        top: 2px;
	}
`;

const OuterMainField = styled.div`
    direction: ltr;
`;

const SecondRow = styled.div<{ isOtpField?: boolean }>`
    display: flex;
    justify-content: space-between;
    width: 100%;
	${props => props.isOtpField && "margin-top: 5px"};
`;

const MainFieldNew = styled.div<{ isOtpField?: boolean }>`
    display: inline;
    font-family: '${TypographyENUM.lkSansRegular}';
    font-style: normal;
    font-weight: 400;
    font-size: ${props => props.isOtpField ? "24px" : "24px"};
    line-height: 30px;
    letter-spacing: -0.02em;
    color: var(--dark-blue-100);
`;

const MainFieldCode = styled.div<{ isOtpField?: boolean }>`
    margin-right: 5px;
    display: inline;
    font-family: '${TypographyENUM.lkSansRegular}';
    font-style: normal;
    font-weight: 400;
    font-size: ${props => props.isOtpField ? "24px" : "24px"};
    line-height: 30px;
    letter-spacing: -0.02em;
    color: var(--dark-blue-100);
`;
interface EditFieldType {
	label: string,
	mainText: string,
	onEdit: () => void,
	disabled?: boolean,
    isMobileView?: boolean
    editEmailIcon?: boolean
    dataLocale?:DataType
    isCompact?: boolean
	isCheckout?:boolean
    newMainText?: boolean
    textVal?: string
    countryCode?: string
    isRTL?: boolean
	isOtpField?: boolean
}
const EditField = ({ label, mainText, onEdit, disabled, isMobileView=false, isOtpField, editEmailIcon=false, dataLocale, isCompact = false, isCheckout = false, newMainText=false, textVal = "", countryCode = "", isRTL = false }: EditFieldType) => {
	return (
		<FieldContainer isMobileView={isMobileView} isCompact={isCompact} isCheckout={isCheckout}>
			<TopLabel isOtpField={isOtpField} isMobileView={isMobileView}>{label}</TopLabel>
			<SecondRow isOtpField={isOtpField}>
				<OuterMainField>
					{!newMainText && <MainField longText={mainText.length > 32}>{mainText}</MainField>}
					{newMainText && <>{isRTL && <><MainFieldCode isOtpField={isOtpField}>{countryCode}</MainFieldCode><MainFieldNew isOtpField={isOtpField}>{textVal}</MainFieldNew></>}
						{!isRTL && <><MainFieldCode isOtpField={isOtpField}>{countryCode}</MainFieldCode><MainFieldNew isOtpField={isOtpField}>{textVal}</MainFieldNew></>}
					</>}
				</OuterMainField>
				<EditFiled>
					{/* {editEmailIcon && <EditEmailSignIn />} */}
					<EditBtn isOtpField={isOtpField} onClick={onEdit} disabled={disabled}>{editEmailIcon ? dataLocale?.EDIT_EMAIL : dataLocale?.EDIT}</EditBtn>
				</EditFiled>
			</SecondRow>
		</FieldContainer>
	);
};

export default EditField;
