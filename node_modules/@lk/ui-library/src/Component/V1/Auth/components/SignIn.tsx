import Cross from "../../../../Icons/Cross";
import React, { useEffect, useState } from "react";
import styled from "styled-components";
// import { animated, useSpring } from "react-spring";
import { TypographyENUM } from "../../../../Types/general";

const ScreenContainer = styled.div<{font: TypographyENUM, isMobilView?: boolean}>`
	font-family: ${props => props.font};
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 0px;
    width:  ${props => props.isMobilView ? "100%" : "472px"};
    background:  ${props => props.isMobilView ? "#f3fbef" : "var(--white)"};
    border-radius: 12px;
    overflow: hidden;
    overflow-y: ${props => props.isMobilView ? "scroll" : ""};
	input, div{
		animation:none;
		transform:none !important;
		transition:none;
	}
	#whatsapp-updates{
		div{
			transform: rotate(45deg) !important;
		}
	}
	#remove-button{
		height:56px;
		font-size:16px;
		border-radius: 50px;
		@media screen and (max-width:767px){
			height:50px;
		}
		@media screen and (min-width:768px) and (max-width:1439px){
			height:auto;
		    font-size:12px;
		}
		@media screen and (max-width: 1300px) and (max-height: 900px) and (orientation: landscape) {
			height:auto;
		    font-size:12px;
		}
	}
`;
const TopSection = styled.div<{ isMobilView?: boolean}>`
    width: 100%;
    height: ${ props => props.isMobilView ? "" : "216px"};
    position: relative;
	@media screen and (min-width:768px) and (max-width:1439px){
		margin-bottom:-18px;
	}
`;
const MainSection = styled.div<{isMobilView?: boolean, yPaddingRemove?: boolean}>`
    padding: ${props => props.isMobilView ? (props.yPaddingRemove ? "10px 16px" :"24px 16px") : "30px 48px 18px"};
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    width: 100%;
	@media screen and (min-width:768px) and (max-width:1439px){
		padding: ${props => props.isMobilView ? (props.yPaddingRemove ? "0px 16px" :"24px 16px") : "18px 48px 18px"};
	}
`;
const Image = styled.img<{isMobilView?: boolean}>`
    width: 100%;
    height: ${props => props.isMobilView ? "48vh" : "100%"};
    max-height: ${ props => props.isMobilView ? "48vh" : ""};
    display: block;
    max-height: ${props => props.isMobilView ? "48vh" : ""};
	display: ${props => props.isMobilView ? "none" : "block"};
`;
const CrossContainer = styled.div<{isMobilView?:boolean, isRTL?:boolean, showBanner?: boolean}>`
    background-color: var(--white);
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 8px;
    width: ${props => props.isMobilView ? "34px" : "40px"};
    height: ${props => props.isMobilView ? "34px" : "40px"};
    border-radius: 50%;
    position: absolute;
    top: ${props => props.showBanner ? "15px" : "26px"};
    right: ${props => props.isRTL ? "" : "15px"};
    cursor: pointer;

    left: ${props => props.isRTL ? "15px" : ""}
`;
export const Spacer = styled.div<{isMobileView?:boolean; horizontal?: boolean; isCompact?: boolean; isOtpField?: boolean}>`
    ${props => !props.horizontal ? `
        width: 100%;
        height: ${props.isMobileView ? "18px" : props.isOtpField ? "32px" : "20px" };
    ` : `
        height: 100%;
        width: 30px;
    `}

    ${props => props.isCompact ? "height: 12px" : ""};
`;
const ScreenSlider = styled.div<{isMobilView?:boolean}>`
    height: ${props => props.isMobilView ? "calc(100vh - 50px)" : "100%"};
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding:0;
    @media screen and (max-height: 915px) {
		gap: 20px;
	}
	@media screen and (max-height: 780px) {
		gap: 18px;
	}
	@media screen and (max-height: 668px) {
		gap: 14px;
	}
`;

const ForgotBanner = styled.div<{isRTL?: boolean}>`
	background-color: #27394e;
	height: 70px;
	padding: 15px;
	color: white;
	${props => props.isRTL ? "padding-left: 60px" : "padding-right: 60px"}
`;

const SignIn = ({ signInImgLink, onClose, id, font, showHome, children, isMobileView, isRTL=false, yPaddingRemove, showForgotBanner, setShowForgotBanner }: { signInImgLink: string, onClose: () => void, id: string, font: TypographyENUM, children: React.ReactNode, showHome: boolean, isMobileView?: boolean, isRTL?: boolean, yPaddingRemove?: boolean, showForgotBanner?: boolean, setShowForgotBanner?: (value: boolean) => void }) => {
	const [showBanner, setShowBanner] = useState(false);
	useEffect(() => {
		if(showForgotBanner) {
			setShowBanner(true);
			setTimeout(() => {
				setShowBanner(false);
				if(setShowForgotBanner) {
					setShowForgotBanner(false);
				}
			}, 3000);
		}
	}, [showForgotBanner]);
	// const springProps = useSpring({
	// 	from: { transform: "translateX(100%)" },
	// 	to: { transform: "translateX(0%)" }
	// });
	return (
		<>
			{showHome ? <ScreenContainer isMobilView={isMobileView} id={id} font={font}>
				<ScreenSlider isMobilView={isMobileView}>
					{signInImgLink ? <TopSection isMobilView={isMobileView}>
						<CrossContainer showBanner={showBanner} isRTL={isRTL} onClick={onClose} isMobilView={isMobileView}><Cross /></CrossContainer>
						{showBanner &&
							<ForgotBanner isRTL={isRTL}>You will receive an email with a link to reset your password</ForgotBanner>
						}
						<Image isMobilView={isMobileView} src={signInImgLink} alt="" />
					</TopSection> : <CrossContainer onClick={onClose} isMobilView={isMobileView} isRTL={isRTL}><Cross /></CrossContainer>}
					<MainSection isMobilView={isMobileView} yPaddingRemove={yPaddingRemove}>
						{children}
					</MainSection>
				</ScreenSlider>
			</ScreenContainer> : <> {children} </>
			}

		</>
	);
};

export default SignIn;
