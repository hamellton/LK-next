import React, { MouseEvent } from "react";
import styled from "styled-components";
import { useSpring, animated } from "react-spring";

const ScreenContainer = styled.div`
    background-color: rgba(0, 0, 0, 0.5);
    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
    display: flex;
    align-items: center;
    justify-content: center;
    position: fixed;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    z-index: 1000;
`;
const MainSection = styled.div`
    position: absolute;
    top: 50%;
    right: 50%;
    transform: translate(50%,-50%);
    background: var(--white);
    border-radius: var(--border-radius-xs);
`;

const AnimatedMainSection = animated(MainSection);
const AnimatedScreenContainer = animated(ScreenContainer);
interface AuthModalType {
    children: React.ReactNode;
    onBackdropClick?: () => void;
		isSignUp?: boolean;
}
const AuthModal = ({ children, onBackdropClick, isSignUp=false }: AuthModalType) => {
	const springProps = useSpring({
		from: {
			transform: isSignUp ? "translate(50%, -50%)" : "translate(50%,-100%)",
			bgOpacity: 0,
			modalOpacity: 0.4
		},
		to: {
			transform: isSignUp ? "translate(50%, -50%)" : "translate(50%,-50%)",
			bgOpacity: 1,
			modalOpacity: 1
		},
	});
	return (
		<AnimatedScreenContainer
			style={{ opacity: springProps.bgOpacity }}
			onClick={() => onBackdropClick && onBackdropClick()}
		>
			<AnimatedMainSection
				onClick={
					(ev: MouseEvent<HTMLDivElement>) => {
						ev.stopPropagation();
					}
				} style={{
					transform: springProps.transform,
					opacity: springProps.modalOpacity
				}}>
				{children}
			</AnimatedMainSection>
		</AnimatedScreenContainer>
	);
};

export { AuthModal };
