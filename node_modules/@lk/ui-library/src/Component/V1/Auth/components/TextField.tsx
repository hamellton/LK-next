import React, { useState } from "react";
import { Eye } from "../../../../Icons";
import styled, { css, keyframes } from "styled-components";
import { TextTypeENUM } from "./Auth.types";
import { TypographyENUM } from "../../../../Types/general";
import { BreakNew } from "../../PrescriptionModal/EnterPowerManually/EnterPowerManually.styles";

const animateRightLogin = keyframes`
  0% {
      transform: translate3d(30%,0,0);
  }
  100%{
    transform: translate3d(0,0,0);
    }
`;

export const FieldInput = styled.input<{font?: TypographyENUM, isRTL?: boolean }>`
    width: 100%;
    height: 100%;
    border: none;
    outline: none;
    ${props => props.isRTL ? "padding-left: 20px;" : "padding-right: 20px;" };
    font-family: ${props => props.font ? props.font : `${TypographyENUM.lkSansRegular}`};
    // background: transparent;
    background: #FFFFFF;
    animation: ${animateRightLogin} 0.5s;
    font-size: 16px;
    &::-webkit-input-placeholder,
    &::placeholder {
        font-weight: 200;
        color: #7c7c7c;
    }
    user-select: initial;
    &::before, &::after {
        user-select: initial;
    }

    ${props => props.isRTL ? "direction: rtl;" : ""};
`;
const animateleftLogin = keyframes`
  from{
      transform: translate3d(-30%,0,0);
  }
  to{
    transform: translate3d(0,0,0);
    }
`;

export const LeftPositioned = styled.div<{isVisible: boolean; isCheckout?:boolean}>`
    left: 0;
    width: ${props => props.isVisible ? "fit-content" : "0px"};
    transition: width 500ms ease-in-out;
    animation: ${animateleftLogin} 0.5s;
    position: relative;
    ${props => !props.isCheckout && css`
	@media screen and (min-width:768px) and (max-width:1439px){
	   font-size: 1vw;
       line-height: 1.9vw;
	};
	@media screen and (max-width: 1300px) and (max-height: 900px) and (orientation: landscape) {
		font-size: 14px;
        line-height: 24px;
    }`}
`;

export const CrossSection = styled.div<{ isRTL?: boolean }>`
    position: absolute;
    ${props => props.isRTL ? "left: 10px;" : "right: 10px;" };
    cursor: pointer;
    height: 13px;
    width: 18px;
    font-size: 18px;
    display: flex;
    align-items: center;
    justify-content: center;
    top: 40%;
	@media screen and (min-width:768px) and (max-width:1439px){
	  top: 29%;
	}
`;

const StrikeIcon = styled.span`
    display: block;
    width: 25px;
    height: 1px;
    background-color: var(--black);
    transform: rotate(-60deg);
    position: absolute;
`;

interface TextFieldType {
    value: string | null,
    type?: string,
    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void,
    placeholder?: string,
    children?: React.ReactNode,
    clearText?: () => void,
    showText?: () => void,
    onKeyUpChange?: (e: any) => void,
    onBlur?: (e: React.ChangeEvent<HTMLInputElement>) => void,
    maxLength?: number,
    name?: string,
    onKeyPress?: (e: any) => void,
    isRTL?: boolean,
    font?: TypographyENUM,
    autoFoc?: boolean
    isCheckout?: boolean
}

const TextField = ({ value, font = TypographyENUM.lkSansRegular, type = "text", onChange, placeholder = "", children, onKeyUpChange, onBlur, maxLength, name, onKeyPress, isRTL, autoFoc, isCheckout }: TextFieldType) => {

	// useEffect(()=>{
	//  api.start({ transform: value ? "translate3d(0, 0, 0)" : "translate3d(-3%, 0, 0)" });
	// },[value]);

	// const [springProps, api] = useSpring(()=>({
	//  transform: "translate3d(0, 0, 0)",
	//  config: { duration: 500 }
	// }));

	const [showText, setShowText] = useState(type !== TextTypeENUM.password);
	function showTextHandler() {
		setShowText(showText => !showText);
	}
	return (
		<>
			<LeftPositioned isVisible={Boolean(children)} isCheckout={isCheckout}>{children}{isRTL && children && <BreakNew> | </BreakNew>}</LeftPositioned>
			<FieldInput
				isRTL={isRTL}
				value={value ? value : ""}
				onChange={onChange}
				placeholder={placeholder}
				type={showText && type === TextTypeENUM.password ? TextTypeENUM.text : type}
				onKeyUp={onKeyUpChange}
				onBlur={onBlur}
				maxLength={maxLength}
				name={name}
				onKeyPress={onKeyPress}
				font={font} autoFocus={autoFoc}/>
			{value && type === TextTypeENUM.password && <CrossSection isRTL={isRTL} onClick={showTextHandler}>{showText ? <><StrikeIcon/><Eye/></> : <Eye/>}</CrossSection>}
		</>
	);
};

export { TextField };
