import React, { useEffect } from "react";
import { animated, useSpring } from "react-spring";
import styled, { css } from "styled-components";
import { TypographyENUM } from "../../../../Types/general";

const FieldContainer = styled.div<{ isCheckout?: boolean, fullWidth?: boolean, line?: number, isBoundary?: boolean, isMobileView?: boolean, otpField?: boolean, forceLTR?: boolean, isCompact?: boolean, gapZero?: boolean}>`
	${props => props.forceLTR ? "direction: ltr" : ""};
	display: flex;
	flex-direction: row;
	align-items: center;
	padding: ${props => props.isCompact ? "0 16px" : "16px"};
	gap: ${props => props.gapZero ? "0" : "8px"};
	width: ${props => props.fullWidth ? "100%" : "431px"};
	background: ${props => props.otpField ? "" : "#FFFFFF"};
	${props => props.isBoundary ? `
		height: ${props.line ? `${props.line * 56}px` : "56px"};
		border: 1px solid #E2E2EE;
		box-shadow: 0px 1px 2px rgba(16, 24, 40, 0.05);
		border-radius: 12px;
	` : ""}
	flex: none;
	align-self: stretch;
	flex-grow: 0;
	position: relative;
	background: ${props => props.isMobileView ? "var(--white)" : ""};
	${props => !props.isCheckout && css`
	@media screen and (min-width:768px) and (max-width:1439px){
		height: 3vw;
        padding: 0.4vw 0.6vw;
		input{
			font-size:1vw;
		}
	}
	@media screen and (max-width: 1300px) and (max-height: 900px) and (orientation: landscape) {
		height: 36px;
        padding: 5px 6px;
		border-radius: 10px;
		input{
			font-size:12px;
		}
    }`}
`;

const Box = styled(animated.div)<{ font: TypographyENUM }>`
    font-family: ${props => props.font};
	display: flex;
	flex-direction: column;
	align-items: flex-start;
	width: 100%;
	font-size:16px;
	`;

const Label = styled.label`
	font-style: normal;
	font-weight: 400;
	font-size: 16px;
	line-height: 24px;
	letter-spacing: -0.02em;
	color: var(--text);
	margin-bottom: 8px;
`;

const SubText = styled(animated.div)<{ isCheckout?: boolean, isError?: boolean, isMobileView?: boolean, isCompact?: boolean, isForgotPassword?: boolean, subText?:string}>`
	font-style: normal;
	font-weight: 400;
	font-size: 12px;
	line-height: 12px;
	letter-spacing: -0.02em;
	color: ${props => props.isError ? "var(--error)" : (props.isForgotPassword ? "var(--vivid-green-100)" : "var(--dark-blue-75)")};
	margin: ${props => props.isMobileView ? "8px 0px" : "0px auto 6px"};
	padding: 10px 4px 4px 4px;
    width: 100%;
	${props => props.isCheckout && css`
	 margin-bottom:0px;
  }`}

	@media screen and (max-width:767px){
	  margin: ${props => props.isCheckout ? "0px auto 6px" : "0px auto 6px"};
	  margin: ${props => props.isError ? "0px auto 16px" : "0px auto 6px"};
	  line-height:16px;
	}
	${props => !props.isCheckout && css`
	@media screen and (min-width:768px) and (max-width:1439px){
		margin: ${props.isMobileView ? "8px 0px" : "6px auto"};
		font-size: 10px;
		padding-top:0px;
	}
	@media screen and (max-width: 1300px) and (max-height: 900px) and (orientation: landscape) {
		margin: ${props.isMobileView ? "8px 0px" : "6px auto"};
		font-size: 10px;
		padding-top:0px;
    }`}

	${props => props.isCompact ? "margin: 10px auto;" : ""};

	${props => props.isMobileView ? "padding-bottom: 2px" : ""};
	// ${({ subText }) => !subText ? "padding: 13px" : ""}
`;

interface AddressInputFieldType {
	font?: TypographyENUM,
	children?: React.ReactNode,
	label?: string,
	subText?: string,
	isError?: boolean,
	isFullWidth?: boolean,
	line?: number,
	isBoundary?: boolean
	isMobileView?: boolean
	otpField?:boolean
	forceLTR?: boolean
	isCompact?: boolean
	isForgotPassword?: boolean
	gapZero?: boolean
	isCheckout?: boolean
}


const InputFieldContainer = ({ isCheckout, isMobileView, font = TypographyENUM.lkSansRegular, children, label = "", subText = "", isError = false, isFullWidth = false, line = 1, isBoundary = true ,otpField=false, forceLTR, isCompact = false, isForgotPassword, gapZero=false }: AddressInputFieldType) => {
	const springProps = useSpring({
		from: { transform: "translate3d(-30%, 0, 0)" },
		to: { transform: "translate3d(0, 0, 0)" },
		// config: { duration: 1000 }
	});

	useEffect(()=>{
		api.start({ opacity: isError ? 1 : (isForgotPassword ? 1 : 0) });
	},[isError]);

	const [springPropsSubText, api] = useSpring(() => ({
		opacity: isForgotPassword ? 1 : 0,
		config: { duration: 1000 },
	}));

	return (
		<Box font={font} style={springProps}>
			{label && <Label>{label}</Label>}
			<FieldContainer isCheckout={isCheckout} gapZero={gapZero} isCompact={isCompact} otpField={otpField} isMobileView={isMobileView} fullWidth={isFullWidth} line={line} isBoundary={isBoundary} forceLTR={forceLTR}>
				{children || null}
			</FieldContainer>
			<SubText subText={subText} isCheckout={isCheckout} isCompact={isCompact} style={springPropsSubText} isError={isError} isMobileView={isMobileView} isForgotPassword={isForgotPassword}>{subText}</SubText>
		</Box>
	);
};

export { InputFieldContainer };
