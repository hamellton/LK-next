import React, { useState } from "react";
import { ThemeENUM, TypographyENUM } from "../../../../Types/general";
import Button from "../../Button";
import { kindENUM } from "../../Button/Button.types";
import { DataType } from "../../Header/Header.types";
import { InputFieldContainer } from "../components/InputFieldContainer";
import SignInHead from "../components/SignInHead";
import { TextField } from "../components/TextField";
import { ErrorMessage, InfoMessage, LoggedInPresalesContainer /*, SuccessMessage */ } from "./styles";
import Spinner from "../../../Common/Spinner";

interface PresalesLoginType {
    dualLoginFunction: (username: string, password: string) => void;
    errorStatus: boolean;
    errorMessageStatus: string;
    isLoggedIn: boolean;
    dataLocale?: DataType;
	handlePresalesLogOut?: () => void;
	userName?: string;
	isLoading?: boolean;
	handlePresalesContinue?: () => void;
}

const PresalesLogin = ({ dualLoginFunction, errorStatus, errorMessageStatus, isLoggedIn, handlePresalesLogOut, userName, isLoading, handlePresalesContinue, dataLocale={
	LOGIN: "LOGIN",
	PRESALES_CHECKOUT: "Login - PreSales Checkout",
	THIS_IS_REQUIRED: "This is required",
	LOGGED_IN_MESSAGE: "Logged In. Redirecting to checkout page"
} }: PresalesLoginType) => {
	const isRTL = false;
	const [passwordField, setPasswordField] = useState<string | null>(null);
	const [loginId, setLoginId] = useState<string | null>(null);
	const [errorMessage, setErrorMessage] = useState<any>({
		login: null,
		password: null
	});

	const updatePasswordValue = (e: string) => {
		if(e === ""){
			setErrorMessage({ ...errorMessage, password: dataLocale.THIS_IS_REQUIRED });
		}
		else{
			setErrorMessage({ ...errorMessage, password: "" });
		}
		setPasswordField(e);
	};

	const updateLoginValue = (e: string) => {
		if(e === ""){
			setErrorMessage({ ...errorMessage, login: dataLocale.THIS_IS_REQUIRED });
		}
		else{
			setErrorMessage({ ...errorMessage, login: "" });
		}
		setLoginId(e);
	};

	if(isLoading) {
		return (
			<Spinner show={isLoading} fullPage={true} />
		);
	}

	if(isLoggedIn){
		return (
			<LoggedInPresalesContainer>
				<InfoMessage>Logged in as <strong>{userName}</strong></InfoMessage>
				<Button
					id="remove-button"
					theme={ThemeENUM.primary}
					kind={kindENUM.background}
					showChildren={true}
					font={TypographyENUM.lkSansBold}
					width="75"
					disabled={false}
					onClick={handlePresalesContinue}
				>
					Continue
				</Button>
				<Button
					id="remove-button"
					theme={ThemeENUM.secondary}
					kind={kindENUM.background}
					showChildren={true}
					font={TypographyENUM.lkSansBold}
					width="75"
					disabled={false}
					onClick={handlePresalesLogOut}
				>
					Logout
				</Button>
			</LoggedInPresalesContainer>
		);
	}

	return (
		<div>
			<SignInHead signInText={dataLocale.PRESALES_CHECKOUT} isRTL={isRTL} />
			{/* {isLoggedIn && !errorStatus && <SuccessMessage>{dataLocale.LOGGED_IN_MESSAGE}</SuccessMessage> } */}
			{errorStatus && !isLoggedIn && <ErrorMessage>{errorMessageStatus}</ErrorMessage>}
			<InputFieldContainer isFullWidth={true} isError={Boolean(errorMessage.login)} subText={errorMessage.login ? errorMessage.login : ""}>
				<TextField isRTL={isRTL} value={loginId} type="text" onChange={(e) => updateLoginValue(e.target.value)} placeholder="Please enter Username" onKeyUpChange={() => null}></TextField>
			</InputFieldContainer>
			<InputFieldContainer isFullWidth={true} isError={Boolean(errorMessage.password)} subText={errorMessage.password ? errorMessage.password : ""}>
				<TextField isRTL={isRTL} value={passwordField} type="password" onChange={(e) => updatePasswordValue(e.target.value)} placeholder="Please enter Password" onKeyUpChange={() => null}></TextField>
			</InputFieldContainer>
			<Button
				id="remove-button"
				theme={ThemeENUM.primary}
				kind={kindENUM.background}
				showChildren={true}
				font={TypographyENUM.lkSansBold}
				width="100"
				disabled={Boolean(errorMessage.login === null || errorMessage.password === null || errorMessage.login || errorMessage.password)}
				onClick={() => dualLoginFunction(String(loginId), String(passwordField))}
			>
				{dataLocale.LOGIN}
			</Button>
		</div>
	);
};

export { PresalesLogin };
