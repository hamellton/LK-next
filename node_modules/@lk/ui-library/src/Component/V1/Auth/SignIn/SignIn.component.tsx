import React, { useEffect, useState, useRef, useCallback } from "react";
import EditField, { EditBtn } from "../components/EditField";
import { InputFieldContainer } from "../components/InputFieldContainer";
import SignIn, { Spacer } from "../components/SignIn";
import SignInHead from "../components/SignInHead";
import { TextField } from "../components/TextField";
import Button from "../../Button";
import OtpField from "../components/OtpField";
import { ButtonWrapper, Captcha, FlexCenter, InfoText, InlineLoader, PhoneCodeDropdownWrapper, Verify, WhatsAppText } from "./styles";
import { SignInType, kindENUM, ThemeENUM, TypographyENUM, TextTypeENUM, ComponentSizeENUM, DeviceTypes } from "../../../../Types/general";
import { SignInFormType } from "./SignIn.types";
import { SelectField } from "../components/SelectField";
import { /* getNumberLengthFromCode, */ getNumberLengthFromCode, validateEmail, validateNumber } from "../../../../helpers";
import ForgotPassword from "./ForgotPassword";
import usePrevious from "./usePrevious";
import SampleDiv from "./SampleDiv";
import PhoneCodeDropdown from "../../PhonecodeDropdown";

const SignInComponent = ({
	id,
	dataLocale,
	font,
	onProceed,
	signInStatus,
	onClose,
	moveToSignUp,
	setGetWhatsAppUpdate,
	countryCode,
	signInImgLink,
	loaderImageLink,
	isCaptchaRequired,
	isCaptchaVerified,
	resetCaptcha,
	renderCaptcha,
	scriptLoaded,
	// notShowOtp,
	isRTL = false,
	deviceType,
	// CaptchaIsError

	resetSignInStatus,
	guestCheckout,
	recaptchaInDom,
	setRecaptchaInDom,
	forgotPassCallback,
	redirectToHome,
	otpSent,
	OtpTime=30,
	setCaptcha,
	resetCaptchaVerified,
	resetServerError,
	isHome=false,
	msiteForgotPassword = false,
	showWhatsAppOption = false,
	isCompact = false,
	isCheckout = false,
	phoneCodeConfigData,
	supportMultipleCountries,
	incCountryCodeFont,
	whatsAppChecked
	// isRTL = false
}: SignInFormType) => {
	const [inputValue, setInputValue] = useState<string | number>("");
	const [showOTP, setShowOTP] = useState(false);
	const [showPassword, setShowPassword] = useState(false);
	const [passwordField, setPasswordField] = useState<string | null>(null);
	const [submit, setSubmit] = useState(false);
	const [error, setError] = useState("");
	const [timer, setTimer] = useState(OtpTime);
	const [showForgotBanner, setShowForgotBanner] = useState(false);
	const [isCaptchaMounted, setisCaptchaMounted] = useState(false);
	const timerRef = useRef<ReturnType<typeof setInterval>>();
	const isMobileView = deviceType === DeviceTypes.MOBILE;

	const [showForgotPassword, setShowForgotPassword] = useState(false);
	const [inputFocusedOut, setInputFocused] = useState(false);
	const prevOTPSent = usePrevious(otpSent);
	const prevRecaptchaInDom = usePrevious(recaptchaInDom);
	const [fieldType, setFieldType] = React.useState<SignInType>(SignInType.EMAIL);
	const [ showOtpSentMsg, setShowOtpSentMsg]= useState(false);
	const [currentPhoneCode, setCurrentPhoneCode] = useState(countryCode);


	useEffect(() => {
		if(resetSignInStatus) {
			resetSignInStatus();
			setShowPassword(false);
			setPasswordField(null);
			setSubmit(false);
			setError("");
			setTimer(OtpTime);
			setShowOTP(false);
			setInputValue("");
		}
		if (isCaptchaRequired && recaptchaInDom) {
			renderCaptcha();
		}
		return () => {
			if(typeof setRecaptchaInDom === "function") setRecaptchaInDom(false);
		};
	}, []);

	useEffect(() => {
		if (
			isCaptchaRequired
			&& (scriptLoaded && showOTP) && recaptchaInDom && !isCaptchaVerified
			&& !isCaptchaMounted
		) {
			setisCaptchaMounted(true);
			renderCaptcha();
		} else if (
			isCaptchaRequired &&
			isCaptchaVerified &&
			recaptchaInDom &&
			scriptLoaded
			&& prevOTPSent !== otpSent
		) {
			resetCaptcha();
		} else if (
			recaptchaInDom &&
			!isCaptchaRequired &&
			scriptLoaded &&
			typeof setCaptcha === "function"
		) {
			setCaptcha(null);
		}
	}, [isCaptchaRequired, scriptLoaded, recaptchaInDom, setCaptcha, isCaptchaVerified]);

	useEffect(() => {
		if(isCaptchaRequired && (scriptLoaded && showOTP) && isCaptchaVerified && recaptchaInDom && !prevRecaptchaInDom && otpSent === prevOTPSent && typeof resetCaptchaVerified === "function") {
			resetCaptchaVerified();
		}
	}, [isCaptchaRequired, isCaptchaVerified, recaptchaInDom, otpSent, resetCaptchaVerified]);

	useEffect(() => {
		if (signInStatus?.showOTP) setShowOTP(signInStatus.showOTP);
		if (signInStatus?.showPassword) setShowPassword(signInStatus.showPassword);
	}, [signInStatus, signInStatus?.showOTP, signInStatus?.showPassword]);

	// useEffect(() => {
	// 	if (isCaptchaRequired && (scriptLoaded || showOTP)) {
	// 		setisCaptchaMounted(true);
	// 		renderCaptcha();
	// 	}
	// }, [isCaptchaRequired, scriptLoaded, showOTP]);

	// useEffect(() => {
	// 	if(isCaptchaMounted && !isCaptchaRequired){
	// 		resetCaptcha();
	// 		setisCaptchaMounted(false);
	// 	}
	// }, [isCaptchaMounted, isCaptchaRequired]);

	// const updateValue = (type: string, value: string) => {
	// 	setInputValue(value);
	// };

	const updatePasswordValue = (val: string | number) => {
		setPasswordField(typeof val === "string" ? val : val.toString());
		setSubmit(true);
	};

	const clickHandler = () => {
		if(resetSignInStatus) resetSignInStatus();
		if (submit && passwordField) {
			onProceed(fieldType, typeof inputValue === "string" ? inputValue : inputValue.toString(), passwordField, supportMultipleCountries ? currentPhoneCode : undefined);
		} else {
			onProceed(fieldType, typeof inputValue === "string" ? inputValue : inputValue.toString(), undefined, supportMultipleCountries ? currentPhoneCode : undefined);
		}
	};

	const autoSubmitOTP = useCallback(() => {
		if (submit && passwordField && !isCaptchaVerified) {
			if (isCaptchaRequired && !isCaptchaVerified) return;
			if(resetSignInStatus) resetSignInStatus();
			setError("");
			onProceed(fieldType, typeof inputValue === "string" ? inputValue : inputValue.toString(), passwordField);
			setSubmit(false);
			setPasswordField(null);
			// setShowOTP(false);
			setShowPassword(false);
		}
	}
	,[onProceed, fieldType, inputValue, passwordField, setSubmit, setPasswordField, setShowOTP, setShowPassword, submit, isCaptchaRequired, isCaptchaVerified]);

	function resendOTP() {
		setPasswordField(null);
		setShowOtpSentMsg(true);
		onProceed(SignInType.PHONE, typeof inputValue === "string" ? inputValue : inputValue.toString(), undefined, supportMultipleCountries ? currentPhoneCode : undefined);
	}
	// const getUpdateOnWhatsapp = (event: React.ChangeEvent<HTMLInputElement>) => {
	// 	action("get update on whatsapp")(event, { getUpdateOnWhatsapp:event.target.checked });
	// };

	// const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {
	// 	console.log("working");
	// 	event.preventDefault();
	// };

	// function validateNumber(num: string | number, countryCode: string) {
	// 	if (!num || num.toString().split("").length < getNumberLengthFromCode(countryCode)) return dataLocale.PLEASE_ENTER_A_VALID_EMAIL_OR_MOBILE_NUMBER;
	// 	return "";
	// }
	// function validateEmail(email: string | number) {
	// 	if (!email || !String(email)
	// 		.toLowerCase()
	// 		.match(
	// 			/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
	// 		)
	// 	) {
	// 		return dataLocale.PLEASE_ENTER_A_VALID_EMAIL_OR_MOBILE_NUMBER;
	// 	}
	// 	return "";
	// }
	function validateErrors(e: any, cb: (...props: any) => void) {
		let error = "";
		if (!showOTP && !showPassword) {
			if (fieldType === SignInType.PHONE) {
				error = validateNumber(inputValue, countryCode, undefined, dataLocale, true);
			} else if (fieldType === SignInType.EMAIL) {
				error = validateEmail(inputValue,dataLocale, true);
			}
		} else if (!showOTP && showPassword) {
			if (!passwordField) error = "Please Enter a value";
		} else if (showOTP) {
			if (!passwordField || passwordField.toString().split("").length !== 4) error = dataLocale.PLEASE_ENTER_A_CORRECT_OTP;
		}
		setError(error);
		if (!error) cb(e);
	}
	const onKeyUpHandler = (e: any) => {
		// console.log(e.target.value, isNaN(Number(e.target.value)));
		if (e.target.value.length === 0 || isNaN(Number(e.target.value)) || e.target.value.length > getNumberLengthFromCode(countryCode)) {
			setFieldType(SignInType.EMAIL);
			if(e.target.value === "" || validateEmail(e.target.value,dataLocale, true) || (!isCaptchaVerified && isCaptchaRequired)) return;
			// if()
		}
		else {
			setFieldType(SignInType.PHONE);
			if(e.target.value === "" || validateNumber(e.target.value, countryCode, undefined , dataLocale, true) || (!isCaptchaVerified && isCaptchaRequired)) return;
		}
		e.preventDefault();

		if (e.keyCode === 13) {
			validateErrors(e, clickHandler);
		}
	};

	const handleBackClick = () => {
		// if(isCaptchaRequired){
		// 	resetCaptcha();
		// }
		// notShowOtp();
		if(typeof resetSignInStatus === "function") resetSignInStatus();
		setShowOTP(false);
		setShowPassword(false);
	};

	const startTimer = () => {
		setTimer(OtpTime);
		clearInterval(timerRef.current); //added so that there will be no previous interval before starting a new interval
		timerRef.current = setInterval(() => {
			setTimer((time: number) => {
				if (time === 0) {
					clearInterval(timerRef.current);
					return 0;
				}
				else return time - 1;
			});
		}, 1000);
	};
	useEffect(() => {
		if (showOTP) startTimer();
	}, [showOTP]);

	useEffect(() => {
		if(!showOTP && !showPassword){
			if(isCaptchaVerified && typeof resetCaptchaVerified === "function") {
				// resetCaptchaVerified();
			}
			setPasswordField(null);
		}
	}, [showOTP, showPassword]);

	function changeInputValue(e: any) {
		setInputValue(e.target.value);
		if (!showOTP && !showPassword && inputFocusedOut) {
			let error = "";
			if (fieldType === SignInType.PHONE) {
				error = validateNumber(e.target.value, countryCode, undefined , dataLocale, true);
			} else if (fieldType === SignInType.EMAIL) {
				error = validateEmail(e.target.value,dataLocale, true);
			}
			setError(error);
		}
	}
	useEffect(() => {
		setInputFocused(false);
		if(typeof resetServerError === "function") resetServerError();
	}, [showOTP, showPassword, fieldType]);

	useEffect(() => {
		if(inputValue){
			validateErrors("", () => null);
		}
	}, [fieldType, inputValue]);


	const validateOtp = (otp: string) => {
		const numCheck = (/^[0-9]+$/);
		if(otp && otp.length === 4 && numCheck.test(otp)) {
			return "";
		} else {
			return "Incorrect otp";
		}
	};
	const handleKeyUpOnInput = (e: any) => {
		if(showPassword && !showOTP) {
			if(e.target.value === "" || (!isCaptchaVerified && isCaptchaRequired)) return;
		} else if(showOTP) {
			if(e.target.value === "" || validateOtp(e.target.value) || (!isCaptchaVerified && isCaptchaRequired)) return;
		}
		e.preventDefault();

		if (e.keyCode === 13) {
			validateErrors(e, clickHandler);
		}
	};
	function mobileForgotHandler() {
		setInputValue("");
		setShowForgotPassword(false);
		setShowPassword(false);
		setShowForgotBanner(true);
	}

	return showForgotPassword ? <ForgotPassword onMobileForgotPassword={mobileForgotHandler} isMobileView={ isMobileView } signInImgLink={signInImgLink} msiteForgotPassword={msiteForgotPassword} isHome={isHome} onClose={onClose} isSignin dataLocale={dataLocale} apiCallback={forgotPassCallback} redirectToHome={redirectToHome} validateEmail={validateEmail} hideHandler={() => setShowForgotPassword(false)} isRTL={isRTL} /> : (
		<SignIn showForgotBanner={showForgotBanner} setShowForgotBanner={setShowForgotBanner} isRTL={isRTL} isMobileView={ isMobileView } onClose={() => { setError(""); onClose(); }} signInImgLink={signInImgLink} id={id} font={font} showHome={true} yPaddingRemove={true}>
			{showOTP && <>
				<SignInHead isCompact={isCompact} arrowAction={handleBackClick} signInText={dataLocale.SIGN_IN} isRTL={isRTL} />
				<EditField isCompact={isCompact} isCheckout={isCheckout} onEdit={handleBackClick} label={dataLocale.ENTER_ONE_TIME_PASSWORD_SENT_TO} newMainText={true} textVal = {`${typeof inputValue === "string" ? inputValue : inputValue.toString()}`} countryCode = {countryCode} isRTL={isRTL} mainText={isRTL ? `${typeof inputValue === "string" ? inputValue : inputValue.toString()} ${countryCode}` : `${countryCode} ${typeof inputValue === "string" ? inputValue : inputValue.toString()}`} disabled={signInStatus.isLoading} dataLocale={dataLocale} />
				{signInStatus.isLoading ? <InlineLoader alt="Loading..." src={loaderImageLink} /> : <>
					<InputFieldContainer isCompact={isCompact} otpField={isMobileView} isFullWidth={true} isError={Boolean(error)|| Boolean(signInStatus.isError)} subText={signInStatus.errorMessage || error} isBoundary={false}>
						<OtpField isMobileView={ isMobileView } value={passwordField} onChange={val => updatePasswordValue(val)} type={TextTypeENUM.number} showText={true} autoSubmitOTP={autoSubmitOTP} onKeyUpChange={handleKeyUpOnInput} />
					</InputFieldContainer>

					<div>{timer === 0 ? <><EditBtn disabled={timer !== 0 || (!isCaptchaVerified && isCaptchaRequired)} onClick={() => { startTimer(); resendOTP(); }}>{dataLocale.RESEND_OTP} </EditBtn> {(!isHome && guestCheckout) && !timer && <EditBtn onClick={() => guestCheckout?.({ email: "", number: inputValue.toString() })}>{dataLocale.SKIP}</EditBtn>}</> : <span><b>{dataLocale.RESEND_OTP_IN} {`00:${timer.toString().length > 1 ? timer : `0${timer}`}`} {dataLocale.SEC} {(deviceType === DeviceTypes.MOBILE && !isHome && guestCheckout && !timer) && <EditBtn onClick={() => guestCheckout?.({ email: "", number: inputValue.toString() })}>{dataLocale.SKIP}</EditBtn>}</b>  {showOtpSentMsg && <><br/> {dataLocale.OTP_HAS_BEEN_SENT_SUCCESSFULLY} </>} </span>}</div>
					<Spacer isCompact={isCompact}/>

					{/* <NewOTP>{dataLocale?.A_NEW_OTP_SENT}</NewOTP> */}
					{(isCaptchaRequired) &&
					<Captcha isCompact={isCompact} isRTL={isRTL}>
						<div id="recaptcha"></div>
						<SampleDiv setRecaptchaInDom={setRecaptchaInDom} setisCaptchaMounted={setisCaptchaMounted}/>
					</Captcha>}
					{(isCaptchaRequired) && <Verify onClick={()=>{
						onProceed(fieldType, typeof inputValue === "string" ? inputValue : inputValue.toString(), undefined, supportMultipleCountries ? currentPhoneCode : undefined);
						resetCaptcha();
					}}>Verify</Verify>}
					{showWhatsAppOption && (isCaptchaVerified || !isCaptchaRequired) && <SelectField isPreChecked={whatsAppChecked} setGetsAppUpdate={setGetWhatsAppUpdate}><FlexCenter><WhatsAppText>{dataLocale.GET_UPDATES_ON_WHATSAPP_NEW || "Get updates on Whatsapp"} </WhatsAppText><img width={25} src="https://static.lenskart.com/media/desktop/img/25-July-19/whatsapp.png" alt="Whatsapp"/></FlexCenter></SelectField>}

					<Button
						id="remove-button"
						theme={ThemeENUM.primary}
						kind={kindENUM.background}
						showChildren={true}
						font={TypographyENUM.lkSansBold} //onDecreaseItem(item.id)
						width="100"
						disabled={isCaptchaMounted || !passwordField || isNaN(parseInt(passwordField))}
						onClick={(e: any) => validateErrors(e, clickHandler)}
					>
						{dataLocale.SIGN_IN}
					</Button>
					<Spacer isCompact={isCompact}/>
					{!isMobileView && <InfoText>{dataLocale.NEW_MEMBER_NEW} <EditBtn onClick={moveToSignUp}>{dataLocale.CREATE_ACCOUNT}</EditBtn></InfoText>}
					{isMobileView && <ButtonWrapper><Button
						id="create-account-button"
						theme={ThemeENUM.signInPrimary}
						// kind={kindENUM.background}
						showChildren={true}
						componentSize={ComponentSizeENUM.small}
						font={TypographyENUM.lkSansBold} //onDecreaseItem(item.id)
						width="100"
						onClick={moveToSignUp}
						style={{ background: "#F3FBEF", border: "1.5px solid #737397" }}
					>
						{dataLocale.CREATE_ACCOUNT}
					</Button>
					</ButtonWrapper>
					}
				</>}
			</>}
			{!showOTP && showPassword && <>
				<SignInHead arrowAction={handleBackClick} signInText={dataLocale?.SIGN_IN} isRTL={isRTL} />
				{/* <SignInHead arrowAction={handleBackClick} signInText={dataLocale.SIGN_IN} /> */}
				<EditField editEmailIcon={false} dataLocale={dataLocale} onEdit={handleBackClick} label={dataLocale?.ENTER_PASSWORD_FOR} mainText={typeof inputValue === "string" ? inputValue : inputValue.toString()} disabled={signInStatus.isLoading}/>
				{signInStatus.isLoading ? <InlineLoader alt="Loading..." src={loaderImageLink} /> : <>
					<InputFieldContainer isMobileView={ isMobileView } isFullWidth={true} isError={Boolean(error || (signInStatus.isError && signInStatus.errorMessage))} subText={error || (signInStatus.isError && signInStatus.errorMessage ? signInStatus.errorMessage : "")}>
						<TextField autoFoc={true} isRTL={isRTL} value={passwordField} type="password" onChange={(e) => updatePasswordValue(e.target.value)} placeholder={dataLocale?.ENTER_PASSWORD} onKeyUpChange={handleKeyUpOnInput}></TextField>
					</InputFieldContainer>
					<div><EditBtn onClick={() => setShowForgotPassword(true)}>{dataLocale.FORGOT_PASSWORD}</EditBtn></div>
					<Spacer />
					{showWhatsAppOption && <SelectField isPreChecked={whatsAppChecked} setGetsAppUpdate={setGetWhatsAppUpdate}><FlexCenter><WhatsAppText>{dataLocale.GET_UPDATES_ON_WHATSAPP_NEW || "Get updates on Whatsapp"} </WhatsAppText><img width={25} src="https://static.lenskart.com/media/desktop/img/25-July-19/whatsapp.png" alt="Whatsapp"/></FlexCenter></SelectField>}
					{signInStatus.isLoading ? <InlineLoader alt="Loading..." src={loaderImageLink} /> : <Button
						id="remove-button"
						theme={ThemeENUM.primary}
						kind={kindENUM.background}
						showChildren={true}
						font={TypographyENUM.lkSansBold}
						width="100"
						onClick={(e: any) => validateErrors(e, clickHandler)}
						disabled={(isCaptchaMounted && !isCaptchaVerified) || !passwordField}
					>
						{dataLocale.SIGN_IN}
					</Button>}<Spacer />
					{!isMobileView && <InfoText>{dataLocale.NEW_MEMBER_NEW} <EditBtn onClick={moveToSignUp}>{dataLocale.CREATE_ACCOUNT}</EditBtn></InfoText>}
					{isMobileView && <ButtonWrapper><Button
						id="create-account-button"
						theme={ThemeENUM.signInPrimary}
						// kind={kindENUM.background}
						showChildren={true}
						componentSize={ComponentSizeENUM.small}
						font={TypographyENUM.lkSansBold} //onDecreaseItem(item.id)
						width="100"
						onClick={moveToSignUp}
						style={{ background: "#F3FBEF", border: "1.5px solid #737397" }}
					>
						{dataLocale.CREATE_ACCOUNT}
					</Button>
					</ButtonWrapper>
					}
				</>}
			</>}
			{/* {!showOTP && !showPassword && <>
				<SignInHead signInText={dataLocale.SIGN_IN} />
				<InputFieldContainer isMobileView={ isMobileView } isFullWidth={true} isError={Boolean(error || (signInStatus.isError && signInStatus.errorMessage))} subText={error || (signInStatus.isError && signInStatus.errorMessage ? signInStatus.errorMessage : "")}>
					<TextField value={typeof inputValue === "string" ? inputValue : inputValue.toString()} type={TextTypeENUM.text} onChange={(e) => {
						setInputValue(e.target.value);
						// if(isNaN(Number(e.target.value))){
						validateErrors("", ()=>(null));
						if(!isNaN(Number(e.target.value)) && e.target.value.toString().length === 10){
							setError("");
						}
						// }
					}} placeholder="Mobile/Email" onKeyUpChange={onKeyUpHandler} maxLength={fieldType === SignInType.PHONE ? 10 : 100}>
						{fieldType === SignInType.PHONE ? countryCode : ""}
					</TextField>
				</InputFieldContainer>
				{ isCaptchaRequired && <Captcha>
					<div id="recaptcha"></div>
				</Captcha>}

				{isMobileView && <Button
					id="create-account-button"
					theme={ThemeENUM.secondary}
					kind={kindENUM.border}
					showChildren={true}
					componentSize={ComponentSizeENUM.small}
					font={TypographyENUM.lkSansRegular} //onDecreaseItem(item.id)
					width="100"
					onClick={moveToSignUp}
				>{dataLocale.CREATE_ACCOUNT}</Button>}
			</>} */}
			{!showOTP && !showPassword && <>
				<SignInHead signInText={dataLocale.SIGN_IN} isRTL={isRTL} />
				<InputFieldContainer gapZero={!isMobileView && supportMultipleCountries} forceLTR={isRTL && fieldType === SignInType.PHONE} isFullWidth={true} isError={Boolean(error || (signInStatus.isError && signInStatus.errorMessage))} subText={error || (signInStatus.isError && signInStatus.errorMessage ? signInStatus.errorMessage : "")} isMobileView={isMobileView}>
					{fieldType === SignInType.PHONE && phoneCodeConfigData && supportMultipleCountries && <PhoneCodeDropdownWrapper top={incCountryCodeFont ? "0" : "2"}><PhoneCodeDropdown isMobileView={isMobileView} width={isMobileView ? "" : "68px"} showSvgArrow = {true} incCountryCodeFont={incCountryCodeFont} availableCountries={phoneCodeConfigData.availableCountries} currentPhoneCode={currentPhoneCode} onChange={(newPhoneCode: string) => setCurrentPhoneCode(newPhoneCode)} /></PhoneCodeDropdownWrapper>}
					<TextField autoFoc={true} isRTL={isRTL} value={typeof inputValue === "string" ? inputValue : inputValue.toString()} type={TextTypeENUM.text} onChange={(e) => changeInputValue(e)
					// {
					// 	setInputValue(e.target.value);
					// 	// if(isNaN(Number(e.target.value))){
					// 	validateErrors("", ()=>(null));
					// 	if(!isNaN(Number(e.target.value)) && e.target.value.toString().length === 10){
					// 		setError("");
					// 	}
					// 	// }
					// }
					} placeholder={dataLocale?.MOBILE_EMAIL_TEXT} name="emailOrPhone" onKeyUpChange={onKeyUpHandler} onBlur={(e) => {validateErrors(e, () => null); setInputFocused(true);}} maxLength={fieldType === SignInType.PHONE ? getNumberLengthFromCode(countryCode) + 1 : 100}>
						{fieldType === SignInType.PHONE && !supportMultipleCountries ? countryCode : ""}
					</TextField>

				</InputFieldContainer>
				{/* { isCaptchaRequired && <Captcha>
					<div id="recaptcha"></div>
				</Captcha>}

				{isCaptchaRequired && <Verify onClick={()=>{
					onProceed(fieldType, typeof inputValue === "string" ? inputValue : inputValue.toString());
					console.log({ fieldType, inputValue });

				}}>Verify</Verify>} */}
				{/* {signInStatus.isLoading ? <InlineLoader alt="Loading..." src="//static.lenskart.com/skin/frontend/base/default/images/loader2.gif" /> : <Button */}
				{(isCaptchaRequired) &&
					<Captcha isRTL={isRTL}>
						{/* <div id="recaptcha"></div> */}
						{/* <SampleDiv setRecaptchaInDom={setRecaptchaInDom} setisCaptchaMounted={setisCaptchaMounted}/> */}
					</Captcha>}
				{ showWhatsAppOption && <SelectField isPreChecked={whatsAppChecked} setGetsAppUpdate={setGetWhatsAppUpdate}><FlexCenter><WhatsAppText>{dataLocale.GET_UPDATES_ON_WHATSAPP_NEW || "Get updates on Whatsapp"} </WhatsAppText><img width={25} src="https://static.lenskart.com/media/desktop/img/25-July-19/whatsapp.png" alt="Whatsapp"/></FlexCenter></SelectField>}
				{signInStatus.isLoading ? <InlineLoader alt="Loading..." src={loaderImageLink} /> : <Button
					id="remove-button"
					theme={isMobileView ? ThemeENUM.disableSignInColor : ThemeENUM.primary}
					kind={kindENUM.background}
					showChildren={true}
					componentSize={ComponentSizeENUM.small}
					font={TypographyENUM.lkSansBold} //onDecreaseItem(item.id)
					width="100"
					onClick={(e: any) => validateErrors(e, clickHandler)}
					disabled={(isCaptchaMounted && !isCaptchaVerified) || (inputValue === "") || fieldType === SignInType.PHONE && getNumberLengthFromCode(countryCode) !== inputValue.toString().length}
				>
					{dataLocale.SIGN_IN}
				</Button>}
				<Spacer isCompact={isCompact}/>
				{!isMobileView && <InfoText>{dataLocale.NEW_MEMBER_NEW} <EditBtn onClick={moveToSignUp} disabled={signInStatus.isLoading}>{dataLocale.CREATE_ACCOUNT}</EditBtn></InfoText>}
				{isMobileView && <ButtonWrapper><Button
					id="create-account-button"
					theme={ThemeENUM.signInPrimary}
					// kind={kindENUM.background}
					showChildren={true}
					componentSize={ComponentSizeENUM.small}
					font={TypographyENUM.lkSansBold} //onDecreaseItem(item.id)
					width="100"
					onClick={moveToSignUp}
					style={{ background: "#F3FBEF", border: "1.5px solid #737397" }}
				>
					{dataLocale.CREATE_ACCOUNT}
				</Button>
				</ButtonWrapper>
				}
			</>}
		</SignIn>
	);
};

export { SignInComponent };
