import React, { useEffect, useState } from "react";
import { Cross } from "../../../../Icons";
import { DataType, TextTypeENUM, ThemeENUM, TypographyENUM } from "../../../../Types/general";
import Button from "../../Button";
import { kindENUM } from "../../Button/Button.types";
// import InfoPopMobile from "../../MyOrderMobile/InfoPopMobile/InfoPopMobile.component";
import { InputFieldContainer } from "../components/InputFieldContainer";
import SignInHead from "../components/SignInHead";
import { TextField } from "../components/TextField";
import { CheckoutSigninContainer, ForgotPasswordContainer, SigninInfoField, SignInContainerHeader,CrossContainer, Image, ForgotPasswordOuter, ForgotPasswordSignInWrapper } from "./styles";
interface ForgotPasswordType {
	apiCallback: (email: string) => Promise<DataType | undefined>,
	redirectToHome: () => void,
	validateEmail: (email: string, dataLocale: DataType, isSignUpHome: boolean, isResetPassword: boolean) => string,
	hideHandler: (reset?: boolean) => void,
	isRTL?: boolean,
	dataLocale: DataType,
	isSignin?: boolean,
	onClose: () => void,
	isHome?: boolean,
	msiteForgotPassword?: boolean
	signInImgLink?: string
	isMobileView?: boolean
	negativeMargin?: boolean
	onMobileForgotPassword?: () => void;
}
const ForgotPassword = ({
	onMobileForgotPassword,
	apiCallback,
	validateEmail,
	hideHandler,
	isRTL = false,
	dataLocale,
	isSignin,
	onClose,
	isHome = false,
	msiteForgotPassword = false,
	signInImgLink = "",
	isMobileView = false,
	negativeMargin = false
}: ForgotPasswordType) => {
	const [userEmail, setUserEmail] = useState("");
	const [infoText, setInfoText] = useState("");
	const [isError, setIsError] = useState(false);
	const [isDisable, setIsDisable] = useState(false);
	// const [closeModal,setCloseModal] = useState(false);
	// const [toast, setToast] = useState("");
	// const [toastOpen, setToastOpen] = useState(false);

	function submitOtpHandler(){
		if(!isError){
			apiCallback(userEmail)
				.then((res: any) => {
					// console.log(res, "Response");
					if(res.error.isError){
						setInfoText(res.error.message);
						setIsError(true);
						// alert(res.message);
						// redirectToHome();
					} else {
						setIsError(false);
						if(!isMobileView) {
							setInfoText(res.data);
							setIsDisable(true);
							// if(isHome){
							// 	// alert(res.data);
							// 	// setCloseModal(true);
							// 	// onClose();
							// }
							// else{
							// 	redirectToHome();
							// }
							if(!isHome) hideHandler(true);
						} else {
							if(onMobileForgotPassword) {
								onMobileForgotPassword();
							}
							// setToast(res.data);
							// setToastOpen(true);
						}
					}
					// setInfoText(res.message);
					// setIsError(false);
					// alert(res.message);
					// redirectToHome();
				})
				.catch((err: any) => {
					console.log(err, "Err Response");
					setInfoText(err.message);
					setIsError(true);
					// setInfoText(err.message);
					// setIsError(true);
				});
		}
	}
	// useEffect(() => {
	// 	if(infoText && !isError && !isMobileView){
	// 		if(isHome){
	// 			alert(infoText);
	// 			setCloseModal(true);
	// 			onClose();
	// 		}
	// 		else{
	// 			redirectToHome();
	// 		}
	// 	}
	// }, [infoText]);

	useEffect(() => {
		if(userEmail) {
			const error = validateEmail(userEmail,dataLocale, true, true);
			if(error) setIsError(true);
			else setIsError(false);
			setInfoText(error);
		}
	}, [userEmail]);

	useEffect(()=>{
		if(userEmail === ""){
			setIsError(true);
		}
	},[]);

	// console.log(msiteForgotPassword,signInImgLink,"signInImgLink ........");
	const handleKeyUpOnInput = (e: any) => {
		if(e.target.value === "" || validateEmail(e.target.value,dataLocale, true, true)) return;
		e.preventDefault();

		if (e.keyCode === 13) {
			submitOtpHandler();
		}
	};

	return (
		<ForgotPasswordOuter negativeMargin={negativeMargin}>
			{/* {!closeModal && */}
			<ForgotPasswordContainer isSignin={isSignin} msiteForgotPassword={msiteForgotPassword}>
				{msiteForgotPassword && <Image isMobilView={isMobileView} src={signInImgLink} alt="signin image" />}
				<ForgotPasswordSignInWrapper>
					<CheckoutSigninContainer>
						<SignInContainerHeader>
							<SignInHead arrowAction={hideHandler} signInText={dataLocale?.RESET_YOUR_PASSWORD} isRTL={isRTL}/>
							{isHome && <CrossContainer isRTL = {isRTL} onClick={onClose}><Cross /></CrossContainer>}
						</SignInContainerHeader>
						{/* <h2><div>K--</div>Reset your Password</h2> */}
						<SigninInfoField>{dataLocale?.RECEIVE_A_LINK_TO_RESET_PASSWORD}</SigninInfoField>
						<InputFieldContainer isFullWidth={true} isError={isError} subText={infoText} isForgotPassword={true}>
							<TextField value={userEmail} type={TextTypeENUM.text} onChange={(e) => setUserEmail(e.target.value)} placeholder={dataLocale?.PLEASE_ENTER_YOUR_EMAIL_ID} onKeyUpChange={handleKeyUpOnInput}></TextField>
						</InputFieldContainer>
						{/* <input type="text" placeholder="Please enter your email id" value={userEmail} onChange={e => setUserEmail(e.target.value)}/> */}

						<Button
							id="remove-button"
							theme={ThemeENUM.primary}
							kind={kindENUM.background}
							showChildren={true}
							font={TypographyENUM.lkSansBold} //onDecreaseItem(item.id)
							width="100"
							onClick={submitOtpHandler}
							disabled={isError || isDisable}
							style={{ height:"56px" , borderRadius:"100px", fontSize:"16px" }}
						>
							{dataLocale?.SEND_PASSWROD_RESET_LINK}
						</Button>
						{/* <button onClick={submitOtpHandler}>SUBMIT</button>
				<button onClick={hideHandler}>Hide</button>
				<button onClick={redirectToHome}>Go to Home</button> */}
					</CheckoutSigninContainer>
				</ForgotPasswordSignInWrapper>
			</ForgotPasswordContainer>
			{/* } */}
			{/* {isMobileView &&
				<InfoPopMobile
					isOpen={toastOpen}
					text={
						toast
					}
					closeHandler={() => {setToastOpen(false); setTimeout(() => setToast(""), 1000);}}
					time={2000}
				/>
			} */}
		</ForgotPasswordOuter>
	);
};

export default ForgotPassword;
