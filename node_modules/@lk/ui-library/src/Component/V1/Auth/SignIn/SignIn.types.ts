import { SignInStatusType, SignInType, TypographyENUM } from "../../../../Types/general";
import { DataType } from "../../Header/Header.types";

export interface SignInFormType {
	id: string;
	dataLocale: any;
	onSignIn: () => void;
	font: TypographyENUM;
	onProceed: (fieldType: SignInType, value: string, password?: string, selectedCountryCode?: string) => void;
	resetSignInStatus?: () => void;
	onClose: () => void;
	moveToSignUp: () => void;
	countryCode: string;
	guestCheckout?: ({ email, number }: { email: string, number: string | null }) => void,
	signInStatus: SignInStatusType;
	isRTL: boolean;
	signInImgLink: string;
	loaderImageLink: string;
	setGetWhatsAppUpdate: () => any,
	isMobileCart?: boolean,
	isCaptchaRequired: boolean;
	resetServerError?: () => void;
	resetCaptcha: () => void;
	renderCaptcha: () => void;
	scriptLoaded: boolean;
	isCaptchaVerified: boolean;
	CaptchaIsError?: boolean;
	notShowOtp: () => void;
	OtpTime?:number;
	showHome?: boolean;
	recaptchaInDom: boolean;
	setRecaptchaInDom: (arg: boolean) => void;
	forgotPassCallback: (email: string) => Promise<DataType | undefined>,
	redirectToHome: () => void
	otpSent?: boolean;
	setCaptcha?: (val: any) => void,
	resetCaptchaVerified?: () => void,
	isHome?: boolean
	deviceType: string
	isMobileView?: boolean
	showGuestFlow?: boolean
	msiteForgotPassword?: boolean
	showWhatsAppOption?: boolean
	isSignIn?: boolean
	showNewForgotPassword?: boolean
	negativeMargin?: boolean
	isCompact?: boolean
	isCheckout?:boolean
	homeGuestFlow?: boolean
	phoneCodeConfigData?: {availableCountries: {country: string, code: string}[]}
	configData?: any
	supportMultipleCountries?: boolean
	incCountryCodeFont?: boolean,
	whatsAppChecked?: boolean
}
