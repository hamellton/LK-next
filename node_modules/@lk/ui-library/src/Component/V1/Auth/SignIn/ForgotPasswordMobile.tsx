import React, { useEffect, useState } from "react";
import { TextTypeENUM, ThemeENUM, TypographyENUM } from "../../../../Types/general";
import Button from "../../Button";
import { kindENUM } from "../../Button/Button.types";
import { InputFieldContainer } from "../components/InputFieldContainer";
import { TextField } from "../components/TextField";
import SignInHead from "../components/SignInHead";
import { ForgotPasswordContainerMobile, CheckoutSigninContainerMobile, CheckoutSigninContainerMobileContent, ButtonContainer, Image } from "./styles";

const ForgotPasswordMobile = ({ apiCallback, redirectToHome, validateEmail, isMobileView,dataLocale, isRTL=false, hideHandler, signInImgLink="" }: any) => {
	const [userEmail, setUserEmail] = useState("");
	const [infoText, setInfoText] = useState("");
	const [isError, setIsError] = useState(false);
	function submitOtpHandler(){
		if(!isError){
			apiCallback(userEmail)
				.then((res: any) => {
					// console.log(res, "Response");
					if(res.error.isError){
						setInfoText(res.error.message);
						setIsError(true);
						// alert(res.message);
						// redirectToHome();
					} else {
						setInfoText(res.data);
						setIsError(false);
						alert(res.data);
						redirectToHome();
					}
					// setInfoText(res.message);
					// setIsError(false);
					// alert(res.message);
					// redirectToHome();
				})
				.catch((err: any) => {
					console.log(err, "Err Response");
					setInfoText(err.message);
					setIsError(true);
					// setInfoText(err.message);
					// setIsError(true);
				});
		}
	}
	useEffect(() => {
		if(userEmail) {
			const error = validateEmail(userEmail);
			if(error) setIsError(true);
			else setIsError(false);
			setInfoText(error);
		}
	}, [userEmail]);

	useEffect(()=>{
		if(userEmail === ""){
			setIsError(true);
		}
	},[]);


	return (
		<ForgotPasswordContainerMobile>
			<Image isMobilView={isMobileView} src={signInImgLink} alt="signin image" />
			<CheckoutSigninContainerMobile>
				<CheckoutSigninContainerMobileContent>
					<SignInHead arrowAction={hideHandler} signInText={dataLocale?.RESET_PASSWORD} isRTL={isRTL}/>
					{/* <CheckoutSigninHeader></CheckoutSigninHeader> */}

					<InputFieldContainer isFullWidth={true} isError={isError} subText={infoText} isMobileView={isMobileView}>
						<TextField value={userEmail} type={TextTypeENUM.text} onChange={(e) => setUserEmail(e.target.value)} placeholder={dataLocale?.PLEASE_ENTER_YOUR_EMAIL_ID} onKeyUpChange={() => null}></TextField>
					</InputFieldContainer>
					{/* <input type="text" placeholder="Please enter your email id" value={userEmail} onChange={e => setUserEmail(e.target.value)}/> */}
					<ButtonContainer>
						<Button
							id="remove-button"
							theme={ThemeENUM.primary}
							kind={kindENUM.background}
							showChildren={true}
							font={TypographyENUM.lkSansBold} //onDecreaseItem(item.id)
							width="100"
							onClick={submitOtpHandler}
							disabled={isError}
							loading={Boolean(infoText.trim()) && !isError}
						>
							{infoText && !isError ? "" : dataLocale?.SEND_PASSWROD_RESET_LINK}
						</Button>
					</ButtonContainer>
				</CheckoutSigninContainerMobileContent>
				{/* <button onClick={submitOtpHandler}>SUBMIT</button>
				<button onClick={hideHandler}>Hide</button>
				<button onClick={redirectToHome}>Go to Home</button> */}
			</CheckoutSigninContainerMobile>
		</ForgotPasswordContainerMobile>
	);
};

export default ForgotPasswordMobile;
