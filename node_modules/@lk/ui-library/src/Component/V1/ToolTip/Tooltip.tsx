/* eslint-disable @typescript-eslint/no-empty-function */
/* eslint-disable @typescript-eslint/no-explicit-any */
import React, { useEffect, useRef, useState } from "react";
import ReactDOM from "react-dom";
import { TooltipWrapper } from "./styles";


const TooltipInner = ({
	child,
	className,
	showArrow,
	placement,
	arrowStyles,
	tooltipStyles,
	forwardedRef,
	...props
}:any) => {
	// console.log("=======>", tooltipStyles);
	return ReactDOM.createPortal(
		<TooltipWrapper
			className={`${className || ""} tooltip in fade ${placement || ""}`}
			direction={placement}
			style={tooltipStyles}
			{...props}
			ref={forwardedRef}
		>
			{showArrow && (
				<div className="tooltip-arrow" style={!arrowStyles ? { left: "50%" } : arrowStyles}></div>
			)}
			<div style={{ marginTop: "5px" }} className="tooltip-inner">{child}</div>
		</TooltipWrapper>,
		document.body
	);
};
export default function Tooltip({ className, showArrow = true, reference, placement, ...props }:any) {
	const mainRef = useRef();
	const tooltipRef = useRef<HTMLInputElement>();
	const [arrowStyles, setArrowStyles] = useState({});
	const [tooltipStyles, setTooltipStyles] = useState({});
	useEffect(() => {
		const ele = mainRef.current;
		if (placement && reference && tooltipRef.current) {
			const { left, top, height, width } = reference.getBoundingClientRect();
			let modLeft = left;
			let modTop = top + (window ? window.scrollY : 0);
			const { height: tooltipHeight, width: tooltipWidth } = tooltipRef.current.getBoundingClientRect();
			let arrowLeft = left;
			let arrowTop = top;
			const arrowHeight = 5;
			switch (placement) {
			case "top":
				modTop -= tooltipHeight;
				modLeft = left - (tooltipWidth - width) / 2;
				arrowTop = "calc(100% - 5px)";
				arrowLeft = "50%";
				break;
			case "left":
				modLeft -= tooltipWidth + arrowHeight;
				modTop = top - (tooltipHeight - height) / 2;
				arrowTop = "50%";
				arrowLeft = "calc(100% - 5px)";
				break;
			case "right":
				modLeft += width + arrowHeight;
				modTop = top - (tooltipHeight - height) / 2;
				arrowTop = "50%";
				arrowLeft = "0";
				break;
			case "bottom":
				modTop += height + arrowHeight;
				modLeft = left - (tooltipWidth - width) / 2;
				arrowTop = "0";
				arrowLeft = "48%";
				break;
			default:
				break;
			}
			setArrowStyles({ left: arrowLeft, top: arrowTop, position: "absolute" });
			setTooltipStyles({ left: modLeft, top: modTop, position: "absolute" });
		} else if (ele) {
			const currEle = ele as HTMLInputElement;
			const { left, top } = currEle.getBoundingClientRect();
			setTooltipStyles({ left, top, position: "absolute" });
		}
		return () => {};
	}, [mainRef.current, reference, placement, tooltipRef.current]);

	return (
		<>
			<div ref={mainRef.current}></div>
			<TooltipInner
				{...props}
				arrowStyles={arrowStyles}
				child={props.children}
				className={className}
				forwardedRef={tooltipRef}
				placement={placement}
				showArrow={showArrow}
				tooltipStyles={tooltipStyles}
			/>
		</>
	);
}
