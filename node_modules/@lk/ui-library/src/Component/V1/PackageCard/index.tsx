import React from "react";
import {
	PackageCardWrapper,
	PackageDetails,
	PackageCardHead,
	PackageDetailsList,
	BluLogo,
	BluLogoWrapper,
	TextPrice,
	WarrantyText,
	StrongTextPrice,
	Title,
	PackageButton,
	OfferLI,
	SpecsLI,
	PackageInfoWrapper,
	InfoIcon,
	PackageImage,
	PackageHolder,
	StrikedText,
	NewPrice,
	ExchangeInfoText
} from "./styles";
import { PackageCardTypes } from "./PackageCard.types";
import { Cross } from "../../../Icons";
import { action } from "@storybook/addon-actions";
import Tooltip from "../ToolTip/Tooltip";
import OverlayTrigger from "../OverlayTrigger/OverlayTrigger";
// import Tooltip from "../ToolTip/Tooltip";

/**
 * Default PackageCard Component
 */
const PackageCard = ({
	width,
	onClick,
	dataLocale,
	id,
	imageUrl,
	packageTitle,
	warrantyTxt,
	specifications,
	offerText,
	price,
	// prices,
	isBluCut,
	blueCutLogo,
	isSunglasses,
	font,
	isExchangeFlow,
	productPrices,
	isRTL=false
}: PackageCardTypes) => {

	const onButtonClick = (e: React.MouseEvent<HTMLElement>) => {
		e.preventDefault();
		action("on button click")(e);
		// onClick(id,addOns);
		onClick(id,"");
	};
	
	// console.log(prices, price, "prices");

	return (
		<PackageCardWrapper id={id} width={width} onClick={onButtonClick} styleFont={font}>
			<PackageHolder>
				<PackageCardHead isBluCut={isBluCut}>
					{!isBluCut && <Title className="title">{packageTitle}</Title>}
					{isBluCut && (
						<BluLogoWrapper className="logo">
							<BluLogo alt={packageTitle} src={blueCutLogo} title={packageTitle} />
						</BluLogoWrapper>
					)}
					{isSunglasses ? (
						<div className="brand-image">
							{imageUrl && <PackageImage alt={packageTitle} src={imageUrl} title={packageTitle} />}
						</div>
					) : null}
					<TextPrice
						isSunglasses={isSunglasses}
						isBluCut={isBluCut}
						className={
							isSunglasses
								? "price-Sunglasses price"
								: "price"
						}
					>
						{/* {dataLocale.FRAME_PLUS_LENS} */}
						Frame + Lens
						{isExchangeFlow &&
						<StrikedText>{price.symbol} {price.itemExchangePrice || ((productPrices.firstFrameFreePrice || productPrices?.lkPrice) + price?.lkPrice)}</StrikedText>}
						{isExchangeFlow && (
							<NewPrice>
								{price.symbol}
								{Number(((productPrices.firstFrameFreePrice || productPrices?.lkPrice) + price?.lkPrice) - (productPrices.remainingExchangePrice || 0)) > 0 ? (
									<span className="">{((productPrices.firstFrameFreePrice || productPrices?.lkPrice) + price?.lkPrice) - (productPrices.remainingExchangePrice || 0)}</span>
								) : (
									<span>Free</span>
								)}
							</NewPrice>
						)}
						{isExchangeFlow && (
							<ExchangeInfoText>
								{Number(((productPrices.firstFrameFreePrice || productPrices?.lkPrice) + price?.lkPrice) - (productPrices.remainingExchangePrice || 0)) > 0 ? dataLocale.EXCHANGE_TEXT : dataLocale.EXCHANGE_FREE_TEXT}
							</ExchangeInfoText>
						)}
						{!isExchangeFlow && <StrongTextPrice
							isBluCut={isBluCut}
							isSunglasses={isSunglasses}
						>
							{price.symbol} {productPrices?.lkPrice + price?.lkPrice}
						</StrongTextPrice>}
						{/* )}  */}
					</TextPrice>
					{warrantyTxt && (
						<WarrantyText isBluCut={isBluCut}>
							{warrantyTxt}
						</WarrantyText>
					)}
					<PackageButton
						className="btn btn-warning"
						style={{ backgroundColor:"#00BAC6" }}
					>
						{ dataLocale.SELECT_LENS}
					</PackageButton>
				</PackageCardHead>
				<PackageDetails>
					<PackageDetailsList>
						{offerText && (
							<OfferLI>{offerText}</OfferLI>
						)}
						{specifications.map((specification, index) => {
							return specification.isEnabled ? (
								<SpecsLI
									key={`specification-${index}`}
									style={{
										backgroundColor: index % 2 === 0 ? "#FFFFFF" : "#FAFAFA",
									}}
								>
									{specification.title}
									{specification.showHoverIcon && specification.hoverUrl && (
										<OverlayTrigger
											delayHide={200}
											overlay={
												<Tooltip
													className="package-info-details"
													id="packageInfoDetails"
													showArrow={false}
													// title={dataLocale.TOLLTIP}
												>
													<img alt="" src={specification.hoverUrl || ""} width="100%"/>
												</Tooltip>
											}
											placement="bottom"
										>
											<PackageInfoWrapper isRTL={isRTL}>
												<InfoIcon
													alt={dataLocale.INFO}
													src="https://static.lenskart.com/media/desktop/img/information-button.png"
												/>
											</PackageInfoWrapper>
										</OverlayTrigger>
									)}
								</SpecsLI>
							) : (
								<SpecsLI
									key={`specification-${index}`}
									style={{
										backgroundColor: index % 2 === 0 ? "#FFFFFF" : "#FAFAFA",
									}}
								>
									<Cross/>
								</SpecsLI>
							);
						})}
					</PackageDetailsList>
				</PackageDetails>
			</PackageHolder>
		</PackageCardWrapper>
	);
};
export default PackageCard;
