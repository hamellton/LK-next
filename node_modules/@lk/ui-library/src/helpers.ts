import { DataType, JSON } from "./Types/general";

const isEmpty = (value: any) => value === undefined || value === null || value === "";
export function validateRequired(val: any){
	const len = val ? val.trim().length : 0;
	if (isEmpty(val) || len < 1) {
		return "This is required";
	}
	return "";
}

export function validatePassword(val: any, dataLocale: DataType){
	const len = val ? val.trim().length : 0;
	if(!val){
		return dataLocale?.THIS_IS_A_REQUIRED_FIELD || "This is a required field";
	}else if(len<5){
		return dataLocale?.PASSWORD_SHOULD_BE_MORE_THAN_6_CHARACTERS_NEW || "Password should be more than 6 characters";
	}

	return "";
}

export function validateAddress(val: string) {
	const regEx = /(?!^\d+$)^.+$/;
	if(!val) {
		return "";
	}
	else if(!regEx.test(val)) {
		return "Please enter a valid address";
	}

	return "";
}

export function validateUnitNumber(val: string) {
	const regEx = /(?!^\d+$)^.+$/;
	if(!val) {
		return "This is required";
	}
	else if(!regEx.test(val)) {
		return "Please enter a valid address";
	}
	return "";
}


export const getCmsLinks = (country:string, pageName:string) => {
	if(pageName === "TERMS_AND_CONDITIONS") {
		switch (country) {
		case "in":
			return "/terms-conditions";
			break;
		case "sa":
			return "/sa_terms_conditions/";
			break;
		case "us":
			return "/us_terms_conditions/";
			break;
		default:
			return "/terms-conditions";
			break;
		}
	}else if(pageName === "PRIVACY_POLICY"){
		switch (country) {
		case "in":
			return "/privacy-policy";
			break;
		case "sa":
			return "/sa_privacy_policy/";
			break;
		case "us":
			return "/us_privacy_policy/";
			break;
		case "ae":
			return "/ae_privacy_policy/";
			break;
		case "sg":
			return "/sg-privacy-policy/";
		default:
			return "/privacy-policy";
			break;
		}
	}
};

export function validateNumber(num: string | number, countryCode?: string, customValidationFn?: (num: string | number) => string, dataLocale?: DataType, isSignUpHome?: boolean) {
	if(isSignUpHome){
		if(validateRequired(num)){
			return dataLocale?.PLEASE_ENTER_VALID_MOBILE_NUMBER || "This is a required field.";
		}else if (!num || num.toString().split("").length < (getNumberLengthFromCode(countryCode || "+91") || 10) || !(getPhoneNumberRegex(countryCode || "+91").test(`${num}`))){
			return countryCode === "+91" ? dataLocale?.PLEASE_ENTER_A_VALID_MOBILE_NUMBER_INDIA || "Please enter a valid mobile number (eg. 9987XXXXXX)" : dataLocale?.PLEASE_ENTER_A_VALID_MOBILE_NUMBER_SA_EN || "Please enter a valid mobile number (eg. 590xxxxxx)";
		}
		return "";
	}else{
		if(customValidationFn) return customValidationFn(num);
		else if (!num || num.toString().split("").length < (getNumberLengthFromCode(countryCode || "+91") || 10) || !(getPhoneNumberRegex(countryCode || "+91").test(`${num}`))) return "Please enter a valid number";
		return "";
	}
}
export function validateEmail(email: string | number, dataLocale?: DataType, isSignUpHome?: boolean, isResetPassword?: boolean) {
	if (isSignUpHome) {
		if (!email) {
			return dataLocale?.PLEASE_ENTER_VALID_EMAIL_OR_MOBILE || "This is a required field.";
		}
		if (!String(email)
			.toLowerCase()
			.match(
				/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
			)
		) {
			return (isResetPassword ? dataLocale?.PLEASE_ENTER_VALID_EMAIL : dataLocale?.PLEASE_ENTER_VALID_EMAIL_NEW) || "Please enter a valid email address e.g. johndoe@domain.com.";
		}
	}else{
		if (!email || !String(email)
			.toLowerCase()
			.match(
				/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
			)
		) {
			return dataLocale?.PLEASE_ENTER_VALID_EMAIL_NEW || "Please enter a valid Email";
		}
	}

	return "";
}

export function isName(val: string,dataLocale?: DataType) {
	let error = "";
	if(!val) {
		error = dataLocale ? dataLocale?.THIS_IS_A_REQUIRED_FIELD || "This is a required field." : "This is required";
	} else if (!val.trim()) {
		error = dataLocale?.ONLY_SPACES_ARE_NOT_REQUIRED_NEW || "Only spaces are not allowed";
	} else if ((val && val.length < 1) || !/^[(a-zA-Z )]+$/.test(val)) {
		error = dataLocale?.ONLY_ALPHABETS_AND_SPACE_ARE_ALLOWED_NEW || "Only alphabets and space are allowed";
	}
	return error || validateRequired(val);
}

export function getNumberLengthFromCode(code: string){
	switch (code) {
	case "+91":
		return 10;
	case "+966":
		return 9;
	case "+971":
		return 9;
	case "+65":
		return 8;
	case "+1":
		return 10;
	default:
		return 9;
	}
}

export const getPhoneNumberRegex = (code: string) => {
	switch (code) {
	case "+91":
		return /[6-9][0-9]{9}/;
	case "+1":
		return /([2-9][0-9][0-9]){2}[0-9]{4}/;
	case "+966":
		return /^\d+$/;
	case "+65":
		return /^\d{8}/;
	case "+971": 
		return /^\d+$/;
	default:
		return /^\d+$/;
	}
};

export const roundUptoDigits = (number: number, digits:number) => {
	if (number) {
		const factor = 10 ** digits;
		return Math.round(Number(number) * factor) / factor;
	}
	return number;
};

export function formatDateWithPattern(time: number, pattern: string, year = "") {
	let formattedString = "";
	if (isNaN(time)) return "";
	const days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
	const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December",
	];
	const date = new Date(time).getDate();
	const day = new Date(time).getDay();
	const month = new Date(time).getMonth();
	formattedString = pattern.replace("EEE", days[day].substr(0, 3));
	formattedString = formattedString.replace("MMM", months[month].substr(0, 3));
	// In case of December, Date will replace on second D other than Dec
	if (month === 11 && pattern.includes("D")) {
		const firstPart = formattedString.substr(0, pattern?.indexOf("D"));
		const lastPart = formattedString.substr(pattern?.indexOf("D") + 1);
		formattedString = firstPart + date + lastPart;
	} else {
		formattedString = formattedString.replace("D", date.toString());
	}
	if (year) {
		formattedString = formattedString.concat(" " + new Date(time).getFullYear());
	}
	return formattedString;
}

export function honorFlags(returnable: boolean, isExchangeable: boolean, isRefundable: boolean, alreadyReturned = false) {
	let dataPrefix = "data";
	let returnStateKey = "";
	if (alreadyReturned) {
		dataPrefix = "data_returned";
	}
	if (returnable && isExchangeable && isRefundable) {
		returnStateKey = `${dataPrefix}_refundable_exchangeable`;
	} else if (returnable && isExchangeable && !isRefundable) {
		returnStateKey = `${dataPrefix}_nonrefundable_exchangeable`;
	} else if (returnable && !isExchangeable && isRefundable) {
		returnStateKey = `${dataPrefix}_refundable_nonexchangeable`;
	} else if (!returnable || (!isExchangeable && !isRefundable && !alreadyReturned)) {
		returnStateKey = `${dataPrefix}_nonrefundable_nonexchangeable`;
	}
	return returnStateKey;
}

export function getOSType() {
	const ua = window.navigator.userAgent;
	let osType = "";
	if (/Android/i.test(ua)) {
		osType = "android";
	} else if (/iPhone/i.test(ua)) {
		osType = "ios";
	}
	return osType;
}

export const studioFlowValidations = (initialFormState: JSON) => ({
	firstName: (firstName: string) => {
		firstName = firstName.trim();
		if (firstName === "") return "This is required";
		else if (!/^[a-zA-Z ]+$/.test(firstName)) return "Invalid first name";
	},
	lastName: (lastName: string) => {
		lastName = lastName.trim();
		if (lastName === "") return "This is required";
		else if (!/^[a-zA-Z ]+$/.test(lastName)) return "Invalid last name";
	},
	phone: (phone: string) => {
		phone = phone.trim();
		if (phone === "") return "This is required";
		else if (!getPhoneNumberRegex(initialFormState.phoneCode as string).test(phone)) return "Invalid phone number";
	},
	phoneCode: (phoneCode: string) => {
		phoneCode = phoneCode.trim();
		if (phoneCode === "") return "This is required";
		else if (!/\+[0-9]{1,3}/.test(phoneCode)) return "Invalid phone code";
	},
	email: (email: string) => {
		email = email.trim();
		if (email === "") return "This is required";
		else if (!/^[a-zA-Z0-9._]+[@]{1}[a-zA-Z]+[a-zA-Z0-9]*\.[a-zA-Z]{2,}$/.test(email)) return "Invalid email address";
	},
	gender: (gender: string) => {
		gender.trim();
		if (gender === "") return "This is required";
		else if (!/male|female|unknown/.test(gender)) return "Invalid gender";
	}
});
